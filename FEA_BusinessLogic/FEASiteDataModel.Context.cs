//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FEA_BusinessLogic
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class FEA_ITSEntities : DbContext
    {
        public FEA_ITSEntities()
            : base("name=FEA_ITSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<CostCenter> CostCenters { get; set; }
        public DbSet<LogChangePass> LogChangePasses { get; set; }
        public DbSet<SiteFunction_UserGroup> SiteFunction_UserGroup { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserPosition> UserPositions { get; set; }
        public DbSet<WFDocumentType> WFDocumentTypes { get; set; }
        public DbSet<WFMain> WFMains { get; set; }
        public DbSet<WFMainDetail> WFMainDetails { get; set; }
        public DbSet<WFNode> WFNodes { get; set; }
        public DbSet<WFNodeDetail> WFNodeDetails { get; set; }
        public DbSet<DeviceRegistrationDetail> DeviceRegistrationDetails { get; set; }
        public DbSet<Item> Items { get; set; }
        public DbSet<TagPrefix> TagPrefixes { get; set; }
        public DbSet<user_account> user_account { get; set; }
        public DbSet<UserGroup> UserGroups { get; set; }
        public DbSet<Currency> Currencies { get; set; }
        public DbSet<Unit> Units { get; set; }
        public DbSet<ITInventory> ITInventories { get; set; }
        public DbSet<TransferLog> TransferLogs { get; set; }
        public DbSet<PackingManifestReturnedItem> PackingManifestReturnedItems { get; set; }
        public DbSet<ProductStockFromERP> ProductStockFromERPs { get; set; }
        public DbSet<Factory> Factories { get; set; }
        public DbSet<SAConfigure> SAConfigures { get; set; }
        public DbSet<SADestination> SADestinations { get; set; }
        public DbSet<SAReason> SAReasons { get; set; }
        public DbSet<ExportItemChecking> ExportItemCheckings { get; set; }
        public DbSet<StockInEquipment> StockInEquipments { get; set; }
        public DbSet<StockOutEquipment> StockOutEquipments { get; set; }
        public DbSet<ITSAssetFTY> ITSAssetFTies { get; set; }
        public DbSet<ITSAssetRecData> ITSAssetRecDatas { get; set; }
        public DbSet<WHExportOrder> WHExportOrders { get; set; }
        public DbSet<WFRefference> WFRefferences { get; set; }
        public DbSet<WFRefferenceDetail> WFRefferenceDetails { get; set; }
        public DbSet<PackingManifest> PackingManifests { get; set; }
        public DbSet<WHImportOrder> WHImportOrders { get; set; }
        public DbSet<WHImportOrderDetail> WHImportOrderDetails { get; set; }
        public DbSet<DeviceRegistration> DeviceRegistrations { get; set; }
        public DbSet<HardwareRequirement> HardwareRequirements { get; set; }
        public DbSet<ITSAssetDetail> ITSAssetDetails { get; set; }
        public DbSet<ExportItemApproverItem> ExportItemApproverItems { get; set; }
        public DbSet<ExportItem> ExportItems { get; set; }
        public DbSet<ExportItemDetail> ExportItemDetails { get; set; }
        public DbSet<HistoryScan> HistoryScans { get; set; }
        public DbSet<PackingManifestDetail> PackingManifestDetails { get; set; }
        public DbSet<PackingManifestDetailCoordination> PackingManifestDetailCoordinations { get; set; }
        public DbSet<SiteFunction> SiteFunctions { get; set; }
        public DbSet<WHExportOrderDetail> WHExportOrderDetails { get; set; }
        public DbSet<GAAdjustment> GAAdjustments { get; set; }
        public DbSet<GAItemDetail> GAItemDetails { get; set; }
        public DbSet<vw_GetOrderFromERP> vw_GetOrderFromERP { get; set; }
        public DbSet<ShelfInformation> ShelfInformations { get; set; }
        public DbSet<ItemDetail> ItemDetails { get; set; }
        public DbSet<GAItem> GAItems { get; set; }
        public DbSet<SAAuditStatu> SAAuditStatus { get; set; }
        public DbSet<HardwareRequirementDetail> HardwareRequirementDetails { get; set; }
        public DbSet<StockInEquipmentDetail> StockInEquipmentDetails { get; set; }
        public DbSet<StockOutEquipmentDetail> StockOutEquipmentDetails { get; set; }
        public DbSet<ERPDocument> ERPDocuments { get; set; }
        public DbSet<ERPDocumentDetail> ERPDocumentDetails { get; set; }
        public DbSet<ComponentDesign> ComponentDesigns { get; set; }
        public DbSet<WFDelegate> WFDelegates { get; set; }
        public DbSet<MNRequestMain> MNRequestMains { get; set; }
        public DbSet<MNRequestMainDetail> MNRequestMainDetails { get; set; }
        public DbSet<MNStockEquipment> MNStockEquipments { get; set; }
        public DbSet<MNStockEquipmentDetail> MNStockEquipmentDetails { get; set; }
        public DbSet<MNInventory> MNInventories { get; set; }
    
        public virtual ObjectResult<sp_GetFirstApprover_Result> sp_GetFirstApprover(string documentTypeName, Nullable<int> costCenterCode)
        {
            var documentTypeNameParameter = documentTypeName != null ?
                new ObjectParameter("DocumentTypeName", documentTypeName) :
                new ObjectParameter("DocumentTypeName", typeof(string));
    
            var costCenterCodeParameter = costCenterCode.HasValue ?
                new ObjectParameter("CostCenterCode", costCenterCode) :
                new ObjectParameter("CostCenterCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFirstApprover_Result>("sp_GetFirstApprover", documentTypeNameParameter, costCenterCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetNextApprover_Result> sp_GetNextApprover(string documentTypeName, Nullable<int> costCenterCode, string nodeID)
        {
            var documentTypeNameParameter = documentTypeName != null ?
                new ObjectParameter("DocumentTypeName", documentTypeName) :
                new ObjectParameter("DocumentTypeName", typeof(string));
    
            var costCenterCodeParameter = costCenterCode.HasValue ?
                new ObjectParameter("CostCenterCode", costCenterCode) :
                new ObjectParameter("CostCenterCode", typeof(int));
    
            var nodeIDParameter = nodeID != null ?
                new ObjectParameter("NodeID", nodeID) :
                new ObjectParameter("NodeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetNextApprover_Result>("sp_GetNextApprover", documentTypeNameParameter, costCenterCodeParameter, nodeIDParameter);
        }
    
        public virtual ObjectResult<sp_QueryPODivert_Result> sp_QueryPODivert(string fEPO)
        {
            var fEPOParameter = fEPO != null ?
                new ObjectParameter("FEPO", fEPO) :
                new ObjectParameter("FEPO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_QueryPODivert_Result>("sp_QueryPODivert", fEPOParameter);
        }
    
        public virtual ObjectResult<sp_QueryPODivertDetail_Result> sp_QueryPODivertDetail(string fEPO)
        {
            var fEPOParameter = fEPO != null ?
                new ObjectParameter("FEPO", fEPO) :
                new ObjectParameter("FEPO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_QueryPODivertDetail_Result>("sp_QueryPODivertDetail", fEPOParameter);
        }
    
        public virtual ObjectResult<sp_QuerySignFlowEland_Result> sp_QuerySignFlowEland(string orderCode)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_QuerySignFlowEland_Result>("sp_QuerySignFlowEland", orderCodeParameter);
        }
    
        public virtual ObjectResult<sp_HardwareRequirementTotalReport_Result> sp_HardwareRequirementTotalReport(string dateTo, string dateFrom)
        {
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_HardwareRequirementTotalReport_Result>("sp_HardwareRequirementTotalReport", dateToParameter, dateFromParameter);
        }
    
        public virtual ObjectResult<sp_GetEquipmentInventory_Result> sp_GetEquipmentInventory(string itemDetailID, string unitID)
        {
            var itemDetailIDParameter = itemDetailID != null ?
                new ObjectParameter("ItemDetailID", itemDetailID) :
                new ObjectParameter("ItemDetailID", typeof(string));
    
            var unitIDParameter = unitID != null ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEquipmentInventory_Result>("sp_GetEquipmentInventory", itemDetailIDParameter, unitIDParameter);
        }
    
        public virtual int sp_GetPurchaseOrderFromITS(string orderCode, Nullable<int> technicianID)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            var technicianIDParameter = technicianID.HasValue ?
                new ObjectParameter("TechnicianID", technicianID) :
                new ObjectParameter("TechnicianID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetPurchaseOrderFromITS", orderCodeParameter, technicianIDParameter);
        }
    
        public virtual int sp_GenerateStockOutEquipment(string orderCode, string documentTypeName, Nullable<int> technicianID)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            var documentTypeNameParameter = documentTypeName != null ?
                new ObjectParameter("DocumentTypeName", documentTypeName) :
                new ObjectParameter("DocumentTypeName", typeof(string));
    
            var technicianIDParameter = technicianID.HasValue ?
                new ObjectParameter("TechnicianID", technicianID) :
                new ObjectParameter("TechnicianID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GenerateStockOutEquipment", orderCodeParameter, documentTypeNameParameter, technicianIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDynamicInventory_Result> sp_GetDynamicInventory(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDynamicInventory_Result>("sp_GetDynamicInventory", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_GetDetailDynamicInventory_Result> sp_GetDetailDynamicInventory(string dateFrom, string dateTo, string itemDetailID)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var itemDetailIDParameter = itemDetailID != null ?
                new ObjectParameter("ItemDetailID", itemDetailID) :
                new ObjectParameter("ItemDetailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDetailDynamicInventory_Result>("sp_GetDetailDynamicInventory", dateFromParameter, dateToParameter, itemDetailIDParameter);
        }
    
        public virtual ObjectResult<sp_CheckCancelConfirmStockin_Result> sp_CheckCancelConfirmStockin(string orderCode)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckCancelConfirmStockin_Result>("sp_CheckCancelConfirmStockin", orderCodeParameter);
        }
    
        public virtual int sp_InventoryCalculate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InventoryCalculate");
        }
    
        public virtual ObjectResult<sp_GetWFHistory_Result> sp_GetWFHistory(string orderCode)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWFHistory_Result>("sp_GetWFHistory", orderCodeParameter);
        }
    
        public virtual ObjectResult<sp_DeviceRegistrationReport_Result> sp_DeviceRegistrationReport(string dateTo, string dateFrom)
        {
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeviceRegistrationReport_Result>("sp_DeviceRegistrationReport", dateToParameter, dateFromParameter);
        }
    
        public virtual ObjectResult<sp_HardwareRequirementReport_Result> sp_HardwareRequirementReport(string dateTo, string dateFrom)
        {
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_HardwareRequirementReport_Result>("sp_HardwareRequirementReport", dateToParameter, dateFromParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ERPUpdateStatusFPO(string fEPOCode, string materialType)
        {
            var fEPOCodeParameter = fEPOCode != null ?
                new ObjectParameter("FEPOCode", fEPOCode) :
                new ObjectParameter("FEPOCode", typeof(string));
    
            var materialTypeParameter = materialType != null ?
                new ObjectParameter("MaterialType", materialType) :
                new ObjectParameter("MaterialType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ERPUpdateStatusFPO", fEPOCodeParameter, materialTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ERRUpdateOrderPrice(string order, Nullable<decimal> newPrice)
        {
            var orderParameter = order != null ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(string));
    
            var newPriceParameter = newPrice.HasValue ?
                new ObjectParameter("NewPrice", newPrice) :
                new ObjectParameter("NewPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ERRUpdateOrderPrice", orderParameter, newPriceParameter);
        }
    
        public virtual ObjectResult<sp_GetOrderRequest_Result> sp_GetOrderRequest(string orderCode, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOrderRequest_Result>("sp_GetOrderRequest", orderCodeParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetDataForSAPivotGrid_Result> sp_GetDataForSAPivotGrid(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDataForSAPivotGrid_Result>("sp_GetDataForSAPivotGrid", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_GetDetailSADynamicReport_Result> sp_GetDetailSADynamicReport(string dateFrom, string dateTo, Nullable<int> type, string itemDetailID)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var itemDetailIDParameter = itemDetailID != null ?
                new ObjectParameter("ItemDetailID", itemDetailID) :
                new ObjectParameter("ItemDetailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDetailSADynamicReport_Result>("sp_GetDetailSADynamicReport", dateFromParameter, dateToParameter, typeParameter, itemDetailIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDataForSAPivotGridUseForChart_Result> sp_GetDataForSAPivotGridUseForChart(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDataForSAPivotGridUseForChart_Result>("sp_GetDataForSAPivotGridUseForChart", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_CheckLimitForDonative_Result> sp_CheckLimitForDonative(string reasonID, Nullable<int> userID, Nullable<System.DateTime> createDate, Nullable<int> quantity)
        {
            var reasonIDParameter = reasonID != null ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckLimitForDonative_Result>("sp_CheckLimitForDonative", reasonIDParameter, userIDParameter, createDateParameter, quantityParameter);
        }
    
        public virtual ObjectResult<sp_GetSARequestList_Result> sp_GetSARequestList(string orderCode, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSARequestList_Result>("sp_GetSARequestList", orderCodeParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_CheckItemQuantityForSecurity_Result> sp_CheckItemQuantityForSecurity(string exportItemID, string operationType, string itemDetailID, Nullable<decimal> quantity)
        {
            var exportItemIDParameter = exportItemID != null ?
                new ObjectParameter("ExportItemID", exportItemID) :
                new ObjectParameter("ExportItemID", typeof(string));
    
            var operationTypeParameter = operationType != null ?
                new ObjectParameter("OperationType", operationType) :
                new ObjectParameter("OperationType", typeof(string));
    
            var itemDetailIDParameter = itemDetailID != null ?
                new ObjectParameter("ItemDetailID", itemDetailID) :
                new ObjectParameter("ItemDetailID", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckItemQuantityForSecurity_Result>("sp_CheckItemQuantityForSecurity", exportItemIDParameter, operationTypeParameter, itemDetailIDParameter, quantityParameter);
        }
    
        public virtual ObjectResult<sp_GetDynamicQueryPackingManifest_Result> sp_GetDynamicQueryPackingManifest(string customerPO, string pONumber, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> orderState)
        {
            var customerPOParameter = customerPO != null ?
                new ObjectParameter("CustomerPO", customerPO) :
                new ObjectParameter("CustomerPO", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var orderStateParameter = orderState.HasValue ?
                new ObjectParameter("OrderState", orderState) :
                new ObjectParameter("OrderState", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDynamicQueryPackingManifest_Result>("sp_GetDynamicQueryPackingManifest", customerPOParameter, pONumberParameter, dateFromParameter, dateToParameter, orderStateParameter);
        }
    
        public virtual ObjectResult<sp_GetApprover_Result> sp_GetApprover(string documentTypeName, Nullable<int> costCenterCode, string nodeID, string orderCode, Nullable<int> userID)
        {
            var documentTypeNameParameter = documentTypeName != null ?
                new ObjectParameter("DocumentTypeName", documentTypeName) :
                new ObjectParameter("DocumentTypeName", typeof(string));
    
            var costCenterCodeParameter = costCenterCode.HasValue ?
                new ObjectParameter("CostCenterCode", costCenterCode) :
                new ObjectParameter("CostCenterCode", typeof(int));
    
            var nodeIDParameter = nodeID != null ?
                new ObjectParameter("NodeID", nodeID) :
                new ObjectParameter("NodeID", typeof(string));
    
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetApprover_Result>("sp_GetApprover", documentTypeNameParameter, costCenterCodeParameter, nodeIDParameter, orderCodeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetWHExportOrderByMainLine_Result> sp_GetWHExportOrderByMainLine(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWHExportOrderByMainLine_Result>("sp_GetWHExportOrderByMainLine", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_GetReferrenceDocumentList_Result> sp_GetReferrenceDocumentList(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReferrenceDocumentList_Result>("sp_GetReferrenceDocumentList", userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDataForDashBoard_Result> sp_GetDataForDashBoard(string shelfID)
        {
            var shelfIDParameter = shelfID != null ?
                new ObjectParameter("ShelfID", shelfID) :
                new ObjectParameter("ShelfID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDataForDashBoard_Result>("sp_GetDataForDashBoard", shelfIDParameter);
        }
    
        public virtual ObjectResult<sp_GetApproveDocumentForAdmin_Result> sp_GetApproveDocumentForAdmin(string userID, Nullable<int> status)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetApproveDocumentForAdmin_Result>("sp_GetApproveDocumentForAdmin", userIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<sp_GetTotalShelfDataReport_Result> sp_GetTotalShelfDataReport(string customerPO, Nullable<int> serialNo)
        {
            var customerPOParameter = customerPO != null ?
                new ObjectParameter("CustomerPO", customerPO) :
                new ObjectParameter("CustomerPO", typeof(string));
    
            var serialNoParameter = serialNo.HasValue ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTotalShelfDataReport_Result>("sp_GetTotalShelfDataReport", customerPOParameter, serialNoParameter);
        }
    
        public virtual ObjectResult<sp_GetSADynamicReport_Result> sp_GetSADynamicReport(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSADynamicReport_Result>("sp_GetSADynamicReport", dateFromParameter, dateToParameter);
        }
    
        public virtual int sp_WIPAccount_GetCostComparingSpan_ByCloseDate(string beginDate, string endDate, string customerID, string fepoCode, Nullable<int> isExcel)
        {
            var beginDateParameter = beginDate != null ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var fepoCodeParameter = fepoCode != null ?
                new ObjectParameter("FepoCode", fepoCode) :
                new ObjectParameter("FepoCode", typeof(string));
    
            var isExcelParameter = isExcel.HasValue ?
                new ObjectParameter("IsExcel", isExcel) :
                new ObjectParameter("IsExcel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WIPAccount_GetCostComparingSpan_ByCloseDate", beginDateParameter, endDateParameter, customerIDParameter, fepoCodeParameter, isExcelParameter);
        }
    
        public virtual ObjectResult<sp_GetDataForMultiSign_Result> sp_GetDataForMultiSign(string orderCode)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDataForMultiSign_Result>("sp_GetDataForMultiSign", orderCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetApproveDocumentForGADepartment_Result> sp_GetApproveDocumentForGADepartment(Nullable<int> status, Nullable<int> userID)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetApproveDocumentForGADepartment_Result>("sp_GetApproveDocumentForGADepartment", statusParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetApproveDocumentForSADepartment_Result> sp_GetApproveDocumentForSADepartment(Nullable<int> status)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetApproveDocumentForSADepartment_Result>("sp_GetApproveDocumentForSADepartment", statusParameter);
        }
    
        public virtual ObjectResult<sp_GAAdjustmentChecking_Result> sp_GAAdjustmentChecking(Nullable<decimal> quantity, Nullable<int> costCenterCode, string itemDetailID)
        {
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var costCenterCodeParameter = costCenterCode.HasValue ?
                new ObjectParameter("CostCenterCode", costCenterCode) :
                new ObjectParameter("CostCenterCode", typeof(int));
    
            var itemDetailIDParameter = itemDetailID != null ?
                new ObjectParameter("ItemDetailID", itemDetailID) :
                new ObjectParameter("ItemDetailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GAAdjustmentChecking_Result>("sp_GAAdjustmentChecking", quantityParameter, costCenterCodeParameter, itemDetailIDParameter);
        }
    
        public virtual ObjectResult<sp_GetGASummaryReport_Result> sp_GetGASummaryReport(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGASummaryReport_Result>("sp_GetGASummaryReport", beginDateParameter, endDateParameter);
        }
    
        public virtual int sp_CopyGAAdjustment(Nullable<System.DateTime> toMonth, Nullable<System.DateTime> createTime, Nullable<System.DateTime> fromMonth)
        {
            var toMonthParameter = toMonth.HasValue ?
                new ObjectParameter("ToMonth", toMonth) :
                new ObjectParameter("ToMonth", typeof(System.DateTime));
    
            var createTimeParameter = createTime.HasValue ?
                new ObjectParameter("CreateTime", createTime) :
                new ObjectParameter("CreateTime", typeof(System.DateTime));
    
            var fromMonthParameter = fromMonth.HasValue ?
                new ObjectParameter("FromMonth", fromMonth) :
                new ObjectParameter("FromMonth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CopyGAAdjustment", toMonthParameter, createTimeParameter, fromMonthParameter);
        }
    
        public virtual ObjectResult<string> sp_GetReferencePersonList(string orderCode)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetReferencePersonList", orderCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetGARequestList_Result> sp_GetGARequestList(string orderCode, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGARequestList_Result>("sp_GetGARequestList", orderCodeParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual int sp_UpdateERPAllowCancel(string orderCode)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateERPAllowCancel", orderCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetGAPushDataList_Result> sp_GetGAPushDataList(string orderCode, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<int> isStatus)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var isStatusParameter = isStatus.HasValue ?
                new ObjectParameter("isStatus", isStatus) :
                new ObjectParameter("isStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetGAPushDataList_Result>("sp_GetGAPushDataList", orderCodeParameter, beginDateParameter, endDateParameter, isStatusParameter);
        }
    
        public virtual int sp_PushGADataToEland(string orderCodeList, string monthCondition, Nullable<int> userID, ObjectParameter msg)
        {
            var orderCodeListParameter = orderCodeList != null ?
                new ObjectParameter("OrderCodeList", orderCodeList) :
                new ObjectParameter("OrderCodeList", typeof(string));
    
            var monthConditionParameter = monthCondition != null ?
                new ObjectParameter("MonthCondition", monthCondition) :
                new ObjectParameter("MonthCondition", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PushGADataToEland", orderCodeListParameter, monthConditionParameter, userIDParameter, msg);
        }
    
        public virtual int sp_SAAudit(Nullable<int> isStatus, ObjectParameter msg)
        {
            var isStatusParameter = isStatus.HasValue ?
                new ObjectParameter("isStatus", isStatus) :
                new ObjectParameter("isStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SAAudit", isStatusParameter, msg);
        }
    
        public virtual int sp_ERPUpdateStatus(string orderCode, string commentNew, Nullable<int> status, ObjectParameter result)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            var commentNewParameter = commentNew != null ?
                new ObjectParameter("CommentNew", commentNew) :
                new ObjectParameter("CommentNew", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ERPUpdateStatus", orderCodeParameter, commentNewParameter, statusParameter, result);
        }
    
        public virtual ObjectResult<sp_GetERPHistory_Result> sp_GetERPHistory(string userID, string orderCode, string fEPOCode, string status)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            var fEPOCodeParameter = fEPOCode != null ?
                new ObjectParameter("FEPOCode", fEPOCode) :
                new ObjectParameter("FEPOCode", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetERPHistory_Result>("sp_GetERPHistory", userIDParameter, orderCodeParameter, fEPOCodeParameter, statusParameter);
        }
    
        public virtual ObjectResult<sp_GetOpenOrderDoc_Result> sp_GetOpenOrderDoc(string fEPO, string fromDate, string toDate)
        {
            var fEPOParameter = fEPO != null ?
                new ObjectParameter("FEPO", fEPO) :
                new ObjectParameter("FEPO", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOpenOrderDoc_Result>("sp_GetOpenOrderDoc", fEPOParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_QueryPurchaseReport_Result> sp_QueryPurchaseReport(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_QueryPurchaseReport_Result>("sp_QueryPurchaseReport", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_CheckCancelConfirmMNStockIn_Result> sp_CheckCancelConfirmMNStockIn(string orderCode)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckCancelConfirmMNStockIn_Result>("sp_CheckCancelConfirmMNStockIn", orderCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetMaintenanceDetailsQuantity_Result> sp_GetMaintenanceDetailsQuantity(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMaintenanceDetailsQuantity_Result>("sp_GetMaintenanceDetailsQuantity", iDParameter);
        }
    
        public virtual ObjectResult<sp_GetMNDynamicInventory_Result> sp_GetMNDynamicInventory(string dateFrom, string dateTo, string documentType)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMNDynamicInventory_Result>("sp_GetMNDynamicInventory", dateFromParameter, dateToParameter, documentTypeParameter);
        }
    
        public virtual ObjectResult<sp_GetMNRequestList_Result> sp_GetMNRequestList(string orderCode, string beginDate, string endDate, string documentType)
        {
            var orderCodeParameter = orderCode != null ?
                new ObjectParameter("OrderCode", orderCode) :
                new ObjectParameter("OrderCode", typeof(string));
    
            var beginDateParameter = beginDate != null ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMNRequestList_Result>("sp_GetMNRequestList", orderCodeParameter, beginDateParameter, endDateParameter, documentTypeParameter);
        }
    
        public virtual ObjectResult<sp_GetMNSummaryReport_Result> sp_GetMNSummaryReport(string beginDate, string endDate, string documentType)
        {
            var beginDateParameter = beginDate != null ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMNSummaryReport_Result>("sp_GetMNSummaryReport", beginDateParameter, endDateParameter, documentTypeParameter);
        }
    
        public virtual ObjectResult<sp_GetDocumentApprove_Result> sp_GetDocumentApprove(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDocumentApprove_Result>("sp_GetDocumentApprove", userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetDocumentSigned_Result> sp_GetDocumentSigned(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDocumentSigned_Result>("sp_GetDocumentSigned", userIDParameter);
        }
    
        public virtual int sp_PushMNOrderAndGenerateStockOut(string mNID, Nullable<int> technician, ObjectParameter errorMsg)
        {
            var mNIDParameter = mNID != null ?
                new ObjectParameter("MNID", mNID) :
                new ObjectParameter("MNID", typeof(string));
    
            var technicianParameter = technician.HasValue ?
                new ObjectParameter("Technician", technician) :
                new ObjectParameter("Technician", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PushMNOrderAndGenerateStockOut", mNIDParameter, technicianParameter, errorMsg);
        }
    
        public virtual ObjectResult<sp_GetItemData_Result> sp_GetItemData(string customerPO, string itemNo, string invoiceNo)
        {
            var customerPOParameter = customerPO != null ?
                new ObjectParameter("CustomerPO", customerPO) :
                new ObjectParameter("CustomerPO", typeof(string));
    
            var itemNoParameter = itemNo != null ?
                new ObjectParameter("ItemNo", itemNo) :
                new ObjectParameter("ItemNo", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetItemData_Result>("sp_GetItemData", customerPOParameter, itemNoParameter, invoiceNoParameter);
        }
    
        public virtual ObjectResult<sp_GetItemDetailName_Result> sp_GetItemDetailName(string requestMain, string itemID)
        {
            var requestMainParameter = requestMain != null ?
                new ObjectParameter("RequestMain", requestMain) :
                new ObjectParameter("RequestMain", typeof(string));
    
            var itemIDParameter = itemID != null ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetItemDetailName_Result>("sp_GetItemDetailName", requestMainParameter, itemIDParameter);
        }
    
        public virtual ObjectResult<sp_GetMaintenanceApproveDocument_Result> sp_GetMaintenanceApproveDocument(Nullable<int> status, Nullable<int> userID, string docType)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var docTypeParameter = docType != null ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMaintenanceApproveDocument_Result>("sp_GetMaintenanceApproveDocument", statusParameter, userIDParameter, docTypeParameter);
        }
    
        public virtual ObjectResult<sp_CheckMaintenanceInventory_Result> sp_CheckMaintenanceInventory(string docType)
        {
            var docTypeParameter = docType != null ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckMaintenanceInventory_Result>("sp_CheckMaintenanceInventory", docTypeParameter);
        }
    }
}
