@{
    ViewBag.Title = "ImportDataFromExcel";
    Layout = "~/Views/Shared/_FEAContentLayout.cshtml";
}

@model FEA_BusinessLogic.PackingManifest

<script type="text/javascript">
    var ItemCount = 0;
    var SkipValidate = false;
    $(function () {
        // DisplayItem('divBaseInfo', false);
        $("#frmMainform").submit(function () {
            if (ItemCount == 0 && SkipValidate == false) {
                alert('@Html.Raw(Resources.Resource.msgInputDDeviceReqItem)');
                return false;
            }
        });

        @if(Model.STATUS != (int) FEA_BusinessLogic.WarehouseArea.PackingManifestManager.OrderStatus.New)
        {
             <text>
                var dataExcelFile = $("#gvwarehouse_data_grid_DXMainTable");
                if(dataExcelFile.length > 0)
                    setTimeout(ContentFunction.DisplayItem('divDetailInfo', 'iIcon1', false), 2000);
        </text>
        }
    });

    // <![CDATA[
    function OnOrderCodeValidation(s, e) {
        if (e.value == null || e.value == "") {
            e.isValid = false;
            e.errorText = "@Html.Raw(string.Format(Resources.Resource.msgInputRequite, Resources.Resource.OrderCode))";
        }
    }

    @*function OnPONumberValidation(s, e) {
        if (e.value == null || e.value == "") {
            e.isValid = false;
            e.errorText = "@Html.Raw(string.Format(Resources.Resource.msgInputRequite, "PO Number"))";
        }
    }*@

    function OnCustomerPOValidation(s, e) {
        if (e.value == null || e.value == "") {
            e.isValid = false;
            e.errorText = "@Html.Raw(string.Format(Resources.Resource.msgInputRequite, Resources.Resource.CustomerPO))";
        }
    }


    function OnSetTotalRow(s, e) {
        ItemCount = s.cpVisibleRowCount;
    }


    function DoCancelConform(s, e) {
        var x = confirm('@Html.Raw(Resources.Resource.msgConfirmMessage)');
        if (x) SkipValidate = true;
        e.processOnServer = x;
    }


    function OnGridViewSelectionChanged(s, e) {
        s.GetSelectedFieldValues("ID;PackingManifest.OrderCode", GetSelectedFieldValuesCallback);
    }
    function GetSelectedFieldValuesCallback(selectedValues) {

        try {
            selObj = new Array();
            var sData = "";
            if (selectedValues.length != 0)
            {
                for (i = 0; i < selectedValues.length; i++) {
                    var obj = new Object();

                    obj.Key = selectedValues[i][0];
                    obj.Value = selectedValues[i][1];
                    selObj[selObj.length] = obj;

                    if (sData.length == 0)
                        sData += "\"" + selectedValues[i][0] + "\"" + ":" + "\"" + selectedValues[i][1] + "\"";
                    else
                        sData += "," + "\"" + selectedValues[i][0] + "\"" + ":" + "\"" + selectedValues[i][1] + "\"";
                }

                sData = "{" + sData + "}";
            }
            $("#mydata").val(sData);
        } finally {
        }
    }
</script>

<div class="panel-body">
    @using (Html.BeginForm("ImportDataFromExcel", "WarehouseArea", new { Id = Model.ID }, FormMethod.Post, new { id = "frmMainform", enctype = "multipart/form-data" }))
    {
        bool _showSaveButton = false, _showUpdateButton = false, _showConfirmButton = false, _showCancelConfirmButton = false, _readonlycontrols = false;
        switch (Model.STATUS.Value)
        {
            case (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.OrderStatus.New:
                _showSaveButton = true;
                break;
            case (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.OrderStatus.SAVED:
                _showUpdateButton = true;
                break;

            default:
                break;
        }
        
        
        if(Model.STATUS != (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.OrderStatus.New)
        { 
             switch (Model.isConfirm.Value)
             {
                 case (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.ConfirmStatus.CONFIRMED:
                     _showCancelConfirmButton = true;
                     _showUpdateButton = false;
                     _readonlycontrols = true;

                     break;
                 case (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.ConfirmStatus.UNCONFIRM:
                     _showConfirmButton = true;
                     _showUpdateButton = true;
                     _readonlycontrols = (FEA_ITS_Site.Helper.UserLoginInfo.UserId == Model.CreatorID) ? false : true;
                     break;
                 default:
                     _readonlycontrols = (FEA_ITS_Site.Helper.UserLoginInfo.UserId == Model.CreatorID) ? false : true;
                     break;
             }
        }
        
        //if (FEA_ITS_Site.Helper.UserLoginInfo.UserId != Model.CreatorID) { _readonlycontrols = true; }

        @Html.Hidden("mydata");
        @Html.HiddenFor(m => Model.STATUS)
        @Html.HiddenFor(m => Model.isConfirm)
        @Html.HiddenFor(m => Model.ID)
        @Html.HiddenFor(m=> Model.CreatorID)
        @Html.HiddenFor(m=> Model.CustomerCode)
        
        if (ViewBag.EditStatus != null)
        {
            <div class="row">
                <div class="col-md-12">

                    @if (FEA_ITS_Site.Models.Helper.EditItemStatus.success == (FEA_ITS_Site.Models.Helper.EditItemStatus)ViewBag.EditStatus)
                    {
                        <div id="editError" class="alert-small alert-info" style="margin-top:10px;">
                            @Html.Raw(ViewBag.EditInfo)
                        </div>
                    }
                    else if (FEA_ITS_Site.Models.Helper.EditItemStatus.failed == (FEA_ITS_Site.Models.Helper.EditItemStatus)ViewBag.EditStatus)
                    {
                        <div id="editError" class="alert-small alert-danger" style="margin-top:10px;">
                            @Html.Raw(ViewBag.EditInfo)
                        </div>
                    }
                </div>
            </div>
        }
                
        <div class="row">
            <div class="col-lg-7 fLeft">
                @Html.DevExpress().ValidationSummary(setting => { setting.Name = "validationSum"; }).GetHtml()
            </div>
        </div>
        
        <div class="row buttonbar">
            <div class="col-lg-7">
                @Html.DevExpress().Button(
                settings =>
                {
                    settings.Name = "btnRequest";
                    settings.Width = 90;
                    settings.Text = Resources.Resource.Refresh;
                    settings.ClientSideEvents.Click = "function(){location.reload();}";
                    settings.CausesValidation = false;
                }).GetHtml()

                @Html.DevExpress().Button(
                settings =>
                {
                    settings.Name = "btnSave";
                    settings.Width = 90;
                    settings.Text = Resources.Resource.Save;
                    settings.UseSubmitBehavior = true;
                    settings.ClientVisible = _showSaveButton;

                }).GetHtml()

                @Html.DevExpress().Button(
                settings =>
                {
                    settings.Name = "btnUpdate";
                    settings.Width = 90;
                    settings.Text = Resources.Resource.Update;
                    settings.UseSubmitBehavior = true;
                    settings.ClientVisible = _showUpdateButton;

                }).GetHtml()
                @Html.DevExpress().Button(
                settings =>
                {
                    settings.Name = "btnConfirm";
                    settings.Width = 90;
                    settings.Text = Resources.Resource.Confirm;
                    settings.UseSubmitBehavior = true;
                    settings.ClientVisible = _showConfirmButton;
                }).GetHtml()
                @Html.DevExpress().Button(
                settings =>
                {
                    settings.Name = "btnCancelConfirm";
                    settings.Width = 90;
                    settings.Text = Resources.Resource.CancelConfirm;
                    settings.UseSubmitBehavior = true;
                    settings.ClientVisible = _showCancelConfirmButton;
                    settings.ClientSideEvents.Click = "function(s, e){DoCancelConform(s, e);}";
                }).GetHtml()


            </div>
        </div>

        <!-- line-->
        <hr />
        <!--Line-->
        <!-- control group 3 column-->
        <a href="javascript:ContentFunction.DisplayItem('divBaseInfo','iIcon',null);"> <h4 class="group-title">
            <i class="icon-circle-arrow-down teal" id="iIcon">
            </i> @Resources.Resource.BaseInfomation</h4></a>
        <div id="divBaseInfo">
            <div class="row row-detail">
                <div class="col-md-3">
                    <div class="form-group">
                        <label class="control-label">
                            @Resources.Resource.OrderCode:
                        </label>
                        @Html.DevExpress().TextBoxFor(m => m.OrderCode,
                            settings =>
                            {
                                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                settings.Properties.NullText = "";
                                settings.ControlStyle.CssClass = "textBoxStyle";

                                settings.ReadOnly = true;
                               
                                settings.Properties.ClientSideEvents.Validation = "OnOrderCodeValidation";
                                settings.ShowModelErrors = true;
                                settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                                settings.Properties.ValidationSettings.Display = Display.Dynamic;
                            }
                        ).GetHtml()
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        <label class="control-label">
                            Customer :
                        </label>
                        @Html.DevExpress().TextBox(
                            settings =>
                            {
                                settings.Name = "txtCustomerName";
                                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                settings.Properties.NullText = "";
                                settings.ControlStyle.CssClass = "textBoxStyle";
                                settings.Text = WarehouseArea.ExcelReader.CustomerTypeCode.CustomerTypeCodeList()[@Model.CustomerCode];
                                settings.ReadOnly = true;
                                settings.Style.Add("color", "red");
                                settings.Properties.ClientSideEvents.Validation = "OnOrderCodeValidation";
                                settings.ShowModelErrors = true;
                                settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                                settings.Properties.ValidationSettings.Display = Display.Dynamic;
                            }
                        ).GetHtml()
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        <label class="control-label">
                            PO Number:
                        </label>
                        @Html.DevExpress().TextBoxFor(m => m.PONo,
                            settings =>
                            {
                                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                settings.ControlStyle.CssClass = "textBoxStyle";

                                settings.ReadOnly = _readonlycontrols;

                               // settings.Properties.ClientSideEvents.Validation = "OnPONumberValidation";
                               // settings.ShowModelErrors = true;
                               // settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                               // settings.Properties.ValidationSettings.Display = Display.Dynamic;
                            }
                        ).GetHtml()
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label class="control-label">
                            @Resources.Resource.CustomerPO:
                        </label>
                        @Html.DevExpress().TextBoxFor(m => m.CustomerPO,
                            settings =>
                            {
                                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                settings.Properties.NullText = "";
                                settings.ControlStyle.CssClass = "textBoxStyle";

                                settings.ReadOnly = _readonlycontrols;

                                settings.Properties.ClientSideEvents.Validation = "OnCustomerPOValidation";
                                settings.ShowModelErrors = true;
                                settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                                settings.Properties.ValidationSettings.Display = Display.Dynamic;

                            }
                        ).GetHtml()
                    </div>
                </div>

                <div class="col-md-2">
                    <div class="form-group">
                        <label class="control-label">
                            Invoice No.:
                        </label>
                        @Html.DevExpress().TextBoxFor(m => m.InvoiceNo,
                            settings =>
                            {
                                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                settings.ControlStyle.CssClass = "textBoxStyle";

                                settings.ReadOnly = _readonlycontrols;
                            }
                        ).GetHtml()
                    </div>
                </div>

            </div>

            <div class="row row-detail">
                <div class="col-md-3">
                    <div class="form-group">
                        <label class="control-label" style="display:block; width:260px">
                            Select File:
                        </label>

                        @*<input type="file" name="file" class="fLeft" style="display:inline !important; width:300px" readonly="@_readonlycontrols"   />*@

                        @Html.DevExpress().UploadControl(settings =>
                        {
                            settings.Name = "UploadControl";
                            settings.ShowAddRemoveButtons = false;
                            settings.ShowProgressPanel = true;
                            settings.ShowClearFileSelectionButton = false;
                            settings.ShowUploadButton = false;
                            settings.Width = System.Web.UI.WebControls.Unit.Percentage(60);
                        }).GetHtml()

                        <div style="margin-top:-25px;float:right">
                            @Html.DevExpress().Button(
                            settings =>
                            {
                                settings.Name = "btnLoadExcel";
                                settings.Width = 90;
                                settings.Text = Resources.Resource.Upload;
                                settings.ControlStyle.CssClass = "fRight";
                                settings.UseSubmitBehavior = true;
                                settings.CausesValidation = false;
                                settings.ClientSideEvents.Click = "function(){SkipValidate = true;}";

                              //  settings.Enabled = !_readonlycontrols;
                            }).GetHtml()
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @*<label class="control-label">
                            @Resources.Resource.IsCoordinate:
                        </label>*@

                        @Html.DevExpress().CheckBox(
                            settings =>
                            {
                                settings.Name = "isCoordinate";
                                settings.Text = Resources.Resource.IsCoordinate;
                                settings.Properties.ValueType = typeof(int);
                                settings.Checked = (Model.isCoordinate == 1) ? true : false;
                                settings.Enabled = !_readonlycontrols;
                                settings.Style.Add("color", "red");
                            }
                            ).GetHtml()
                        
                    </div>
                </div>
            </div>
        </div>

        <!-- end control group-->


    <a href="javascript:ContentFunction.DisplayItem('divDetailInfo','iIcon1',null);"><h4 class="group-title"><i class="icon-list teal " id="iIcon1"></i> Detail of Excel file</h4></a>

    <div class="row" id="divDetailInfo">
        <div class="col-md-12">
            <div class="form-group">
                <div class="vertComponentContainer">
                    @{Html.RenderAction("LoadWarehouseDetail", "WarehouseArea", new { CustomerCodeType = @Model.CustomerCode });}
                </div>
            </div>
        </div>
    </div>

        if (Model.STATUS != (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.OrderStatus.New)
        {
            
                <a href="javascript:ContentFunction.DisplayItem('divPackingManifestDetailInfo','iIcon2',null);"><h4 class="group-title"><i class="icon-list teal " id="iIcon2"></i> Total of data</h4></a>
        
                <div class="row buttonbar">
                    <div class="col-lg-7">
                        @Html.DevExpress().Button(
                        settings =>
                        {
                            settings.Name = "btnRemoveBarcode";
                            settings.Width = 90;
                            settings.Text = "Remove Barcode";
                            settings.UseSubmitBehavior = true;
                            settings.ClientSideEvents.Click = "function(s, e){DoCancelConform(s, e);}";

                        }).GetHtml()
                    </div>
            
                </div>
                 <br />   
        
                    <div class="row" id="divPackingManifestDetailInfo">
                        <div class="col-md-12">
                            <div class="form-group">
                                <div class="vertComponentContainer">
                                    @{Html.RenderAction("LoadPackingManifestDetailDetail", "WarehouseArea", new { PackingManifestID = Model.ID });}
                                </div>
                            </div>
                        </div>
                    </div>
        }

    }
</div>
