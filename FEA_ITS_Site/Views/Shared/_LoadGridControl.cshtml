@using System.Web.UI.WebControls
@using FEA_ITS_Site.Helper;
@using FEA_ITS_Site;
@using DevExpress.Web.Mvc;
@using DevExpress.XtraPivotGrid;
@model Object
@{

    string GridName = string.Empty;
    var grid = Html.DevExpress().GridView(settings => { settings.Name = "partial"; });
    if (ViewBag.GridName != "" || ViewBag.GridName != null)
    {
        GridName = ViewBag.GridName;
    }
    else
    {
        GridName = "";
    }
    switch (GridName)
    {
        case "QueryDivertPO":
            Object[] Result = (Object[])Model;

            var GridView = Html.DevExpress().GridView(settings =>
              {
                  settings.Name = "gvDiverPO";
                  settings.Width = Unit.Percentage(100);
                  settings.KeyFieldName = "FEPOCode";
                  settings.SettingsBehavior.AllowSort = false;
              });

            var GridView2 = Html.DevExpress().GridView(settings =>
            {
                settings.Name = "gvDiverPODetail";
                settings.Width = Unit.Percentage(100);
                settings.KeyFieldName = "FEPOCode";
                settings.SettingsBehavior.AllowSort = false;
            });
            if (Result != null)
            {
                GridView.Bind(Result[0]).GetHtml();
                @Html.Raw("<br \\>");
                                    GridView2.Bind(Result[1]).GetHtml();
            }
            else
            {
                GridView.GetHtml();
                @Html.Raw("<br \\>");
                                    GridView2.GetHtml();
            }
            break;
        case "QuerySignFlow":
            grid = Html.DevExpress().GridView(settings =>
            {
                settings.Name = "gvSignFlow";
                settings.Width = Unit.Percentage(100);
                settings.KeyFieldName = "Sequence";
                settings.SettingsBehavior.AllowSort = false;
                settings.SettingsPager.AlwaysShowPager = false;
                settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
            });
            grid.Bind(Model).GetHtml();
            break;
        case "PurchaseReport":
            grid = Html.DevExpress().GridView(FEA_ITS_Site.Controllers.ELandController.CreateExportGridViewSettings());
            grid.Bind(Model).GetHtml();
            break;

        case "WaitingDocument":
            grid = Html.DevExpress().GridView(settings =>
            {
                settings.Name = "gvWaitingDocument";
                settings.KeyFieldName = "MainID";
                settings.CallbackRouteValues = new { Controller = "WaitingArea", Action = "CallbackResult" };
                settings.Width = Unit.Percentage(100);
                settings.SettingsBehavior.AllowSort = true;
                settings.SettingsPager.AlwaysShowPager = false;
                settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                settings.Settings.ShowFilterRow = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.SettingsBehavior.AllowFocusedRow = true;

                settings.CommandColumn.Visible = true;
                settings.CommandColumn.Width = Unit.Percentage(5);
                settings.CommandColumn.ShowSelectCheckbox = true;
                settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.AllPages;
                settings.SettingsBehavior.AllowSelectSingleRowOnly = false;
                settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                settings.Columns.Add(column =>
                    {
                        column.FieldName = "MainID";
                        column.Caption = "MainID";
                        column.SetColVisible(false);
                    });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "NodeID";
                    column.Caption = "NodeID";
                    column.SetColVisible(false);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "MainDetailID";
                    column.Caption = "MainDetailID";
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "DelegateID";
                    column.Caption = "DelegateID";
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "DeviceRegistrationID";
                    column.Caption = "DeviceRegistrationID";
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "OrderCode";
                    column.Caption = @Resources.Resource.OrderCode;
                    column.SetColVisible(true);
                    column.Width = Unit.Percentage(12);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "DocumentTypeName";
                    column.Caption = @Resources.Resource.DocumentTypeName;
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Description";
                    column.Caption = @Resources.Resource.DocumentTypeName;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Sender";
                    column.Caption = @Resources.Resource.Sender;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "PostUserID";
                    //column.Caption = @Resources.Resource.Sender;
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Approver";
                    column.Caption = @Resources.Resource.Approver;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "CheckUserID";
                    //column.Caption = @Resources.Resource.Approver;
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Creator";
                    column.Caption = @Resources.Resource.Creator;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "DelegateUserID";
                    //column.Caption = @Resources.Resource.Creator;
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "CreateDate";
                    column.Caption = @Resources.Resource.CreateDate;
                    column.SetColVisible(true);
                    column.ColumnType = MVCxGridViewColumnType.DateEdit;


                    DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                    dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                    dateEdit.DisplayFormatInEditMode = true;
                    dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "isFinished";
                    column.Caption = @Resources.Resource.Status;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "SignType";
                    column.Caption = @Resources.Resource.SignType;
                    column.SetColVisible(true);
                });

                settings.Columns.Add(column =>
                {
                    column.Caption = "#";
                    column.SetDataItemTemplateContent(c =>
                    {
                        string DocumentTypeName = DataBinder.Eval(c.DataItem, "DocumentTypeName").ToString();
                        string Link = string.Empty;
                        string NodeID = DataBinder.Eval(c.DataItem, "NodeID").ToString();
                        string MainDetailID = DataBinder.Eval(c.DataItem, "MainDetailID").ToString();
                        string MainID = DataBinder.Eval(c.DataItem, "MainID").ToString();
                        string TypeUser = string.Empty;
                        string OrderCode = DataBinder.Eval(c.DataItem, "OrderCode").ToString();     // ordeCode of main table contain OrderCode
                        string CheckUserID = DataBinder.Eval(c.DataItem, "CheckUserID").ToString();
                        string DelegateID = DataBinder.Eval(c.DataItem, "DelegateID").ToString();
                        string DelegateUserID = DataBinder.Eval(c.DataItem, "DelegateUserID").ToString();
                        int _status = 0;
                        switch (DocumentTypeName)
                        {
                            case "DEVICEREGISTRATION":
                                Link = "/DeviceRegistration/Index?DeviceRegID=";
                                _status = int.Parse(new FEA_BusinessLogic.DeviceRegistrationManager().GetItem(OrderCode).Status.ToString());
                                break;
                            case "HARDWAREREQUIREMENT":
                                Link = "/HardwareRequirement/Index?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.HardwareRequirementManager().GetItem(OrderCode).Status.ToString());
                                break;
                            case "SECURITYAREA":

                                int _Type = int.Parse(new FEA_SABusinessLogic.ExportItemManager().GetItem(OrderCode).OrderType.ToString());
                                _status = int.Parse(new FEA_SABusinessLogic.ExportItemManager().GetItem(OrderCode).Status.ToString());
                                Link = "/SA/Application?Type=" + _Type + "&ID=";
                                break;
                            case "GENERALAFFAIR":
                                Link = "/GA/Index?ID=";
                                _status = int.Parse(new FEA_GABusinessLogic.GAItemManager().GetItem(OrderCode).Status.ToString());
                                break;
                            //Added by Tony (2017-01-03)
                            case "ACCESSORYOUT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());//tai
                                break;
                            case "FABRICOUT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());//tai
                                break;
                            case "FABRICMOVEOUT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                            case "ACCESSORYMOVEOUT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                            case "FABRICMOVEOUTMULTI":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                            case "ACCESSORYMOVEOUTMULTI":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                           case "FABRICDEVELOPOUT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                           case "ACCESSORYDEVELOPOUT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                           case "DEVELOPPRODUCT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                           case "MAINTENANCE":
                                Link = "/Maintenance/Index?Type=MAINTENANCE&ID=";
                                _status = int.Parse(new FEA_BusinessLogic.Maintenance.MaintenanceManager().GetRequest(OrderCode).Status.ToString());
                                break;
                                
                            default:
                                break;
                        }
                        switch (_status)
                        {
                            case 4: // if the status is reject, the view will show control & button for user
                                TypeUser = "user";
                                break;
                            default:
                                TypeUser = "manager";
                                break;
                        }

                        ViewContext.Writer.Write(
                               "<a href='#responsive' data-toggle='modal' onclick=\"parent.SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + Link + OrderCode + "&NodeID=" + NodeID + "&TypeUser=" + TypeUser + "&MainID=" + MainID + "&MainDetailID=" + MainDetailID + "&CheckUserID=" + CheckUserID + "&DelegateID=" + DelegateID + "&DelegateUserID=" + DelegateUserID + "','Sign Document','true')\">" + @Resources.Resource.Select + "</a>"
                               );
                    });
                    column.VisibleIndex = 0;
                    column.CellStyle.CssClass = "tCenter";
                    column.Width = Unit.Percentage(8);
                    column.SetColVisible(true);
                    column.UnboundType = DevExpress.Data.UnboundColumnType.String;
                    column.EditFormSettings.Visible = DefaultBoolean.False;
                });
            });
            grid.Bind(Model).GetHtml();
            break;

        case "RefferenceList":
            grid = Html.DevExpress().GridView(settings =>
            {
                settings.Name = "gvRefferenceList";
                settings.KeyFieldName = "WFRefferenceID";
                settings.CallbackRouteValues = new { Controller = "WaitingArea", Action = "RefferenceListCallbackResult" };
                settings.Width = Unit.Percentage(100);
                settings.SettingsBehavior.AllowSort = true;
                settings.SettingsPager.AlwaysShowPager = false;
                settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                settings.Settings.ShowFilterRow = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.SettingsBehavior.AllowFocusedRow = true;
                settings.Columns.Add(column =>
                    {
                        column.FieldName = "MainID";
                        column.Caption = "MainID";
                        column.SetColVisible(false);
                    });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "NodeID";
                    column.Caption = "NodeID";
                    column.SetColVisible(false);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "MainDetailID";
                    column.Caption = "MainDetailID";
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "DelegateID";
                    column.Caption = "DelegateID";
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "WFRefferenceID";
                    column.Caption = "WFRefferenceID";
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "OrderCode";
                    column.Caption = @Resources.Resource.OrderCode;
                    column.SetColVisible(true);
                    column.Width = Unit.Percentage(6);
                    column.SetDataItemTemplateContent(c =>
                    {
                        string DocumentTypeName = DataBinder.Eval(c.DataItem, "DocumentTypeName").ToString();
                        string Link = string.Empty;
                        string NodeID = DataBinder.Eval(c.DataItem, "NodeID").ToString();
                        string MainDetailID = DataBinder.Eval(c.DataItem, "MainDetailID").ToString();
                        string MainID = DataBinder.Eval(c.DataItem, "MainID").ToString();
                        string TypeUser = string.Empty;
                        string OrderCode = DataBinder.Eval(c.DataItem, "OrderCode").ToString();     // ordeCode of main table contain OrderCode
                        string CheckUserID = "";
                        string DelegateID = "";
                        string DelegateUserID = "";
                        int _status = 4;
                        switch (DocumentTypeName)
                        {
                            case "DEVICEREGISTRATION":
                                Link = "/DeviceRegistration/Index?DeviceRegID=";
                                break;
                            case "HARDWAREREQUIREMENT":
                                Link = "/HardwareRequirement/Index?ID=";
                                break;
                            case "SECURITYAREA":

                                int _Type = int.Parse(new FEA_SABusinessLogic.ExportItemManager().GetItem(OrderCode).OrderType.ToString());
                                Link = "/SA/Application?Type=" + _Type + "&ID=";
                                break;
                            case "GENERALAFFAIR":
                                Link = "/GA/Index?ID=";
                                _status = int.Parse(new FEA_GABusinessLogic.GAItemManager().GetItem(OrderCode).Status.ToString());
                                break;
                            default:
                                break;
                        }


                        ViewContext.Writer.Write(
                               "<a href='#responsive' data-toggle='modal' onclick=\"parent.SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + Link + OrderCode + "&NodeID=" + NodeID + "&TypeUser=" + "user" + "&MainID=" + MainID + "&MainDetailID=" + MainDetailID + "&CheckUserID=" + CheckUserID + "&DelegateID=" + DelegateID + "&DelegateUserID=" + DelegateUserID + "','Sign Document','false')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                               );
                    });
                    column.VisibleIndex = 0;
                    column.CellStyle.CssClass = "tCenter";
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "DocumentTypeName";
                    column.Caption = @Resources.Resource.DocumentTypeName;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Sender";
                    column.Caption = @Resources.Resource.Sender;
                    column.SetColVisible(true);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Creator";
                    column.Caption = @Resources.Resource.Creator;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "CreateDate";
                    column.Caption = @Resources.Resource.CreateDate;
                    column.SetColVisible(true);
                    column.ColumnType = MVCxGridViewColumnType.DateEdit;


                    DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                    dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                    dateEdit.DisplayFormatInEditMode = true;
                    dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "SignType";
                    column.Caption = @Resources.Resource.SignType;
                    column.SetColVisible(true);
                });

                settings.Columns.Add(column =>
                {
                    column.Caption = "#";
                    column.Index = 0;
                    column.SetDataItemTemplateContent(c =>
                    {
                        string ID = DataBinder.Eval(c.DataItem, "WFRefferenceID").ToString();
                        string MainDetailID = DataBinder.Eval(c.DataItem, "MainDetailID").ToString();
                        string OrderCode = DataBinder.Eval(c.DataItem, "OrderCode").ToString();
                        string Link = "/References/Index?ID=";

                        ViewContext.Writer.Write(
                               "<a href='#responsive' data-toggle='modal' onclick=\"parent.SetModalStyle('50%','','" + FEA_ITS_Site.Helper.Ultilities.Root + Link + ID + "&WFMainDetailID=" + MainDetailID + "&OrderCode=" + OrderCode + "','References','false')\">" + @Resources.Resource.Discussion + "</a>"
                               );
                    });
                    column.VisibleIndex = 0;
                    column.CellStyle.CssClass = "tCenter";
                    column.Width = Unit.Percentage(4);
                    column.SetColVisible(true);
                    column.UnboundType = DevExpress.Data.UnboundColumnType.String;
                    column.EditFormSettings.Visible = DefaultBoolean.False;
                });
            });
            grid.Bind(Model).GetHtml();
            break;

        case "SignedDocument":
            grid = Html.DevExpress().GridView(settings =>
            {
                settings.Name = "gvSignedDocument";
                settings.KeyFieldName = "MainID";
                settings.CallbackRouteValues = new { Controller = "WaitingArea", Action = "DocSignedCallbackResult" };
                settings.Width = Unit.Percentage(100);
                settings.SettingsBehavior.AllowSort = true;
                settings.SettingsPager.AlwaysShowPager = false;
                settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
                settings.Settings.ShowFilterRow = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.SettingsBehavior.AllowFocusedRow = true;
                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                settings.Columns.Add(column =>
                    {
                        column.FieldName = "MainID";
                        column.Caption = "MainID";
                        column.SetColVisible(false);
                    });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "NodeID";
                    column.Caption = "NodeID";
                    column.SetColVisible(false);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "DeviceRegistrationID";
                    column.Caption = "DeviceRegistrationID";
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "OrderCode";
                    column.Caption = @Resources.Resource.OrderCode;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "DocumentTypeName";
                    column.Caption = @Resources.Resource.DocumentTypeName;
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Description";
                    column.Caption = @Resources.Resource.DocumentTypeName;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Creator";
                    column.Caption = @Resources.Resource.Creator;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Department";
                    column.Caption = @Resources.Resource.Department;
                    column.SetColVisible(true);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Approver";
                    column.Caption = @Resources.Resource.Approver;
                    column.SetColVisible(true);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "CreateDate";
                    column.Caption = @Resources.Resource.CreateDate;
                    column.SetColVisible(true);
                    column.ColumnType = MVCxGridViewColumnType.DateEdit;


                    DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                    dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                    dateEdit.DisplayFormatInEditMode = true;
                    dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "isFinished";
                    column.Caption = @Resources.Resource.Status;
                    column.SetColVisible(true);
                    column.SetDataItemTemplateContent(c =>
                    {
                        string text = "";
                        if (Convert.ToInt32(DataBinder.Eval(c.DataItem, "isFinished")) == 0)
                            text = Resources.Resource.STATUS_SENDING;
                        else
                            text = Resources.Resource.STATUS_FINSHED;

                        ViewContext.Writer.Write(
                            string.Format(text)
                        );
                    });

                });
                settings.Columns.Add(column =>
                {
                    column.Caption = "#";
                    column.SetDataItemTemplateContent(c =>
                    {
                        string DocumentTypeName = DataBinder.Eval(c.DataItem, "DocumentTypeName").ToString();
                        string Link = string.Empty;
                        string MainID = DataBinder.Eval(c.DataItem, "MainID").ToString();
                        string OrderCode = DataBinder.Eval(c.DataItem, "OrderCode").ToString();     // ordeCode of main table contain OrderCode
                        int _status = 0;
                        switch (DocumentTypeName)
                        {
                            case "DEVICEREGISTRATION":
                                Link = "/DeviceRegistration/Index?DeviceRegID=";
                                _status = int.Parse(new FEA_BusinessLogic.DeviceRegistrationManager().GetItem(OrderCode).Status.ToString());
                                break;
                            case "HARDWAREREQUIREMENT":
                                Link = "/HardwareRequirement/Index?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.HardwareRequirementManager().GetItem(OrderCode).Status.ToString());
                                break;
                            case "SECURITYAREA":
                                int _Type = int.Parse(new FEA_SABusinessLogic.ExportItemManager().GetItem(OrderCode).OrderType.ToString());
                                _status = int.Parse(new FEA_SABusinessLogic.ExportItemManager().GetItem(OrderCode).Status.ToString());
                                Link = "/SA/Application?Type=" + _Type + "&ID=";
                                break;
                            case "GENERALAFFAIR":
                                Link = "/GA/Index?ID=";
                                _status = int.Parse(new FEA_GABusinessLogic.GAItemManager().GetItem(OrderCode).Status.ToString());
                               //Added by Tony (2017-02-08)
                                 break;
                            case "ACCESSORYOUT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                            case "FABRICOUT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                            case "FABRICMOVEOUT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                            case "ACCESSORYMOVEOUT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                            case "FABRICMOVEOUTMULTI":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                            case "ACCESSORYMOVEOUTMULTI":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;

                           case "FABRICDEVELOPOUT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                            case "ACCESSORYDEVELOPOUT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                            case "DEVELOPPRODUCT":
                                Link = "/ERPDocument/ERPListItemDetailPartial?ID=";
                                _status = int.Parse(new FEA_BusinessLogic.ERP.Order().GetItem(OrderCode).Status.ToString());
                                break;
                            case "MAINTENANCE":
                                Link = "/Maintenance/Index?Type=MAINTENANCE&ID=";
                                _status = int.Parse(new FEA_BusinessLogic.Maintenance.MaintenanceManager().GetRequest(OrderCode).Status.ToString());
                                break;
                            default:
                                break;
                        }

                        ViewContext.Writer.Write(
                               "<a href='#responsive' data-toggle='modal' onclick=\"parent.SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + Link + OrderCode + "&TypeUser=manager_viewsigned','" + Resources.Resource.HistoryApprove + "','false')\">" + @Resources.Resource.Select + "</a>"
                               );
                    });
                    column.VisibleIndex = 0;
                    column.CellStyle.CssClass = "tCenter";
                    column.Width = Unit.Percentage(8);
                    column.SetColVisible(true);
                    column.UnboundType = DevExpress.Data.UnboundColumnType.String;
                    column.EditFormSettings.Visible = DefaultBoolean.False;
                });
            });
            grid.Bind(Model).GetHtml();
            break;
        case "WFHistory":
            grid = Html.DevExpress().GridView(settings =>
           {
               settings.Name = "gvHistory";
               settings.Width = Unit.Percentage(100);
               settings.KeyFieldName = "";
               settings.SettingsBehavior.AllowSort = false;
               settings.SettingsPager.AlwaysShowPager = false;
               settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;

               settings.Columns.Add(column =>
               {
                   column.FieldName = "OrderCode";
                   column.Caption = @Resources.Resource.OrderCode;
                   column.SetColVisible(true);
               });
               settings.Columns.Add(column =>
               {
                   column.FieldName = "Sender";
                   column.Caption = @Resources.Resource.Sender;
                   column.SetColVisible(true);
               });
               settings.Columns.Add(column =>
               {
                   column.FieldName = "Approver";
                   column.Caption = @Resources.Resource.Approver;
                   column.SetColVisible(true);
               });
               settings.Columns.Add(column =>
               {
                   column.FieldName = "Comment";
                   column.Caption = @Resources.Resource.Comment;
                   column.SetColVisible(true);
               });
               settings.Columns.Add(column =>
               {
                   column.FieldName = "CheckDate";
                   column.Caption = @Resources.Resource.CheckDate;
                   column.SetDataItemTemplateContent(c =>
                   {
                       string date = (((DateTime)DataBinder.Eval(c.DataItem, "CheckDate")).Date == new DateTime(1900, 1, 1) ? "" : FEA_Ultil.FEAStringClass.FormatDateString(FEA_ITS_Site.Helper.SessionManager.CurrentLang, DataBinder.Eval(c.DataItem, "CheckDate"), true));

                       ViewContext.Writer.Write(
                           string.Format(date)
                       );
                   });
                   column.SetColVisible(true);
               });
               settings.Columns.Add(column =>
               {
                   column.FieldName = "Status";
                   column.Caption = @Resources.Resource.Status;
                   column.SetColVisible(true);
               });
           });
            grid.Bind(new FEA_BusinessLogic.WaitingArea.WaitingArea().GetHistory(ViewBag.OrderCode)).GetHtml();
            break;
        case "FinishedForManager":
            grid = Html.DevExpress().GridView(
               settings =>
               {
                   settings.Name = "gvFinishedDocument";
                   settings.KeyFieldName = "ID";
                   settings.CallbackRouteValues = new { Controller = "DeviceRegistration", Action = "CallbackFinishedDocumentGrid" };
                   settings.Width = Unit.Percentage(100);
                   settings.CommandColumn.Visible = false;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
                   settings.Settings.VerticalScrollableHeight = 450;
                   settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                   settings.Settings.ShowGroupPanel = true;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;
                   settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;
                   //settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;
                   settings.Settings.ShowFilterRow = true;
                   settings.Settings.ShowFilterRowMenu = true;
                   settings.SettingsDetail.ShowDetailRow = true;
                   settings.Settings.ShowFooter = true;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.SettingsBehavior.AutoExpandAllGroups = false;
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ID";
                       c.Caption = "ID";
                       c.Visible = false;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "OrderCode";
                       c.Caption = @Resources.Resource.OrderCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "DocumentTypeName";
                       c.Caption = @Resources.Resource.DocumentTypeName;
                       c.Visible = true;
                       c.GroupIndex = 0;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Reason";
                       c.Caption = @Resources.Resource.Reason;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Description";
                       c.Caption = @Resources.Resource.Description;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Creator";
                       c.Caption = @Resources.Resource.Creator;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "CostCenter";
                       c.Caption = @Resources.Resource.CostCenterCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Create_Date";
                       c.Caption = @Resources.Resource.CreateDate;
                       c.Visible = true;

                       c.SetDataItemTemplateContent(x =>
                       {
                           ViewContext.Writer.Write(
                               string.Format(FEA_Ultil.FEAStringClass.FormatDateString(FEA_ITS_Site.Helper.SessionManager.CurrentLang, DataBinder.Eval(x.DataItem, "Create_Date")))
                           );
                       });
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "CompleteDate";
                       c.Caption = @Resources.Resource.CompleteDate;
                       c.Visible = true;

                       c.SetDataItemTemplateContent(x =>
                       {
                           ViewContext.Writer.Write(
                               string.Format(FEA_Ultil.FEAStringClass.FormatDateString(FEA_ITS_Site.Helper.SessionManager.CurrentLang, DataBinder.Eval(x.DataItem, "CompleteDate")))
                           );
                       });
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Technician";
                       c.Caption = Resources.Resource.CompleteBy;
                   });
                   settings.SetDetailRowTemplateContent(c =>
                   {
                       Html.RenderAction("CallbackDetail", new { ID = DataBinder.Eval(c.DataItem, "ID"), DocumentTypeName = DataBinder.Eval(c.DataItem, "DocumentTypeName") });
                   });
                   settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
               });

            grid.Bind(Model).GetHtml();
            break;

        #region GA Finished Approval managerment
        case "GAFinishedForManager":
            grid = Html.DevExpress().GridView(
               settings =>
               {
                   settings.Name = "gvFinishedDocument";
                   settings.KeyFieldName = "ID";
                   settings.CallbackRouteValues = new { Controller = "GA", Action = "CallbackFinishedDocumentGrid" };
                   settings.Width = Unit.Percentage(100);
                   settings.CommandColumn.Visible = false;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
                   settings.Settings.VerticalScrollableHeight = 450;
                   settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                   settings.Settings.ShowGroupPanel = true;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;
                   settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;
                   //settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;
                   settings.Settings.ShowFilterRow = true;
                   settings.Settings.ShowFilterRowMenu = true;
                   settings.SettingsDetail.ShowDetailRow = true;
                   settings.Settings.ShowFooter = true;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.SettingsBehavior.AutoExpandAllGroups = false;
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ID";
                       c.Caption = "ID";
                       c.Visible = false;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "OrderCode";
                       c.Caption = @Resources.Resource.OrderCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "DocumentTypeName";
                       c.Caption = @Resources.Resource.DocumentTypeName;
                       c.Visible = true;
                       c.GroupIndex = 0;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Reason";
                       c.Caption = @Resources.Resource.Reason;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Description";
                       c.Caption = @Resources.Resource.Description;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Creator";
                       c.Caption = @Resources.Resource.Creator;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "CostCenter";
                       c.Caption = @Resources.Resource.CostCenterCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Create_Date";
                       c.Caption = @Resources.Resource.CreateDate;
                       c.Visible = true;

                       c.SetDataItemTemplateContent(x =>
                       {
                           ViewContext.Writer.Write(
                               string.Format(FEA_Ultil.FEAStringClass.FormatDateString(FEA_ITS_Site.Helper.SessionManager.CurrentLang, DataBinder.Eval(x.DataItem, "Create_Date")))
                           );
                       });
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ConfirmDate";
                       c.Caption = @Resources.Resource.CompleteDate;
                       c.Visible = true;

                       c.SetDataItemTemplateContent(x =>
                       {
                           ViewContext.Writer.Write(
                               string.Format(FEA_Ultil.FEAStringClass.FormatDateString(FEA_ITS_Site.Helper.SessionManager.CurrentLang, DataBinder.Eval(x.DataItem, "ConfirmDate")))
                           );
                       });
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Technician";
                       c.Caption = Resources.Resource.CompleteBy;
                   });
                   settings.SetDetailRowTemplateContent(c =>
                   {
                       Html.RenderAction("CallbackDetail", new { ID = DataBinder.Eval(c.DataItem, "ID"), DocumentTypeName = DataBinder.Eval(c.DataItem, "DocumentTypeName") });
                   });
                   settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
               });

            grid.Bind(Model).GetHtml();
            break;


        case "GADetailFinishedForManager":
            grid = Html.DevExpress().GridView(
               settings =>
               {
                   settings.Name = "GADetailFinishedForManager" + ViewData["ID"];
                   settings.KeyFieldName = "OrderCode";
                   settings.SettingsBehavior.AllowSort = false;
                   settings.SettingsPager.AlwaysShowPager = false;
                   settings.Width = Unit.Percentage(100);
                   settings.CommandColumn.Visible = false;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "OrderCode";
                       c.Caption = @Resources.Resource.OrderCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemName";
                       c.Caption = @Resources.Resource.ItemName;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemDetailName";
                       c.Caption = @Resources.Resource.ItemNameDetail;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Quantity";
                       c.Caption = @Resources.Resource.Quantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Temp1";
                       c.Caption = @Resources.Resource.QuantityNeeded;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "EstimatePrice";
                       c.Caption = @Resources.Resource.EstimatedPrice;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "EstimateAmount";
                       c.Caption = @Resources.Resource.EstiamtedAmount;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Description";
                       c.Caption = @Resources.Resource.Description;
                       c.Visible = true;
                   });
               });
            grid.Bind(Model).GetHtml();

            break;
        #endregion

        case "StatisticDR":
            Object[] Result2 = (Object[])Model;
            var DRPivot = Html.DevExpress().PivotGrid(settings =>
             {
                 settings.Name = "pvDeviceRegistration";
                 settings.CallbackRouteValues = new { Controller = "Statistic", Action = "CallbackPivotGrid", Type = "DR" };
                 settings.Width = Unit.Percentage(100);
                 settings.OptionsView.ShowHorizontalScrollBar = true;
                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.DataArea;
                     field.AreaIndex = 0;
                     field.FieldName = "Data";
                     field.Caption = "Data";
                     field.CellFormat.FormatType = FormatType.Custom;
                     field.RunningTotal = true;
                     field.SummaryType = PivotSummaryType.Count;
                     field.CustomTotals.Add(PivotSummaryType.Count);
                 });
                 settings.Fields.Add(field =>
                 {
                     //field.Area = PivotArea.RowArea;
                     field.AreaIndex = 0;
                     field.FieldName = "Department";
                     field.Caption = @Resources.Resource.Department;
                 });
                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.ColumnArea;
                     field.AreaIndex = 0;
                     field.FieldName = "CreateDate";
                     field.Caption = "Year";
                     field.GroupInterval = PivotGroupInterval.DateYear;
                 });
                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.ColumnArea;
                     field.AreaIndex = 1;
                     field.FieldName = "CreateDate";
                     field.Caption = "Month";
                     field.GroupInterval = PivotGroupInterval.DateMonth;
                     // field.ValueFormat.FormatType = FormatType.Numeric;
                 });
                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.FilterArea;
                     field.AreaIndex = 0;
                     field.FieldName = "Complete";
                     field.Caption = " Complete Year";
                     field.GroupInterval = PivotGroupInterval.DateYear;
                 });
                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.FilterArea;
                     field.AreaIndex = 1;
                     field.FieldName = "Complete";
                     field.Caption = " Complete Month";
                     field.GroupInterval = PivotGroupInterval.DateMonth;
                     field.ValueFormat.FormatType = FormatType.Numeric;
                 });
                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.FilterArea;
                     field.AreaIndex = 2;
                     field.FieldName = "TechnicianID";
                     field.Caption = @Resources.Resource.TechnicianID;
                 });
                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.FilterArea;
                     field.AreaIndex = 3;
                     field.FieldName = "TechnicianName";
                     field.Caption = @Resources.Resource.TechnicianName;
                 });
                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.FilterArea;
                     field.AreaIndex = 4;
                     field.FieldName = "Creator";
                     field.Caption = @Resources.Resource.Creator;
                 });
                 //settings.Fields.Add(field =>
                 //{
                 //    field.Area = PivotArea.FilterArea;
                 //    field.AreaIndex = 5;
                 //    field.FieldName = "ItemName";
                 //    field.Caption = @Resources.Resource.ItemName;
                 //});
                 //settings.Fields.Add(field =>
                 //{
                 //    field.Area = PivotArea.FilterArea;
                 //    field.AreaIndex = 6;
                 //    field.FieldName = "ItemDetailName";
                 //    field.Caption = @Resources.Resource.ItemNameDetail;
                 //});
             }
             );


            if (Result2 != null)
            {
                DRPivot.Bind((List<FEA_BusinessLogic.sp_DeviceRegistrationReport_Result>)Result2[0]).GetHtml();
            }
            else
            {
                DRPivot.GetHtml();
            }
            break;
        case "StatisticHR":
            Object[] Result3 = (Object[])Model;
            var HRPivot = Html.DevExpress().PivotGrid(settings =>
            {
                settings.Name = "pvhardwareRequirement";
                settings.CallbackRouteValues = new { Controller = "Statistic", Action = "CallbackPivotGrid", Type = "HR" };
                settings.Width = Unit.Percentage(100);
                settings.OptionsView.ShowHorizontalScrollBar = true;
                settings.Fields.Add(field =>
                {
                    field.Area = PivotArea.DataArea;
                    field.AreaIndex = 0;
                    field.FieldName = "Data";
                    field.Caption = "Data";
                    field.CellFormat.FormatType = FormatType.Custom;
                    field.RunningTotal = true;
                    field.SummaryType = PivotSummaryType.Count;
                    field.CustomTotals.Add(PivotSummaryType.Count);
                });
                settings.Fields.Add(field =>
                {
                    //field.Area = PivotArea.RowArea;
                    field.AreaIndex = 0;
                    field.FieldName = "Department";
                    field.Caption = @Resources.Resource.Department;
                });
                settings.Fields.Add(field =>
                {
                    field.Area = PivotArea.ColumnArea;
                    field.AreaIndex = 0;
                    field.FieldName = "CreateDate";
                    field.Caption = "Year";
                    field.GroupInterval = PivotGroupInterval.DateYear;
                });
                settings.Fields.Add(field =>
                {
                    field.Area = PivotArea.ColumnArea;
                    field.AreaIndex = 1;
                    field.FieldName = "CreateDate";
                    field.Caption = "Month";
                    field.GroupInterval = PivotGroupInterval.DateMonth;
                    // field.ValueFormat.FormatType = FormatType.Numeric;
                });
                settings.Fields.Add(field =>
                {
                    field.Area = PivotArea.FilterArea;
                    field.AreaIndex = 4;
                    field.FieldName = "Creator";
                    field.Caption = @Resources.Resource.Creator;
                });
                //settings.Fields.Add(field =>
                //{
                //    field.Area = PivotArea.FilterArea;
                //    field.AreaIndex = 5;
                //    field.FieldName = "ItemName";
                //    field.Caption = @Resources.Resource.ItemName;
                //});
                //settings.Fields.Add(field =>
                //{
                //    field.Area = PivotArea.FilterArea;
                //    field.AreaIndex = 6;
                //    field.FieldName = "ItemDetailName";
                //    field.Caption = @Resources.Resource.ItemNameDetail;
                //});
            }
      );


            if (Result3 != null)
            {
                HRPivot.Bind((List<FEA_BusinessLogic.sp_HardwareRequirementReport_Result>)Result3[1]).GetHtml();
            }
            else
            {
                HRPivot.GetHtml();
            }
            break;
        case "StatisticHRDetail":
            Object[] Result4 = (Object[])Model;
            var HRDetailResult = Html.DevExpress().GridView(settings =>
            {
                settings.Name = "gvHRDetail";
                settings.Width = Unit.Percentage(100);
                settings.CallbackRouteValues = new { Controller = "Statistic", Action = "CallbackPivotGrid", Type = "HRDetail" };
                settings.KeyFieldName = "OrderCode";
                settings.Width = Unit.Percentage(100);
                settings.CommandColumn.Visible = false;
                settings.SettingsBehavior.AllowFocusedRow = true;
                settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
                settings.Settings.VerticalScrollableHeight = 450;
                settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                settings.SettingsBehavior.AllowSelectByRowClick = true;
                settings.Settings.ShowFilterRow = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFooter = true;
                settings.SettingsBehavior.AllowFocusedRow = true;
                settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;

                settings.Columns.Add(column =>
                {
                    column.FieldName = "OrderCode";
                    column.Caption = @Resources.Resource.OrderCode;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "CreatorID";
                    column.Caption = @Resources.Resource.UserCode;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Creator";
                    column.Caption = @Resources.Resource.UserName;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Department_Name";
                    column.Caption = @Resources.Resource.Department;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "ItemName";
                    column.Caption = @Resources.Resource.ItemName;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "ItemDetailName";
                    column.Caption = @Resources.Resource.ItemNameDetail;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Description";
                    column.Caption = @Resources.Resource.Description;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Currency";
                    column.Caption = @Resources.Resource.CurrencyType;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "EstimatedPrice";
                    column.Caption = @Resources.Resource.EstiamtedAmount;
                    column.SetColVisible(true);

                    column.SetDataItemTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(
                            string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "EstimatedPrice")))
                        );
                    });
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "EstimatedAmount";
                    column.Caption = @Resources.Resource.EstiamtedAmount;
                    column.SetColVisible(true);
                    column.SetDataItemTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(
                            string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "EstimatedAmount")))
                        );
                    });
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Status";
                    column.Caption = @Resources.Resource.Status;
                    column.SetColVisible(true);
                });
            });
            if (Result4 != null)
            {
                HRDetailResult.Bind((List<FEA_BusinessLogic.sp_HardwareRequirementTotalReport_Result>)Result4[2]).GetHtml();
            }
            else
            {
                HRDetailResult.GetHtml();
            }
            break;

        case "GetDataForSAPivotGrid":
            Object[] Result10 = (Object[])Model;
            var SAPivot = Html.DevExpress().PivotGrid(settings =>
             {
                 settings.Name = "Export item pivot -" + DateTime.Today;
                 settings.CallbackRouteValues = new { Controller = "SA", Action = "CallbackPivotGrid", Type = "Pivot", DateFrom = ViewBag.DateFrom, DateTo = ViewBag.DateTo };
                 settings.Width = Unit.Percentage(100);
                 settings.OptionsView.ShowHorizontalScrollBar = true;


                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.DataArea;
                     field.AreaIndex = 0;
                     field.FieldName = "CreateDate";
                     field.Caption = "Data";
                     field.CellFormat.FormatType = FormatType.Custom;
                     field.RunningTotal = true;
                     field.SummaryType = PivotSummaryType.Count;
                     field.CustomTotals.Add(PivotSummaryType.Count);
                 });
                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.RowArea;
                     field.AreaIndex = 0;
                     field.FieldName = "Remark";
                     field.Caption = @Resources.Resource.Department;
                 });
                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.ColumnArea;
                     field.AreaIndex = 0;
                     field.FieldName = "CreateDate";
                     field.Caption = @Resources.Resource.Year;
                     field.GroupInterval = PivotGroupInterval.DateYear;
                 });
                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.ColumnArea;
                     field.AreaIndex = 1;
                     field.FieldName = "CreateDate";
                     field.Caption = @Resources.Resource.Month;
                     field.GroupInterval = PivotGroupInterval.DateMonth;
                 });
                 settings.Fields.Add(field =>
                 {
                     field.Area = PivotArea.FilterArea;
                     field.AreaIndex = 0;
                     field.FieldName = "Creator";
                     field.Caption = @Resources.Resource.Creator;
                 });
                 settings.Fields.Add(field =>
                 {
                     // field.Area = PivotArea.FilterArea;
                     field.AreaIndex = 2;
                     field.FieldName = "Reason";
                     field.Caption =  @Resources.Resource.Reason;
                 });
                 settings.Fields.Add(field =>
                 {
                     //  field.Area = PivotArea.FilterArea;
                     field.AreaIndex = 1;
                     field.FieldName = "TypeName";
                     field.Caption = @Resources.Resource.DocType;
                 });

             }
             );


            if (Result10 != null)
            {
                SAPivot.Bind((List<FEA_BusinessLogic.sp_GetDataForSAPivotGrid_Result>)Result10[1]).GetHtml();
            }
            else
            {
                SAPivot.GetHtml();
            }
            break;

        case "GetSADynamicReport":
            Object[] Result11 = (Object[])Model;
            grid = Html.DevExpress().GridView(settings =>
               {

                   settings.Name = "StatisticDynamic";
                   settings.KeyFieldName = "ItemID;Type";
                   settings.Width = Unit.Percentage(100);
                   settings.CallbackRouteValues = new { Controller = "SA", Action = "CallbackPivotGrid", Type = "Dynamic", DateFrom = ViewBag.DateFrom, DateTo = ViewBag.DateTo };
                   settings.CommandColumn.Visible = false;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
                   settings.Settings.VerticalScrollableHeight = 450;
                   settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;
                   settings.Settings.ShowFilterRow = true;
                   settings.Settings.ShowFilterRowMenu = true;
                   settings.Settings.ShowFooter = true;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                   settings.Settings.ShowFilterRow = true;
                   settings.Settings.ShowFilterRowMenu = true;
                   settings.Settings.ShowFilterRowMenuLikeItem = true;
                   settings.Settings.ShowGroupPanel = true;
                   settings.SettingsDetail.ShowDetailRow = true;
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "Quantity");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "ExportQuantity");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "LendQuantity");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "ReceivedQuantity");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "ReturnedQuantity");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "AdjustedQuantity");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "RemainingQuantity");
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemID";
                       c.Caption = "ItemID";
                       c.SetColVisible(false);
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemDetailName";
                       c.Caption = @Resources.Resource.MaterialName;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Type";
                       c.Caption = @Resources.Resource.DocType;
                       c.SetColVisible(false);
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "TypeName";
                       c.Caption = @Resources.Resource.Type;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Unit";
                       c.Caption = @Resources.Resource.Unit;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Quantity";
                       c.Caption = @Resources.Resource.Quantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ExportQuantity";
                       c.Caption = @Resources.Resource.TotalExportQuantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "LendQuantity";
                       c.Caption = @Resources.Resource.TotalLendQuantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ReceivedQuantity";
                       c.Caption = @Resources.Resource.ReceivedQuantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ReturnedQuantity";
                       c.Caption = @Resources.Resource.ReturnedQuantity;
                       c.Visible = true;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "AdjustedQuantity";
                       c.Caption = @Resources.Resource.AdjustedQuantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "RemainingQuantity";
                       c.Caption = @Resources.Resource.RemainingQuantity;
                       c.Visible = true;
                   });
                   settings.SetDetailRowTemplateContent(c =>
                   {
                       Html.RenderAction("GetDetailSADynamic", new { ItemDetailID = DataBinder.Eval(c.DataItem, "ItemID"), Type = DataBinder.Eval(c.DataItem, "Type"), DateFrom = ViewBag.DateFrom, DateTo = ViewBag.DateTo });
                   });
               });
            if (Result11 != null)
            {
                grid.Bind((List<FEA_BusinessLogic.sp_GetSADynamicReport_Result>)Result11[0]).GetHtml();
            }
            else
            {
                grid.GetHtml();
            }

            break;
        case "GetDetailSADynamicReport":
            grid = Html.DevExpress().GridView(
               settings =>
               {
                   settings.Name = "GetDetailSADynamicReport" + ViewData["ItemDetailID"];
                   settings.KeyFieldName = "OrderCode";
                   settings.SettingsBehavior.AllowSort = false;
                   settings.SettingsPager.AlwaysShowPager = false;
                   settings.Width = Unit.Percentage(100);
                   settings.CommandColumn.Visible = false;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "OrderCode";
                       c.Caption = @Resources.Resource.OrderCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ExportItemAdjustCode";
                       c.Caption = @Resources.Resource.ItemName;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "TypeName";
                       c.Caption = @Resources.Resource.Type;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemDetailName";
                       c.Caption = @Resources.Resource.ItemNameDetail;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Quantity";
                       c.Caption = @Resources.Resource.Quantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Creator";
                       c.Caption = @Resources.Resource.Creator;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "CreateDate";
                       c.Caption = @Resources.Resource.CreateDate;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "SecurityEmployee";
                       c.Caption = @Resources.Resource.CompleteBy;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ConfirmDate";
                       c.Caption = @Resources.Resource.CompleteDate;
                       c.Visible = true;
                   });
               });
            grid.Bind(Model).GetHtml();

            break;
        case "GetSADynamicReportChart":
            var PivotChart = Html.DevExpress().Chart(settings =>
            {
                settings.Name = "GetSADynamicReportChart";
                settings.CallbackRouteValues = new { Controller = "SA", Action = "GetSADynamicReportChart", frm = Model };
                settings.EnableClientSideAPI = true;
                settings.ClientSideEvents.BeginCallback = "OnBeginChartCallback";
                settings.Legend.MaxHorizontalPercentage = 25;
                settings.BorderOptions.Visibility = DefaultBoolean.False;
                settings.Width = Unit.Pixel(900);
                settings.Height = Unit.Pixel(500);
                settings.SeriesDataMember = "CreateDate";
                settings.SeriesTemplate.ChangeView(DevExpress.XtraCharts.ViewType.Bar);
                settings.SeriesTemplate.ArgumentDataMember = "Remark";
                settings.SeriesTemplate.ValueDataMembers[0] = "CountRequest";
                settings.SeriesTemplate.Label.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                settings.SeriesTemplate.LabelsVisibility = DefaultBoolean.True;
                settings.SeriesTemplate.SeriesPointsSorting = SortingMode.Descending;
                settings.SeriesTemplate.SeriesPointsSortingKey = SeriesPointKey.Argument;


                settings.SeriesSorting = SortingMode.Ascending;
                settings.CrosshairEnabled = DefaultBoolean.False;
                if (settings.SeriesTemplate.Label != null)
                {
                    settings.SeriesTemplate.Label.LineVisibility = DefaultBoolean.True;
                    settings.SeriesTemplate.LabelsVisibility = DefaultBoolean.True;
                }
                settings.Titles.Add(new ChartTitle()
                {
                    Font = new System.Drawing.Font("Segoe UI Light", 18),
                    Text = "Export items statistic"
                });
                settings.Titles.Add(new ChartTitle()
                {
                    Alignment = System.Drawing.StringAlignment.Far,
                    Dock = ChartTitleDockStyle.Bottom,
                    Font = new System.Drawing.Font("Segoe UI Light", 8),
                    TextColor = System.Drawing.Color.Gray,
                    Text = "Automatically generated by [ITS] system"
                });

            });

            PivotChart.Bind(Model).GetHtml();

            break;

        case "DetailFinishedForManager":
            grid = Html.DevExpress().GridView(
               settings =>
               {
                   settings.Name = "gvDetailFinishedDocument" + ViewData["ID"];
                   settings.KeyFieldName = "OrderCode";
                   settings.SettingsBehavior.AllowSort = false;
                   settings.SettingsPager.AlwaysShowPager = false;
                   settings.Width = Unit.Percentage(100);
                   settings.CommandColumn.Visible = false;

                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "OrderCode";
                       c.Caption = @Resources.Resource.OrderCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemName";
                       c.Caption = @Resources.Resource.ItemName;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemDetailName";
                       c.Caption = @Resources.Resource.ItemNameDetail;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Description";
                       c.Caption = @Resources.Resource.Description;
                       c.Visible = true;
                   });
               });
            grid.Bind(Model).GetHtml();

            break;
        case "DetailHRFinishedForManager":
            grid = Html.DevExpress().GridView(
               settings =>
               {
                   settings.Name = "DetailHRFinishedForManager" + ViewData["ID"];
                   settings.KeyFieldName = "OrderCode";
                   settings.SettingsBehavior.AllowSort = false;
                   settings.SettingsPager.AlwaysShowPager = false;
                   settings.Width = Unit.Percentage(100);
                   settings.CommandColumn.Visible = false;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "OrderCode";
                       c.Caption = @Resources.Resource.OrderCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemName";
                       c.Caption = @Resources.Resource.ItemName;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemDetailName";
                       c.Caption = @Resources.Resource.ItemNameDetail;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Quantity";
                       c.Caption = @Resources.Resource.Quantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Temp1";
                       c.Caption = @Resources.Resource.QuantityNeeded;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "EstimatedPrice";
                       c.Caption = @Resources.Resource.EstimatedPrice;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "EstimatedAmount";
                       c.Caption = @Resources.Resource.EstiamtedAmount;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Description";
                       c.Caption = @Resources.Resource.Description;
                       c.Visible = true;
                   });
               });
            grid.Bind(Model).GetHtml();

            break;
        case "QueryDynamicInventory":
            Object[] Result5 = (Object[])Model;
            grid = Html.DevExpress().GridView(settings =>
               {

                   settings.Name = "QueryDynamicInventory" + ViewData["ID"];
                   settings.KeyFieldName = "ItemDetailID";
                   settings.Width = Unit.Percentage(100);
                   settings.CallbackRouteValues = new { Controller = "ITInventory", Action = "CallbackDynamicInventory", DateTo = ViewData["DateTo"], DateFrom = ViewData["DateFrom"] };
                   settings.CommandColumn.Visible = false;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
                   settings.Settings.VerticalScrollableHeight = 450;
                   settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;
                   settings.Settings.ShowFilterRow = true;
                   settings.Settings.ShowFilterRowMenu = true;
                   settings.Settings.ShowFooter = true;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                   settings.Settings.ShowFilterRow = true;
                   settings.Settings.ShowFilterRowMenu = true;
                   settings.Settings.ShowFilterRowMenuLikeItem = true;
                   settings.Settings.ShowGroupPanel = true;
                   settings.SettingsDetail.ShowDetailRow = true;

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemDetailID";
                       c.Caption = "ItemDetailID";
                       c.Visible = false;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemDetailName";
                       c.Caption = @Resources.Resource.ItemNameDetail;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "BeginQuantity";
                       c.Caption = @Resources.Resource.BeginQuantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "StockinQuantity";
                       c.Caption = @Resources.Resource.StockinQuantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "StockOutQuantity";
                       c.Caption = @Resources.Resource.StockoutQuantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "EndQuantity";
                       c.Caption = @Resources.Resource.EndQuantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "InventoryQuantity";
                       c.Caption = @Resources.Resource.InventoryQuantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "DifferentQuantity";
                       c.Caption = @Resources.Resource.DifferentQuantity;
                       c.Visible = true;
                   });
                   settings.SetDetailRowTemplateContent(c =>
                   {
                       Html.RenderAction("CallbackDetail", new { ItemDetailID = DataBinder.Eval(c.DataItem, "ItemDetailID") });
                   });
               });
            if (Result5 != null)
            {
                grid.Bind((List<FEA_BusinessLogic.sp_GetDynamicInventory_Result>)Result5[0]).GetHtml();
            }
            else
            {
                grid.GetHtml();
            }


            break;
        case "QueryDetailDynamicInventory":
            grid = Html.DevExpress().GridView(settings =>
            {

                settings.Name = "QueryDetailDynamicInventory" + ViewData["ID"];
                settings.KeyFieldName = "OrderCode";
                settings.CallbackRouteValues = new { Controller = "ITInventory", Action = "CallbackDetailDynamic", ItemDetailID = ViewData["ID"], DateTo = ViewData["DateTo"], DateFrom = ViewData["DateFrom"] };
                settings.Width = Unit.Percentage(100);
                settings.CommandColumn.Visible = false;
                settings.SettingsBehavior.AllowFocusedRow = true;
                settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                settings.SettingsBehavior.AllowSelectByRowClick = true;
                settings.Settings.ShowFilterRow = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFooter = true;
                settings.SettingsBehavior.AllowFocusedRow = true;
                settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                settings.Settings.ShowFilterRow = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFilterRowMenuLikeItem = true;
                settings.Settings.ShowGroupPanel = true;
                settings.SettingsBehavior.AutoExpandAllGroups = true;
                settings.Columns.Add(c =>
                {
                    c.FieldName = "OrderCode";
                    c.Caption = "OrderCode";
                    c.Visible = true;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "Creator";
                    c.Caption = @Resources.Resource.Creator;
                    c.Visible = true;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "CostCenter";
                    c.Caption = @Resources.Resource.CostCenterCode;
                    c.Visible = true;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "CreateDate";
                    c.Caption = @Resources.Resource.CreateDate;
                    c.Visible = true;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "DocumentTypeName";
                    c.Caption = @Resources.Resource.DocumentTypeName;
                    c.Visible = true;
                    c.GroupIndex = 0;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "ItemName";
                    c.Caption = @Resources.Resource.ItemName;
                    c.Visible = true;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "ItemDetailName";
                    c.Caption = @Resources.Resource.ItemNameDetail;
                    c.Visible = true;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "Quantity";
                    c.Caption = @Resources.Resource.Quantity;
                    c.Visible = true;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "Unit";
                    c.Caption = @Resources.Resource.Unit;
                    c.Visible = true;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "Description";
                    c.Caption = @Resources.Resource.Description;
                    c.Visible = true;
                });

            }); grid.Bind(Model).GetHtml();

            break;
        case "DynamicQueryPackingManifest":
            Html.DevExpress().GridView(settings =>
               {

                   settings.Name = "DynamicQueryPackingManifest";
                   settings.KeyFieldName = "CustomerPO;PONo;ColorName;Size";
                   settings.Width = Unit.Percentage(100);
                   settings.CallbackRouteValues = new { Controller = "WarehouseArea", Action = "GetDynamicQueryPackingManifest", PoNumber = ViewData["PoNumber"], CustomerPO = ViewData["CustomerPO"], dtFrom = ViewData["dtFrom"], dtTo = ViewData["dtTo"], TypeQuery = ViewData["TypeQuery"], OrderState = ViewData["OrderState"] };
                   settings.CommandColumn.Visible = false;
                   settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
                   settings.Settings.VerticalScrollableHeight = 450;
                   settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
                   settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;
                   settings.Settings.ShowFooter = true;
                  // settings.Settings.UseFixedTableLayout = true;
                 //  settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.Settings.ShowFilterRow = true;
                   settings.Settings.ShowFilterRowMenu = true;
                   settings.Settings.ShowFilterRowMenuLikeItem = true;
                 //  settings.Settings.ShowGroupPanel = true;
                   settings.SettingsDetail.ShowDetailRow = true;
                   settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;
                   settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "ContainerCount");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "Quantity");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalQuantityNotConfirmed");

                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalContainerNotConfirmed");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalContainerConfirmed");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalReturnContainer");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalContainerImported");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalStockedInContainerFromERP");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "EndTotalContainer");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "ContainerDifferences");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalExportItem");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalExportItemFromERP");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "ContainerDifferencesBetweenWarehouseAndPacking");
                   settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "QuantityDifferencesBetweenWarehouseAndPacking");
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "CustomerPO";
                       c.Caption = @Resources.Resource.CustomerPO;
                       c.Visible = true;
                       c.Width = 80;
                       c.FixedStyle = GridViewColumnFixedStyle.Left;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "PONo";
                       c.Caption = "PO Number";
                       c.Visible = true;
                       c.FixedStyle = GridViewColumnFixedStyle.Left;
                       c.Width = 80;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "InvoiceNo";
                       c.Caption = "Invoice No";
                       c.Visible = true;
                       c.Width = 80;
                       c.FixedStyle = GridViewColumnFixedStyle.Left;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "PackingManifestType";
                       c.Caption = @Resources.Resource.Type;
                       c.Visible = true;
                       c.Width = 80;
                       c.FixedStyle = GridViewColumnFixedStyle.Left;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "MainLine_";
                       c.Caption = "PO Item#";
                       c.Visible = true;
                       c.Width = 80;
                       c.FixedStyle = GridViewColumnFixedStyle.Left;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ShortDescription";
                       c.Caption = "COMBO";
                       c.Visible = true;
                       c.Width = 80;
                       c.FixedStyle = GridViewColumnFixedStyle.Left;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ColorName";
                       c.Caption = "Color Name";
                       c.Visible = true;
                       c.Width = 80;
                       c.FixedStyle = GridViewColumnFixedStyle.Left;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Size";
                       c.Caption = "Size";
                       c.Visible = true;
                       c.Width = 80;
                       c.FixedStyle = GridViewColumnFixedStyle.Left;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ContainerCount";
                       c.Caption = @Resources.Resource.ContainerCount;
                       c.Visible = true;
                       c.Width = 100;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Quantity";
                       c.Caption = @Resources.Resource.Quantity;
                       c.Visible = true;
                       c.Width = 80;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "TotalQuantityNotConfirmed";
                       c.Caption = @Resources.Resource.TotalQuantityNotConfirmed;
                       c.Visible = true;
                       c.Width = 180;

                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "TotalContainerNotConfirmed";
                       c.Caption = @Resources.Resource.TotalContainerNotConfirmed;
                       c.Visible = true;
                       c.Width = 180;
                   });


                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "TotalContainerConfirmed";
                       c.Caption = @Resources.Resource.TotalContainerConfirmed;
                       c.Visible = true;
                       c.Width = 180;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "TotalReturnContainer";
                       c.Caption = @Resources.Resource.TotalReturnContainer;
                       c.Visible = true;
                       c.Width = 180;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "TotalContainerImported";
                       c.Caption = @Resources.Resource.TotalContainerImported;
                       c.Visible = true;
                       c.Width = 180;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "TotalStockedInContainerFromERP";
                       c.Caption = @Resources.Resource.TotalStockedInContainerFromERP;
                       c.Visible = true;
                       c.Width = 180;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "EndTotalContainer";
                       c.Caption = @Resources.Resource.EndTotalContainer;
                       c.Visible = true;
                       c.Width = 180;
                   });


                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ContainerDifferences";
                       c.Caption = @Resources.Resource.ContainerDifferences;
                       c.Visible = true;
                       c.Width = 180;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "TotalExportItem";
                       c.Caption = Resources.Resource.TotalExportItem;
                       c.Visible = true;
                       c.Width = 180;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "TotalExportItemFromERP";
                       c.Caption = Resources.Resource.TotalExportItemFromERP;
                       c.Visible = true;
                       c.Width = 180;

                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ContainerDifferencesBetweenWarehouseAndPacking";
                       c.Caption = @Resources.Resource.ContainerDifferencesBetweenWarehouseAndPacking;
                       c.Visible = true;
                       c.Width = 180;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "QuantityDifferencesBetweenWarehouseAndPacking";
                       c.Caption = @Resources.Resource.QuantityDifferencesBetweenWarehouseAndPacking;
                       c.Visible = true;
                       c.Width = 180;
                   });
                   settings.SetDetailRowTemplateContent(c =>
                   {
                       Html.RenderAction("LoadPackingManifestDetailDetailOnQuery", new { PoNumber = DataBinder.Eval(c.DataItem, "PONo"), CustomerPO = DataBinder.Eval(c.DataItem, "CustomerPO"), dtFrom = ViewData["dtFrom"], dtTo = ViewData["dtTo"], TypeQuery = "Normal", Color = DataBinder.Eval(c.DataItem, "ColorName"), Size = DataBinder.Eval(c.DataItem, "Size") });
                   });


               }).Bind(Model).GetHtml();

            break;
        case "TotalSheldReport":
            Html.DevExpress().GridView(settings =>
            {

                settings.Name = "TotalSheldReport";
                settings.KeyFieldName = "ShelfCode;CustomerPO;";
                settings.Width = Unit.Percentage(100);
                settings.CallbackRouteValues = new { Controller = "WarehouseArea", Action = "CallbackShelfReport", SerialNo = ViewData["SerialNo"], CustomerPO = ViewData["CustomerPO"]};
                settings.CommandColumn.Visible = false;
                settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
                settings.Settings.VerticalScrollableHeight = 450;
                settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                //settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                settings.SettingsBehavior.AllowSelectByRowClick = true;
                settings.Settings.ShowFooter = true;
                settings.Settings.UseFixedTableLayout = true;
                settings.SettingsBehavior.AllowFocusedRow = true;
                settings.Settings.ShowFilterRow = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFilterRowMenuLikeItem = true;
                settings.Settings.ShowGroupPanel = true;
                settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;
                // settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;
                settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalBox");

                settings.Columns.Add(c =>
                {
                    c.FieldName = "ShelfCode";
                    c.Caption = "ShelfCode";
                    c.Visible = true;
                    c.Width = Unit.Percentage(12.5);
                    c.FixedStyle = GridViewColumnFixedStyle.Left;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "Customer";
                    c.Caption = "Customer";
                    c.Visible = true;
                    c.FixedStyle = GridViewColumnFixedStyle.Left;
                    c.Width = Unit.Percentage(12.5);
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "CustomerPO";
                    c.Caption = "CustomerPO";
                    c.Visible = true;
                    c.Width = Unit.Percentage(12.5);
                    c.FixedStyle = GridViewColumnFixedStyle.Left;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "Style";
                    c.Caption = "MainLine";
                    c.Visible = true;
                    c.Width = Unit.Percentage(12.5);
                    c.FixedStyle = GridViewColumnFixedStyle.Left;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "ShipmentMethod";
                    c.Caption = "Shipment Method";
                    c.Visible = true;
                    c.Width = Unit.Percentage(12.5);
                    c.FixedStyle = GridViewColumnFixedStyle.Left;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "CtnCode";
                    c.Caption = "CtnCode";
                    c.Visible = true;
                    c.Width = Unit.Percentage(12.5);
                    c.FixedStyle = GridViewColumnFixedStyle.Left;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "TotalBox";
                    c.Caption = "Total Box";
                    c.Visible = true;
                    c.Width = Unit.Percentage(12.5);
                    c.FixedStyle = GridViewColumnFixedStyle.Left;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "Status";
                    c.Caption = "Status";
                    c.Visible = true;
                    c.Width = Unit.Percentage(12.5);
                });

            }).Bind(Model).GetHtml();

            break;
        case "SAReason":
            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "SASetLimitForPosition";
                settings.KeyFieldName = "ID";
                settings.CallbackRouteValues = new { Controller = "SAConfigure", Action = "GetAllReason" };
                settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "SAConfigure", Action = "AddNewReason"};
                settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "SAConfigure", Action = "UpdateReason" };
                // settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Node", Action = "EditModesDeletePartial", DoctypeID = Request.QueryString["sDocTypeID"] };
                settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
                settings.Width = Unit.Percentage(60);
                settings.CommandColumn.Visible = true;
                settings.CommandColumn.Width = Unit.Percentage(5);
                settings.SettingsDetail.ShowDetailRow = true;
                settings.SettingsCommandButton.NewButton.Text = Resources.Resource.AddNew;
                settings.CommandColumn.ShowNewButtonInHeader = true;

                settings.SettingsBehavior.AllowSelectByRowClick = true;
                settings.CommandColumn.ShowEditButton = true;
                settings.SettingsCommandButton.EditButton.Text = Resources.Resource.Update;

                settings.SettingsDetail.ShowDetailRow = true;
                settings.Settings.ShowFooter = true;
                settings.SettingsBehavior.AllowFocusedRow = true;

                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                settings.Columns.Add(column =>
                    {
                        column.FieldName = "ID";
                        column.Visible = false;

                    });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Temp1";
                    column.Caption = @Resources.Resource.DocType;
                    column.Width = Unit.Percentage(10);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = FEA_ITS_Site.Controllers.SAController.GetDocumentList();
                    comboBox.TextField = "Value";
                    comboBox.ValueField = "Key";
                    comboBox.ValueType = typeof(string);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Reason";
                    column.Caption = Resources.Resource.Reason;
                    column.Width = Unit.Percentage(20);
                    //column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    //var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    //comboBox.DataSource = new FEA_SABusinessLogic.SAReasonManager().GetItems(1);
                    //comboBox.TextField = "Reason";
                    //comboBox.ValueField = "ID";
                    //comboBox.ValueType = typeof(string);
                });


                settings.Columns.Add(
                  column =>
                  {
                      column.FieldName = "isConstraint";
                      column.Caption = Resources.Resource.IsConstraint;
                      column.Width = Unit.Percentage(10);
                      column.ColumnType = MVCxGridViewColumnType.CheckBox;
                  }
                );
                settings.Columns.Add(
                    column =>
                    {
                        column.FieldName = "Status";
                        column.Caption = Resources.Resource.Enabled;
                        column.Width = Unit.Percentage(10);
                        column.ColumnType = MVCxGridViewColumnType.CheckBox;
                    }
                );
                settings.SetDetailRowTemplateContent(c =>
                {

                    if (int.Parse(DataBinder.Eval(c.DataItem, "Temp1").ToString()) == (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Donative)
                        Html.RenderAction("LoadConstraintByPosition", new { ReasonID = DataBinder.Eval(c.DataItem, "ID") });
                    else
                    {
                        ViewContext.Writer.Write(
                            string.Format("<div style ='color:red'>Đơn không hợp lệ</div>")
                        );
                    }
                });

                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFilterRow = true;

            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }


            grid.Bind(Model).GetHtml();
            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;
        case "SAConfigure":
            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "SASetConfigure";
                settings.KeyFieldName = "ReasonID;PositionID;Temp1";
                settings.CallbackRouteValues = new { Controller = "SAConfigure", Action = "GetAllConfigure", ReasonID = ViewData["ReasonID"] };
                settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "SAConfigure", Action = "AddNewConfigure"};
                settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "SAConfigure", Action = "UpdateConfigure"};
                settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "SAConfigure", Action = "DeleteConfigure"};
                settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
                settings.Width = Unit.Percentage(100);
                settings.CommandColumn.Visible = true;
                settings.CommandColumn.Width = Unit.Percentage(5);
                settings.SettingsCommandButton.NewButton.Text = Resources.Resource.AddNew;
                settings.CommandColumn.ShowNewButtonInHeader = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFilterRow = true;
                settings.SettingsBehavior.AllowSelectByRowClick = true;
                settings.CommandColumn.ShowEditButton = true;
                settings.SettingsCommandButton.EditButton.Text = Resources.Resource.Update;
                settings.Settings.ShowFooter = true;
                settings.SettingsBehavior.AllowFocusedRow = true;
                settings.CommandColumn.ShowDeleteButton = true;
                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Temp1";
                    column.SetColVisible(false);
                    column.EditFormSettings.Visible = DefaultBoolean.False;
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "ReasonID";
                    column.Caption = Resources.Resource.Reason;
                    column.Width = Unit.Percentage(20);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_SABusinessLogic.SAReasonManager().GetItemsByID(ViewBag.ReasonID);
                    comboBox.TextField = "Reason";
                    comboBox.ValueField = "ID";
                    comboBox.ValueType = typeof(string);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "PositionID";
                    column.Caption = Resources.Resource.Position;
                    column.Width = Unit.Percentage(20);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.UserPositionManager().GetItems();
                    comboBox.TextField = "PositionName";
                    comboBox.ValueField = "PositionID";
                    comboBox.ValueType = typeof(string);
                });

                settings.Columns.Add(
                  column =>
                  {
                      column.FieldName = "Quantity";
                      column.Caption = Resources.Resource.Quantity;
                      column.Width = Unit.Percentage(10);
                      column.SetDataItemTemplateContent(c =>
                      {
                          ViewContext.Writer.Write(
                              string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "Quantity")))
                          );
                      });
                  }
                );
            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }

            grid.Bind(Model).Render();
            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;
        case "SADestination":
            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "SADestination";
                settings.KeyFieldName = "ID";
                settings.CallbackRouteValues = new { Controller = "SAConfigure", Action = "GetAllDestination"};
                settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "SAConfigure", Action = "AddNewDestination"};
                settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "SAConfigure", Action = "UpdateDestination"};

                settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
                settings.Width = Unit.Percentage(100);
                settings.CommandColumn.Visible = true;
                settings.CommandColumn.Width = Unit.Percentage(5);
                settings.SettingsCommandButton.NewButton.Text = Resources.Resource.AddNew;
                settings.CommandColumn.ShowNewButtonInHeader = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFilterRow = true;
                settings.SettingsBehavior.AllowSelectByRowClick = true;
                settings.CommandColumn.ShowEditButton = true;
                settings.SettingsCommandButton.EditButton.Text = Resources.Resource.Update;
                settings.Settings.ShowFooter = true;
                settings.SettingsBehavior.AllowFocusedRow = true;
                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                settings.Columns.Add(column =>
                {
                    column.FieldName = "ID";
                    column.SetColVisible(false);
                    column.EditFormSettings.Visible = DefaultBoolean.False;
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "CompanyCode";
                    column.Caption = Resources.Resource.CompanyCode;
                    column.Width = Unit.Percentage(20);

                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "CompanyName";
                    column.Caption = Resources.Resource.CompanyName;
                    column.Width = Unit.Percentage(20);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Status";
                    column.Caption = Resources.Resource.Enabled;
                    column.Width = Unit.Percentage(10);
                    column.ColumnType = MVCxGridViewColumnType.CheckBox;
                }
                );

            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }

            grid.Bind(Model).Render();
            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;

        case "SARequestList":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvSARequestList";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "SA", Action = "DocumentRequestedPartial", OrderCode = ViewBag.OrderCode, BeginDate = ViewBag.BeginDate, EndDate = ViewBag.EndDate };

                            settings.Width = Unit.Percentage(100);

                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ID";
                                column.SetColVisible(false);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "OrderCode";
                                column.Caption = Resources.Resource.OrderCode;
                                column.Width = Unit.Percentage(10);
                                column.CellStyle.CssClass = "tCenter";
                                column.EditFormSettings.Visible = DefaultBoolean.False;
                                column.SetDataItemTemplateContent(c =>
                                {
                                    string url = "";
                                    url = FEA_ITS_Site.Helper.Ultilities.Root + "/SA/Application?Type=1&ID=" + DataBinder.Eval(c.DataItem, "ID") + "&TypeUser=admin','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode");

                                    ViewContext.Writer.Write(
                                        "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"SetModalStyle('','','" + url + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "OrderType";
                                column.Caption = Resources.Resource.DocType;
                                column.Width = Unit.Percentage(10);
                                column.GroupIndex = 0;


                                column.ColumnType = MVCxGridViewColumnType.ComboBox;
                                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                                comboBox.DataSource = new FEA_BusinessLogic.WFDocumentTypeManager().GetItems(1);
                                comboBox.TextField = "Description";
                                comboBox.ValueField = "DocumentTypeName";
                                comboBox.ValueType = typeof(string);

                                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                                comboBox.DropDownStyle = DropDownStyle.DropDown;
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Creator";
                                column.Caption = Resources.Resource.Creator;
                                column.Width = Unit.Percentage(10);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Department";
                                column.Caption = Resources.Resource.Department;
                                column.Width = Unit.Percentage(15);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Reason";
                                column.Caption = Resources.Resource.Reason;
                                column.Width = Unit.Percentage(20);
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CreateDate";
                                column.Caption = Resources.Resource.CreateDate;
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.DateEdit;

                                DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                                dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                                dateEdit.DisplayFormatInEditMode = true;
                                dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ProcessPerson";
                                column.Caption = Resources.Resource.ProcessPerson;
                                column.Width = Unit.Percentage(10);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ConfirmDate";
                                column.Caption = Resources.Resource.Confirm;
                                column.Width = Unit.Percentage(10);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Status";
                                column.Caption = Resources.Resource.Status;
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.ComboBox;

                                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                                comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetStatusList();
                                comboBox.TextField = "Value";
                                comboBox.ValueField = "Key";

                                comboBox.ValueType = typeof(int);

                                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                                comboBox.DropDownStyle = DropDownStyle.DropDown;

                            });

                            settings.Settings.ShowFilterRowMenu = true;
                            settings.Settings.ShowFilterRow = true;
                            settings.Settings.ShowFooter = true;
                            settings.Settings.ShowGroupPanel = true;


                            settings.PreRender = (sender, e) =>
                            {
                                ((MVCxGridView)sender).CollapseAll();
                            };
                        });


            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["EditSuccess"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-success" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditSuccess"])
                </div>
            }
            break;
        //---------------------


        case "GARequestList":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvGARequestList";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "GA", Action = "DocumentGARequestedPartial", OrderCode = ViewBag.OrderCode, BeginDate = ViewBag.BeginDate, EndDate = ViewBag.EndDate };
                            settings.Width = Unit.Percentage(100);

                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ID";
                                column.SetColVisible(false);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "OrderCode";
                                column.Caption = Resources.Resource.OrderCode;
                                column.Width = Unit.Percentage(10);
                                column.CellStyle.CssClass = "tCenter";
                                column.EditFormSettings.Visible = DefaultBoolean.False;
                                column.SetDataItemTemplateContent(c =>
                                {
                                    string url = "";
                                    url = FEA_ITS_Site.Helper.Ultilities.Root + "/GA/Index?Type=1&ID=" + DataBinder.Eval(c.DataItem, "ID") + "&TypeUser=admin','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode");

                                    ViewContext.Writer.Write(
                                        "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"SetModalStyle('','','" + url + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "OrderType";
                                column.Caption = Resources.Resource.DocType;
                                column.Width = Unit.Percentage(10);
                                column.GroupIndex = 0;


                                column.ColumnType = MVCxGridViewColumnType.ComboBox;
                                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                                comboBox.DataSource = new FEA_BusinessLogic.WFDocumentTypeManager().GetItems(1);
                                comboBox.TextField = "Description";
                                comboBox.ValueField = "DocumentTypeName";
                                comboBox.ValueType = typeof(string);

                                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                                comboBox.DropDownStyle = DropDownStyle.DropDown;
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Creator";
                                column.Caption = Resources.Resource.Creator;
                                column.Width = Unit.Percentage(10);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Department";
                                column.Caption = Resources.Resource.Department;
                                column.Width = Unit.Percentage(15);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Reason";
                                column.Caption = Resources.Resource.Reason;
                                column.Width = Unit.Percentage(20);
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CreateDate";
                                column.Caption = Resources.Resource.CreateDate;
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.DateEdit;

                                DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                                dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                                dateEdit.DisplayFormatInEditMode = true;
                                dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ProcessPerson";
                                column.Caption = Resources.Resource.ProcessPerson;
                                column.Width = Unit.Percentage(10);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ConfirmDate";
                                column.Caption = Resources.Resource.Confirm;
                                column.Width = Unit.Percentage(10);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Status";
                                column.Caption = Resources.Resource.Status;
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.ComboBox;

                                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                                comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetStatusList();
                                comboBox.TextField = "Value";
                                comboBox.ValueField = "Key";

                                comboBox.ValueType = typeof(int);

                                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                                comboBox.DropDownStyle = DropDownStyle.DropDown;

                            });

                            settings.Settings.ShowFilterRowMenu = true;
                            settings.Settings.ShowFilterRow = true;
                            settings.Settings.ShowFooter = true;
                            settings.Settings.ShowGroupPanel = true;


                            settings.PreRender = (sender, e) =>
                            {
                                ((MVCxGridView)sender).CollapseAll();
                            };
                        });


            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["EditSuccess"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-success" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditSuccess"])
                </div>
            }
            break;

        #region "Jason - DocType management"


        case "doc_type_partial":
            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "gvListDocType";
                settings.KeyFieldName = "DocumentTypeID";
                settings.CallbackRouteValues = new { Controller = "WorkflowManagement", Action = "EditModesPartial" };
                settings.CustomActionRouteValues = new { Controller = "WorkflowManagement", Action = "ChangeEditModePartial" };
                settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "WorkflowManagement", Action = "EditModesAddNewPartial" };
                settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "WorkflowManagement", Action = "EditModesUpdatePartial" };
                settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "WorkflowManagement", Action = "EditModesDeletePartial" };
                settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
                settings.SettingsBehavior.ConfirmDelete = true;
                settings.Width = Unit.Percentage(100);

                settings.CommandColumn.Visible = true;
                settings.CommandColumn.Width = Unit.Percentage(10);

                settings.CommandColumn.ShowNewButton = true;
                settings.CommandColumn.ShowDeleteButton = true;
                settings.CommandColumn.ShowEditButton = true;


                settings.Columns.Add("DocumentTypeName", "Document Name").Width = Unit.Percentage(10);
                settings.Columns.Add("Description").Width = Unit.Percentage(20);

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Temp1";
                    column.Caption = Resources.Resource.SQLSatement;
                    column.Width = Unit.Percentage(40);

                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Parameter";
                    column.Caption = Resources.Resource.Parameter;
                    column.Width = Unit.Percentage(20);

                });

                //settings.Columns.Add("Temp1", Resources.Resource.Condition).Width = 400;

                settings.SetEditFormTemplateContent(c =>
                {
                    Html.DevExpress().Label(
                                            edtSettings =>
                                            {
                                                edtSettings.ControlStyle.CssClass = "label";
                                                edtSettings.Text = "Document Name:";
                                                edtSettings.AssociatedControlName = "DocumentTypeName";
                                            }
                                        )
                                        .Render();
                    Html.DevExpress().TextBox(
                        edtSettings =>
                        {
                            edtSettings.Name = "DocumentTypeName";
                            edtSettings.ControlStyle.CssClass = "editor";
                            edtSettings.ShowModelErrors = true;
                            edtSettings.Width = 400;
                        }
                    )
                    .Bind(DataBinder.Eval(c.DataItem, "DocumentTypeName"))
                    .Render();
                    ViewContext.Writer.Write(
                        "</div>" +
                        "</br>"
                    );


                    Html.DevExpress().Label(
                                            edtSettings =>
                                            {
                                                edtSettings.ControlStyle.CssClass = "label";
                                                edtSettings.Text = "Description:";
                                                edtSettings.AssociatedControlName = "Description";
                                            }
                                        )
                                        .Render();
                    Html.DevExpress().TextBox(
                        edtSettings =>
                        {
                            edtSettings.Name = "Description";
                            edtSettings.ControlStyle.CssClass = "editor";
                            edtSettings.ShowModelErrors = true;
                            edtSettings.Width = 400;
                        }
                    )
                    .Bind(DataBinder.Eval(c.DataItem, "Description"))
                    .Render();
                    ViewContext.Writer.Write(
                        "</div>" +
                        "</br>"
                    );


                    Html.DevExpress().Label(
                        edtSettings =>
                        {
                            edtSettings.ControlStyle.CssClass = "Temp1";
                            edtSettings.Text = Resources.Resource.Condition;
                            edtSettings.AssociatedControlName = "Temp1";
                        }
                    )
                    .Render();
                    Html.DevExpress().Memo(
                        edtSettings =>
                        {
                            edtSettings.Name = "Temp1";
                            edtSettings.ControlStyle.CssClass = "editor";
                            edtSettings.ShowModelErrors = true;
                            edtSettings.Width = Unit.Percentage(100);
                            edtSettings.Height = 100;
                        }
                    )
                    .Bind(DataBinder.Eval(c.DataItem, "Temp1"))
                    .Render();
                    ViewContext.Writer.Write(
                        "</div>" +
                        "</br>"
                    );




                    Html.DevExpress().Label(
                                            edtSettings =>
                                            {
                                                edtSettings.ControlStyle.CssClass = "label";
                                                edtSettings.Text = Resources.Resource.Parameter;
                                                edtSettings.AssociatedControlName = "Parameter";
                                            }
                                        )
                                        .Render();
                    Html.DevExpress().TextBox(
                        edtSettings =>
                        {
                            edtSettings.Name = "Parameter";
                            edtSettings.ControlStyle.CssClass = "editor";
                            edtSettings.ShowModelErrors = true;
                            edtSettings.Width = Unit.Percentage(100); ;
                        }
                    )
                    .Bind(DataBinder.Eval(c.DataItem, "Parameter"))
                    .Render();

                    ViewContext.Writer.Write(
                                            "</div>" +
                                            "</br>"
                                        );
                    Html.DevExpress().Button(
                        btnSettings =>
                        {
                            btnSettings.Name = "btnUpdateDocumentTypename";
                            btnSettings.ControlStyle.CssClass = "button";
                            btnSettings.Text = "Update";
                            btnSettings.ClientSideEvents.Click = "function(s, e){gvListDocType.UpdateEdit(); }";

                        }
                    )
                    .Render();
                    Html.DevExpress().Button(
                        btnSettings =>
                        {
                            btnSettings.Name = "btnCancel";
                            btnSettings.ControlStyle.CssClass = "button";
                            btnSettings.Text = "Cancel";
                            btnSettings.ClientSideEvents.Click = "function(s, e){ gvListDocType.CancelEdit(); }";
                        }
                    )
                    .Render();


                });
                settings.SettingsDetail.ShowDetailRow = true;
                settings.Settings.ShowFooter = true;

                settings.SettingsBehavior.AllowFocusedRow = true;

                settings.SetDetailRowTemplateContent(c =>
                {
                    ViewContext.Writer.Write(
                        "Node(s) of Document Type: <strong>" + DataBinder.Eval(c.DataItem, "DocumentTypeName") + "</strong>" + Html.ActionLink("Manager Node(s)", "Index", "Node", new { @sDocTypeID = DataBinder.Eval(c.DataItem, "DocumentTypeID") }, new { @class = "btn btn-yellow btn-xs fRight" })
                    );
                    Html.RenderAction("NodeListPartial", new { DocumentTypeID = DataBinder.Eval(c.DataItem, "DocumentTypeID") });
                });
                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;


        case "node_doctype_list_grid":
            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "detailGrid_" + ViewData["DocumentTypeID"];
                settings.KeyFieldName = "NodeID";
                settings.CallbackRouteValues = new { Controller = "WorkflowManagement", Action = "NodeListPartial", DocumentTypeID = ViewData["DocumentTypeID"] };
                settings.Width = Unit.Percentage(100);
                settings.CommandColumn.Width = Unit.Percentage(20);
                settings.CommandColumn.ShowNewButton = true;
                settings.CommandColumn.ShowDeleteButton = true;
                settings.CommandColumn.ShowEditButton = true;

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Sequence";
                    column.Caption = "Index";
                    column.CellStyle.CssClass = "tCenter";
                    column.Width = Unit.Percentage(10);
                });

                settings.Columns.Add("Temp1", "Description").Width = Unit.Percentage(80);
                settings.Columns.Add(column =>
                {
                    column.Caption = "#";
                    column.SetDataItemTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(
                            "<a href='#responsive' data-toggle='modal' onclick=\"SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + "/NodeDetail/Index?NodeID=" + DataBinder.Eval(c.DataItem, "NodeID") + "','Detail of Node: " + DataBinder.Eval(c.DataItem, "Sequence") + "')\">View Detail</a>"
                        );
                    });

                    column.CellStyle.CssClass = "tCenter";
                    column.Width = Unit.Percentage(20);
                    column.SetColVisible(true);
                    column.UnboundType = DevExpress.Data.UnboundColumnType.String;
                    column.EditFormSettings.Visible = DefaultBoolean.False;
                });
                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }

            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }

            break;

        case "node_list_grid":
            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "detailGrid_" + ViewData["DocumentTypeID"];
                settings.KeyFieldName = "NodeID";
                settings.CallbackRouteValues = new { Controller = "Node", Action = "EditModesPartial", DoctypeID = Request.QueryString["sDocTypeID"] };
                settings.CustomActionRouteValues = new { Controller = "Node", Action = "ChangeEditModePartial" };
                settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Node", Action = "EditModesAddNewPartial", DoctypeID = Request.QueryString["sDocTypeID"] };
                settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Node", Action = "EditModesUpdatePartial", DoctypeID = Request.QueryString["sDocTypeID"] };
                settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Node", Action = "EditModesDeletePartial", DoctypeID = Request.QueryString["sDocTypeID"] };
                settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
                settings.SettingsBehavior.ConfirmDelete = true;
                settings.Width = Unit.Percentage(100);
                settings.CommandColumn.Visible = true;
                settings.CommandColumn.Width = Unit.Percentage(10);
                settings.CommandColumn.ShowNewButton = true;
                settings.CommandColumn.ShowDeleteButton = true;
                settings.CommandColumn.ShowEditButton = true;

                settings.SettingsDetail.ShowDetailRow = false;
                settings.Settings.ShowFooter = true;
                settings.SettingsBehavior.AllowFocusedRow = true;
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Sequence";
                    column.Caption = "Index";
                    column.CellStyle.CssClass = "tCenter";
                    column.Width = Unit.Percentage(10);
                });

                settings.Columns.Add("Temp1", "Description").Width = Unit.Percentage(70);
                settings.Columns.Add("DocumentTypeID").Visible = false;

                settings.Columns.Add(column =>
                {
                    column.Caption = "#";
                    column.SetDataItemTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(
                            "<a href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + "/NodeDetail/Index?NodeID=" + DataBinder.Eval(c.DataItem, "NodeID") + "','Detail of Node: " + DataBinder.Eval(c.DataItem, "Sequence") + "')\">View Detail</a>"
                        );
                    });

                    column.CellStyle.CssClass = "tCenter";
                    column.Width = Unit.Percentage(20);
                    column.SetColVisible(true);
                    column.UnboundType = DevExpress.Data.UnboundColumnType.String;
                    column.EditFormSettings.Visible = DefaultBoolean.False;
                });
                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }


            grid.Bind(Model).GetHtml();
            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;

        case "node_detail_list_grid":

            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "gvEditing";
                settings.KeyFieldName = "NodeDetailID";
                settings.CallbackRouteValues = new { Controller = "NodeDetail", Action = "EditModesPartial", NodeID = Request.QueryString["NodeID"] };
                settings.CustomActionRouteValues = new { Controller = "NodeDetail", Action = "ChangeEditModePartial", NodeID = Request.QueryString["NodeID"] };
                settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "NodeDetail", Action = "EditModesAddNewPartial", NodeID = Request.QueryString["NodeID"] };
                settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "NodeDetail", Action = "EditModesUpdatePartial", NodeID = Request.QueryString["NodeID"] };
                settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "NodeDetail", Action = "EditModesDeletePartial", NodeID = Request.QueryString["NodeID"] };
                settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
                settings.SettingsBehavior.ConfirmDelete = true;
                settings.Width = Unit.Percentage(100);

                settings.CommandColumn.Visible = true;
                settings.CommandColumn.Width = Unit.Percentage(5);

                settings.CommandColumn.ShowNewButton = true;
                settings.CommandColumn.ShowDeleteButton = true;
                settings.CommandColumn.ShowEditButton = true;
                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                //settings.Columns.Add("CostCenter.Remark", "Department").Width = Unit.Percentage(30);

                //-- Added by Steven 2015-10-09 -- Added factory ID
                settings.Columns.Add(column =>
                {
                    column.FieldName = "CostCenter.CompanyCode";
                    column.Caption = "Factory";
                    column.Width = Unit.Percentage(10);
                    column.GroupIndex = 0;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "CostCenterCode";
                    column.Caption = "Department";
                    column.Width = Unit.Percentage(10);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;
                    var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
                    comboBoxProperties.DataSource = new FEA_BusinessLogic.CodeCenterManager().GetItems(1);
                    comboBoxProperties.TextField = "Remark";
                    comboBoxProperties.ValueField = "CostCenterCode";
                    comboBoxProperties.ValueType = typeof(int);

                    comboBoxProperties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    comboBoxProperties.DropDownStyle = DropDownStyle.DropDown;
                });


                settings.Columns.Add(column =>
                {
                    column.FieldName = "ApproverID";
                    column.Caption = "Approver";
                    column.Width = Unit.Percentage(10);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;
                    var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
                    comboBoxProperties.DataSource = new FEA_BusinessLogic.UserManager().GetAdminUser();
                    comboBoxProperties.TextField = "UserName";
                    comboBoxProperties.ValueField = "UserID";
                    comboBoxProperties.ValueType = typeof(int);
                    comboBoxProperties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    comboBoxProperties.DropDownStyle = DropDownStyle.DropDown;
                });

                settings.Columns.Add("Condition").Width = Unit.Percentage(70);


                settings.Settings.ShowFooter = true;


                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFilterRow = true;

                settings.SettingsBehavior.AllowFocusedRow = true;
            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;


        case "site_function_list": // TreeList for Sitefunction
            var treeList = Html.DevExpress().TreeList(
                settings =>
                {
                    settings.Name = "site_function_treeList";
                    settings.CallbackRouteValues = new { Controller = "SiteFunction", Action = "DataBindingPartial" };
                    settings.Width = Unit.Percentage(100);
                    settings.SettingsBehavior.AllowFocusedNode = true;
                    settings.AutoGenerateColumns = false;
                    settings.KeyFieldName = "SiteFunctionID";
                    settings.ParentFieldName = "ParentID";
                    settings.RootValue = 0;

                    settings.Columns.Add(
                        column =>
                        {
                            column.FieldName = "SiteFunctionName";
                            column.Caption = "Name";
                            column.Width = Unit.Percentage(20);
                            //column.SetDataCellTemplateContent(c =>
                            //{
                            //    ViewContext.Writer.Write(
                            //        "<a href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + "/NodeDetail/Index?NodeID=" + DataBinder.Eval(c.DataItem, "NodeID") + "','Detail of Node: " + DataBinder.Eval(c.DataItem, "Sequence") + "')\">View Detail</a>"
                            //    );
                            //});
                        }
                    );
                    settings.Columns.Add(
                        column =>
                        {
                            column.FieldName = "SiteFunctionNameEN";
                            column.Caption = "English Name";
                            column.Width = Unit.Percentage(20);
                        }
                    );
                    settings.Columns.Add(
                        column =>
                        {
                            column.FieldName = "URL";
                            column.Caption = "Link Address";
                            column.Width = Unit.Percentage(30);
                        }
                    );

                    settings.Columns.Add(
                        column =>
                        {
                            column.FieldName = "Enabled";
                            column.Caption = "Enabled";
                            column.Width = Unit.Percentage(5);
                            column.ColumnType = MVCxTreeListColumnType.CheckBox;
                        }
                    );

                    settings.Columns.Add(
                        column =>
                        {
                            column.FieldName = "Order";
                            column.Caption = "Order";
                            column.Width = Unit.Percentage(5);
                        }
                    );
                    settings.Columns.Add(
                        column =>
                        {
                            column.FieldName = "IconCssClass";
                            column.Caption = "Icon";
                            column.Width = Unit.Percentage(10);
                        }
                    );


                    settings.CommandColumn.Visible = true;
                    settings.CommandColumn.ShowNewButtonInHeader = true;
                    settings.CommandColumn.NewButton.Visible = true;
                    settings.CommandColumn.DeleteButton.Visible = true;
                    settings.CommandColumn.EditButton.Visible = true;

                    settings.SettingsEditing.AddNewNodeRouteValues = new { Controller = "SiteFunction", Action = "InlineEditingAddNewPostPartial" };
                    settings.SettingsEditing.UpdateNodeRouteValues = new { Controller = "SiteFunction", Action = "InlineEditingUpdatePostPartial" };
                    settings.SettingsEditing.NodeDragDropRouteValues = new { Controller = "SiteFunction", Action = "InlineEditingMovePostPartial" };
                    settings.SettingsEditing.DeleteNodeRouteValues = new { Controller = "SiteFunction", Action = "InlineEditingDeletePostPartial" };
                    settings.SettingsEditing.ConfirmDelete = true;
                    settings.CommandColumn.NewButton.Text = "Create";


                    settings.SettingsBehavior.ExpandCollapseAction = TreeListExpandCollapseAction.NodeDblClick;
                    settings.SettingsCookies.StoreExpandedNodes = true;

                    settings.ClientLayout = (s, e) =>
                    {
                        if (e.LayoutMode == ClientLayoutMode.Loading)
                        {
                            if (Session["TreeListState"] != null)
                                e.LayoutData = (string)Session["TreeListState"];
                        }
                        else
                            Session["TreeListState"] = e.LayoutData;
                    };

                    settings.PreRender = (sender, e) =>
                    {
                        if (Session["TreeListState"] == null)
                            ((MVCxTreeList)sender).ExpandToLevel(2);
                    };
                    settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                }

            );
            if (ViewData["EditNodeError"] != null)
            {
                treeList.SetEditErrorText((string)ViewData["EditNodeError"]);

            }
            treeList.Bind(Model).GetHtml();
            if (ViewData["DeleteNodeError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteNodeError"])
                </div>
            }
            break;

        case "user_group_list_grid":
            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "gvUserGroup";
                settings.KeyFieldName = "UserGroupID";
                settings.CallbackRouteValues = new { Controller = "UserGroup", Action = "EditModesPartial" };

                settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
                settings.SettingsBehavior.ConfirmDelete = true;
                settings.Width = Unit.Percentage(100);

                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                settings.Columns.Add(column =>
                {
                    column.FieldName = "UserGroupID";
                    column.Caption = "ID";
                    column.Width = Unit.Percentage(10);
                    column.CellStyle.CssClass = "tCenter";
                    column.EditFormSettings.Visible = DefaultBoolean.False;
                });


                settings.Columns.Add(column =>
                {
                    column.FieldName = "UserGroupName";
                    column.Caption = "Name";
                    column.Width = Unit.Percentage(50);
                });

                settings.Columns.Add(
                    column =>
                    {
                        column.FieldName = "Enabled";
                        column.Caption = "Enabled";
                        column.Width = Unit.Percentage(5);
                        column.ColumnType = MVCxGridViewColumnType.CheckBox;
                    }
                );

                settings.Columns.Add(column =>
                {
                    column.Caption = "Permission";
                    column.SetDataItemTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(
                            "<a href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"SetPermission(" + DataBinder.Eval(c.DataItem, "UserGroupID") + ")\">View</a>"
                        );
                    });

                    column.CellStyle.CssClass = "tCenter";
                    column.Width = Unit.Percentage(20);
                    column.SetColVisible(true);
                    column.UnboundType = DevExpress.Data.UnboundColumnType.String;
                    column.EditFormSettings.Visible = DefaultBoolean.False;
                });


                settings.CommandColumn.Visible = true;
                settings.CommandColumn.Width = Unit.Percentage(20);

                settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "UserGroup", Action = "EditModesAddNewPartial" };
                settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "UserGroup", Action = "EditModesUpdatePartial" };
                settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "UserGroup", Action = "EditModesDeletePartial" };

                settings.CommandColumn.ShowNewButton = true;
                settings.CommandColumn.ShowDeleteButton = true;
                settings.CommandColumn.ShowEditButton = true;

                settings.Settings.ShowFooter = true;
                settings.SettingsBehavior.AllowFocusedRow = true;
            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;

        case "SiteFunction_UserGroup_TreeView":
            Html.DevExpress().TreeView(
                  settings =>
                  {
                      settings.Name = "tvGroupPermission";
                      settings.AllowCheckNodes = true;
                      settings.AllowSelectNode = true;
                      settings.CheckNodesRecursive = false;
                      settings.ShowExpandButtons = false;

                      settings.EnableHotTrack = true;
                      settings.EnableAnimation = true;

                      settings.ShowTreeLines = false;

                      settings.Width = Unit.Percentage(100);

                      settings.ClientSideEvents.Init = "function(s, e) { OnCheckedChanged(s, e, 'Init'); }";
                      settings.ClientSideEvents.CheckedChanged = "function(s, e) { OnCheckedChanged(s, e, 'CheckedChanged'); }";

                      FEA_ITS_Site.Controllers.SiteFunctionUserGroupController.CreateTreeViewNodesRecursive(new FEA_BusinessLogic.SiteFunctionManager().GetItems(1), (List<FEA_BusinessLogic.SiteFunction_UserGroup>)Model, settings.Nodes, 0);
                      settings.PreRender = (source, e) =>
                      {
                          ASPxTreeView treeView = (ASPxTreeView)source;
                          treeView.ExpandToDepth(2);
                      };
                  }).GetHtml();
            break;

        // Edit account
        case "account_list_grid":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvAccount";
                            settings.KeyFieldName = "UserID";
                            settings.CallbackRouteValues = new { Controller = "Account", Action = "EditModesPartial" };

                            settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
                            settings.SettingsPopup.EditForm.Width = 800;
                            settings.SettingsPopup.EditForm.AllowResize = true;
                            settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;

                            settings.SettingsBehavior.ConfirmDelete = true;
                            settings.Width = Unit.Percentage(100);

                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UserCodeID";
                                column.Caption = "ID";
                                column.Width = Unit.Percentage(5);
                                column.CellStyle.CssClass = "tCenter";
                                column.EditFormSettings.Visible = DefaultBoolean.False;
                            });


                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UserName";
                                column.Caption = "Name";
                                column.Width = Unit.Percentage(15);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UserNameEN";
                                column.Caption = "English Name";
                                column.Width = Unit.Percentage(15);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CostCenterCode";
                                column.Caption = "Department";
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.ComboBox;

                                var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
                                comboBoxProperties.DataSource = new FEA_BusinessLogic.CodeCenterManager().GetItems(1);
                                comboBoxProperties.TextField = "Remark";
                                comboBoxProperties.ValueField = "CostCenterCode";
                                comboBoxProperties.ValueType = typeof(int);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UserPosstion";
                                column.Caption = "Position";
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.ComboBox;

                                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                                comboBox.DataSource = new FEA_BusinessLogic.UserPositionManager().GetItems(1);
                                comboBox.TextField = "PositionName";
                                comboBox.ValueField = "PositionID";
                                comboBox.ValueType = typeof(string);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UserGroupID";
                                column.Caption = "Group";
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.ComboBox;

                                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                                comboBox.DataSource = new FEA_BusinessLogic.UserGroupManager().GetItems(1);
                                comboBox.TextField = "UserGroupName";
                                comboBox.ValueField = "UserGroupID";
                                comboBox.ValueType = typeof(int);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UserEmail";
                                column.Caption = "Email";
                                column.Width = Unit.Percentage(15);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UserPhone";
                                column.Caption = "Phone";
                                column.Width = Unit.Percentage(5);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UserExpired";
                                column.Caption = "Expired Date";
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.DateEdit;

                                DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                                dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false);
                                dateEdit.DisplayFormatInEditMode = true;
                                dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false);
                            });

                            settings.CommandColumn.Visible = true;
                            settings.CommandColumn.Width = Unit.Percentage(5);

                            settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Account", Action = "EditModesUpdatePartial" };
                            settings.CommandColumn.ShowEditButton = true;

                            settings.CommandColumn.ShowSelectCheckbox = true;
                            settings.SettingsBehavior.AllowSelectSingleRowOnly = true;

                            settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                            settings.Settings.ShowFilterRowMenu = true;
                            settings.Settings.ShowFilterRow = true;

                            settings.Settings.ShowGroupPanel = true;
                            settings.Settings.ShowFooter = true;
                            //   settings.SettingsBehavior.AllowFocusedRow = true;

                        });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["EditSuccess"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-success" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditSuccess"])
                </div>
            }
            break;

        case "item_detail_list_grid":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvItemDetails";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "DeviceRegistration", Action = "GetListItemDetailPartial" };

                            settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "DeviceRegistration", Action = "EditModesDeleteItemDetail", ShowCommand = ViewData["ShowCommand"] == null ? false : Convert.ToBoolean(ViewData["ShowCommand"]) };
                            settings.SettingsBehavior.ConfirmDelete = false;

                            settings.Width = Unit.Percentage(100);

                            settings.CommandColumn.Visible = ViewData["ShowCommand"] == null ? false : Convert.ToBoolean(ViewData["ShowCommand"]);
                            settings.CommandColumn.Width = Unit.Percentage(10);

                            settings.CommandColumn.ShowDeleteButton = true;
                            settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;

                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                            settings.ClientSideEvents.Init = "OnSetTotalRow"; //"function(s, e) { alert(s.cpVisibleRowCount); }";

                            settings.ClientSideEvents.EndCallback = "OnEndGridCallback";  // this function throw when we use the delete,update,insert data to Grid

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ItemName";
                                column.Caption = @Resources.Resource.ItemType;
                                column.Width = Unit.Percentage(15);

                            });


                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ItemDetailName";
                                column.Caption = @Resources.Resource.Using;
                                column.Width = Unit.Percentage(25);
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Des";
                                column.Caption = Resources.Resource.Description;
                                column.Width = Unit.Percentage(25);


                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ReasonItemDetailName";
                                column.Caption = Resources.Resource.Reason;
                                column.Width = Unit.Percentage(35);


                            });

                            settings.CustomJSProperties = (s, e) => // Custom field returned
                            {
                                //Return Row count
                                MVCxGridView Current = (MVCxGridView)s;
                                e.Properties["cpVisibleRowCount"] = Current.VisibleRowCount;
                            };

                            settings.Settings.ShowFooter = false;

                        });
            grid.Bind(Model).GetHtml();

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditError"])
                </div>
            }


            break;

        case "device_registration_list_grid":
            grid = Html.DevExpress().GridView(
             settings =>
             {
                 settings.Name = "gvDeviceRegistration";
                 settings.KeyFieldName = "ID";
                 settings.CallbackRouteValues = new { Controller = "DeviceRegistration", Action = "EditModesPartial" };

                 settings.Width = Unit.Percentage(100);

                 settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "OrderCode";
                     column.Caption = Resources.Resource.OrderCode;
                     column.Width = Unit.Percentage(10);
                     column.CellStyle.CssClass = "tCenter";
                     column.EditFormSettings.Visible = DefaultBoolean.False;
                     column.SetDataItemTemplateContent(c =>
                     {
                         ViewContext.Writer.Write(
                             "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + "/DeviceRegistration/Index?DeviceRegID=" + DataBinder.Eval(c.DataItem, "ID") + "&TypeUser=User','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode") + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                         );
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Reason";
                     column.Caption = Resources.Resource.Reason;
                     column.Width = Unit.Percentage(20);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Description";
                     column.Caption = Resources.Resource.Description;
                     column.Width = Unit.Percentage(25);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreateDate";
                     column.Caption = Resources.Resource.CreateDate;
                     column.Width = Unit.Percentage(15);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "LastUpdateDate";
                     column.Caption = Resources.Resource.LastUpdateDate;


                     column.Width = Unit.Percentage(15);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                 });
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Status";
                     column.Caption = Resources.Resource.Status;
                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.ComboBox;

                     var comboBox = column.PropertiesEdit as ComboBoxProperties;
                     comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetStatusList();
                     comboBox.TextField = "Value";
                     comboBox.ValueField = "Key";

                     comboBox.ValueType = typeof(int);

                     comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                     comboBox.DropDownStyle = DropDownStyle.DropDown;

                 });

                 settings.CommandColumn.Visible = true;
                 settings.CommandColumn.Width = Unit.Percentage(5);

                 settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "DeviceRegistration", Action = "EditModesDeletePartial" };
                 settings.CommandColumn.ShowDeleteButton = true;
                 settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;
                 settings.SettingsBehavior.ConfirmDelete = true;


                 // settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                 settings.Settings.ShowFilterRowMenu = true;
                 settings.Settings.ShowFilterRow = true;

                 settings.Settings.ShowGroupPanel = true;
                 settings.Settings.ShowFooter = true;

             });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;

        case "approve_order_grid":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvApprovedOrder";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "DeviceRegistration", Action = "ApprovePartial" };
                            settings.Width = Unit.Percentage(100);
                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                            settings.SettingsBehavior.AutoExpandAllGroups = true;
                            
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "BelongGroup";
                                column.Caption = Resources.Resource.ItemGroup;
                                column.Width = Unit.Percentage(15);
                                column.GroupIndex = 0;
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "OrderCode";
                                column.Caption = Resources.Resource.OrderCode;
                                column.Width = Unit.Percentage(10);
                                column.CellStyle.CssClass = "tCenter";
                                column.EditFormSettings.Visible = DefaultBoolean.False;
                                column.SetDataItemTemplateContent(c =>
                                {
                                    string doctype = DataBinder.Eval(c.DataItem, "DocumentTypeName").ToString();
                                    string url = "";
                                    if (doctype == FEA_ITS_Site.Models.Helper.TagPrefixParameter.DEVICE_REGISTRATION)
                                        url = FEA_ITS_Site.Helper.Ultilities.Root + "/DeviceRegistration/Index?DeviceRegID=" + DataBinder.Eval(c.DataItem, "ID") + "&TypeUser=admin','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode");
                                    else if (doctype == FEA_ITS_Site.Models.Helper.TagPrefixParameter.HARD_REGISTRATION)
                                        url = FEA_ITS_Site.Helper.Ultilities.Root + "/HardwareRequirement/Index?ID=" + DataBinder.Eval(c.DataItem, "ID") + "&TypeUser=admin','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode");

                                    ViewContext.Writer.Write(

                                        "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"SetModalStyle('','','" + url + "','Review','false')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"

                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "DocumentTypeName";
                                column.Caption = Resources.Resource.DocType;
                                column.Width = Unit.Percentage(10);

                                column.ColumnType = MVCxGridViewColumnType.ComboBox;
                                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                                comboBox.DataSource = new FEA_BusinessLogic.WFDocumentTypeManager().GetItems(1);
                                comboBox.TextField = "Description";
                                comboBox.ValueField = "DocumentTypeName";
                                comboBox.ValueType = typeof(string);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Creator";
                                column.Caption = Resources.Resource.Sender;
                                column.Width = Unit.Percentage(13);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CostCenter";
                                column.Caption = Resources.Resource.Department;
                                column.Width = Unit.Percentage(10);
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Reason";
                                column.Caption = Resources.Resource.Reason;
                                column.Width = Unit.Percentage(30);
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Create_Date";
                                column.Caption = Resources.Resource.CreateDate;
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.DateEdit;

                                DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                                dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                                dateEdit.DisplayFormatInEditMode = true;
                                dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ProcessedBy";
                                column.Caption = Resources.Resource.ProcessingPerson;
                                column.Width = Unit.Percentage(15);
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CompleteEstimateDate";
                                column.Caption = Resources.Resource.CompletedEstimateDate;
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.DateEdit;

                                DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                                dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, false);
                                dateEdit.DisplayFormatInEditMode = true;
                                dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, false);

                            });
                            //settings.SettingsDetail.ShowDetailButtons = true;
                            //settings.SettingsDetail.ShowDetailRow = true;
                            //settings.SetDetailRowTemplateContent(c =>
                            //{
                            //    Html.RenderAction("Index", "DeviceRegistration", new {DeviceRegID = DataBinder.Eval(c.DataItem, "ID"),TypeUser = "admin"});
                            //});

                            settings.HtmlRowPrepared = (s, e) =>
                            {
                                if (e.RowType != GridViewRowType.Data) return;


                                if (e.GetValue("ProcessedBy") != null && e.GetValue("ProcessedBy").ToString() != "")
                                {
                                    e.Row.BackColor = System.Drawing.Color.Azure;
                                    //e.Row.ForeColor = System.Drawing.Color.Red;
                                }

                            };

                            settings.CommandColumn.Visible = true;
                            settings.CommandColumn.Width = Unit.Percentage(5);

                            settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Account", Action = "EditModesUpdatePartial" };
                            settings.CommandColumn.ShowEditButton = false;

                            settings.CommandColumn.ShowSelectCheckbox = true;
                            settings.SettingsBehavior.AllowSelectSingleRowOnly = false;

                            settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                            settings.Settings.ShowFilterRowMenu = true;
                            settings.Settings.ShowFilterRow = true;



                            settings.Settings.ShowFooter = true;

                        });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["EditSuccess"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-success" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditSuccess"])
                </div>
            }
            break;


        #region gridview for GA Checking Approval managerment
        case "ga_approve_order_grid":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvApprovedOrder";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "GA", Action = "ApprovePartial" };

                            settings.Width = Unit.Percentage(100);

                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;


                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "OrderCode";
                                column.Caption = Resources.Resource.OrderCode;
                                column.Width = Unit.Percentage(10);
                                column.CellStyle.CssClass = "tCenter";
                                column.EditFormSettings.Visible = DefaultBoolean.False;
                                column.SetDataItemTemplateContent(c =>
                                {
                                    string doctype = DataBinder.Eval(c.DataItem, "DocumentTypeName").ToString();
                                    string url = "";
                                    if (doctype == FEA_ITS_Site.Models.Helper.TagPrefixParameter.GENERALAFFAIR)
                                        url = FEA_ITS_Site.Helper.Ultilities.Root + "/GA/Index?ID=" + DataBinder.Eval(c.DataItem, "ID") + "&TypeUser=admin','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode");

                                    ViewContext.Writer.Write(

                                        "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + url + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"

                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "DocumentTypeName";
                                column.Caption = Resources.Resource.DocType;
                                column.Width = Unit.Percentage(10);

                                column.ColumnType = MVCxGridViewColumnType.ComboBox;
                                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                                comboBox.DataSource = new FEA_BusinessLogic.WFDocumentTypeManager().GetItems(1);
                                comboBox.TextField = "Description";
                                comboBox.ValueField = "DocumentTypeName";
                                comboBox.ValueType = typeof(string);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Creator";
                                column.Caption = Resources.Resource.Sender;
                                column.Width = Unit.Percentage(13);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CostCenter";
                                column.Caption = Resources.Resource.Department;
                                column.Width = Unit.Percentage(10);
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Reason";
                                column.Caption = Resources.Resource.Reason;
                                column.Width = Unit.Percentage(30);
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Create_Date";
                                column.Caption = Resources.Resource.CreateDate;
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.DateEdit;

                                DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                                dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                                dateEdit.DisplayFormatInEditMode = true;
                                dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Technician";
                                column.Caption = Resources.Resource.ProcessingPerson;
                                column.Width = Unit.Percentage(15);
                            });

                            //settings.Columns.Add(column =>
                            //{
                            //    column.FieldName = "ConfirmDate";
                            //    column.Caption = Resources.Resource.CompletedEstimateDate;
                            //    column.Width = Unit.Percentage(10);
                            //    column.ColumnType = MVCxGridViewColumnType.DateEdit;

                            //    DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                            //    dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, false);
                            //    dateEdit.DisplayFormatInEditMode = true;
                            //    dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, false);

                            //});
                            //settings.SettingsDetail.ShowDetailButtons = true;
                            //settings.SettingsDetail.ShowDetailRow = true;
                            //settings.SetDetailRowTemplateContent(c =>
                            //{
                            //    Html.RenderAction("Index", "DeviceRegistration", new {DeviceRegID = DataBinder.Eval(c.DataItem, "ID"),TypeUser = "admin"});
                            //});

                            settings.HtmlRowPrepared = (s, e) =>
                            {
                                if (e.RowType != GridViewRowType.Data) return;


                                if (e.GetValue("Technician") != null && e.GetValue("Technician").ToString() != "")
                                {
                                    e.Row.BackColor = System.Drawing.Color.Azure;
                                    //e.Row.ForeColor = System.Drawing.Color.Red;
                                }

                            };

                            settings.CommandColumn.Visible = true;
                            settings.CommandColumn.Width = Unit.Percentage(5);

                            settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Account", Action = "EditModesUpdatePartial" };
                            settings.CommandColumn.ShowEditButton = false;

                            settings.CommandColumn.ShowSelectCheckbox = true;
                            settings.SettingsBehavior.AllowSelectSingleRowOnly = false;

                            settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                            settings.Settings.ShowFilterRowMenu = true;
                            settings.Settings.ShowFilterRow = true;



                            settings.Settings.ShowFooter = true;

                        });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["EditSuccess"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-success" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditSuccess"])
                </div>
            }
            break;
        #endregion

        #region "Hardware Requiment"
        case "item_detail_hardware_list_grid":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvItemDetails";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "HardwareRequirement", Action = "GetListItemDetailPartial", ShowCommand = Convert.ToBoolean(ViewData["ShowCommand"]) };


                            settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "HardwareRequirement", Action = "EditModesDeleteItemDetail" };
                            settings.SettingsBehavior.ConfirmDelete = false;

                            settings.Width = Unit.Percentage(200);


                            settings.CommandColumn.Visible = ViewData["ShowCommand"] == null ? false : Convert.ToBoolean(ViewData["ShowCommand"]);
                            settings.CommandColumn.Width = Unit.Percentage(5);

                            settings.CommandColumn.ShowDeleteButton = true;
                            settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;

                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                            settings.ClientSideEvents.Init = "OnSetTotalRow"; //"function(s, e) { alert(s.cpVisibleRowCount); }";

                            settings.ClientSideEvents.EndCallback = "OnEndGridCallback";  // this function throw when we use the delete,update,insert data to Grid

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ItemName";
                                column.Caption = @Resources.Resource.ItemType;
                                column.Width = Unit.Percentage(10);

                            });


                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ItemDetailName";
                                column.Caption = @Resources.Resource.Specs;
                                column.Width = Unit.Percentage(15);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UnitName";
                                column.Caption = @Resources.Resource.Unit;
                                column.Width = Unit.Percentage(5);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Quantity";
                                column.Caption = @Resources.Resource.Quantity;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "Quantity")))
                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "QuanInStock";
                                column.Caption = @Resources.Resource.QuantityInStock;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "QuanInStock")))
                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "QuanNeeded";
                                column.Caption = @Resources.Resource.QuantityNeeded;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "QuanNeeded")))
                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ToTalReceiverByDept";
                                column.Caption = Resources.Resource.ReceivedByDept;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "ToTalReceiverByDept")))
                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Price";
                                column.Caption = @Resources.Resource.Price;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "Price")))
                                    );
                                });
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Amount";
                                column.Caption = @Resources.Resource.Amount;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "Amount")))
                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "DeliveryDate";
                                column.Caption = Resources.Resource.DeliveryDate;
                                column.Width = Unit.Percentage(10);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.FormatDateString(FEA_ITS_Site.Helper.SessionManager.CurrentLang, DataBinder.Eval(c.DataItem, "DeliveryDate")))
                                    );
                                });

                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Des";
                                column.Caption = Resources.Resource.Description;
                                column.Width = Unit.Percentage(50);
                            });

                            settings.CustomJSProperties = (s, e) => // Custom field returned
                            {
                                if (ViewData["TotalAmount"] != null)
                                {
                                    e.Properties["cpTotalAmount"] = ViewData["TotalAmount"].ToString();
                                }

                                //Return Row count
                                MVCxGridView Current = (MVCxGridView)s;
                                e.Properties["cpVisibleRowCount"] = Current.VisibleRowCount;
                            };
                            settings.Settings.ShowFooter = false;


                        });
            grid.Bind((List<FEA_ITS_Site.Models.ItemInfo>)Model).GetHtml();

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditError"])
                </div>
            }
            else
            {
                <script type="text/javascript">ClearItemDetail();</script>
            }


            if (ViewData["TotalAmount"] != null)
            {
                <script type="text/javascript">SetTotalAmount(@ViewData["TotalAmount"].ToString())</script>
            }
            break;

        case "hardware_requirement_list_grid":
            grid = Html.DevExpress().GridView(
             settings =>
             {
                 settings.Name = "gvHardwareRequirement";
                 settings.KeyFieldName = "ID";
                 settings.CallbackRouteValues = new { Controller = "HardwareRequirement", Action = "EditModesPartial" };

                 settings.Width = Unit.Percentage(100);

                 settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "OrderCode";
                     column.Caption = Resources.Resource.OrderCode;
                     column.Width = Unit.Percentage(10);
                     column.CellStyle.CssClass = "tCenter";
                     column.EditFormSettings.Visible = DefaultBoolean.False;
                     column.SetDataItemTemplateContent(c =>
                     {
                         ViewContext.Writer.Write(
                             "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + "/HardwareRequirement/Index?ID=" + DataBinder.Eval(c.DataItem, "ID") + "&TypeUser=user','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode") + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                         );
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Reason";
                     column.Caption = Resources.Resource.Reason;
                     column.Width = Unit.Percentage(20);
                 });


                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreateDate";
                     column.Caption = Resources.Resource.CreateDate;
                     column.Width = Unit.Percentage(15);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CurrencyID";
                     column.Caption = Resources.Resource.CurrencyType;
                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.ComboBox;

                     var comboBox = column.PropertiesEdit as ComboBoxProperties;
                     comboBox.DataSource = new FEA_BusinessLogic.CurrencyManager().GetItems(1);
                     comboBox.TextField = "NAME";
                     comboBox.ValueField = "ID";
                     comboBox.ValueType = typeof(string);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "EstimatedAmount";
                     column.Caption = Resources.Resource.EstiamtedAmount;
                     column.Width = Unit.Percentage(10);
                     column.SetDataItemTemplateContent(c =>
                     {
                         ViewContext.Writer.Write(
                             string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "EstimatedAmount")))
                         );
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Status";
                     column.Caption = Resources.Resource.Status;
                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.ComboBox;

                     var comboBox = column.PropertiesEdit as ComboBoxProperties;
                     comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetStatusList();
                     comboBox.TextField = "Value";
                     comboBox.ValueField = "Key";
                     comboBox.ValueType = typeof(int);
                 });

                 settings.CommandColumn.Visible = true;
                 settings.CommandColumn.Width = Unit.Percentage(5);

                 settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "HardwareRequirement", Action = "EditModesDeletePartial" };
                 settings.CommandColumn.ShowDeleteButton = true;
                 settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;
                 settings.SettingsBehavior.ConfirmDelete = true;


                 // settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                 settings.Settings.ShowFilterRowMenu = true;
                 settings.Settings.ShowFilterRow = true;

                 settings.Settings.ShowGroupPanel = true;
                 settings.Settings.ShowFooter = true;

             });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;
        #endregion

        #region "Stock Region"
        case "item_detail_stockItem_list_grid":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvStockItemDetails";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "ITInventory", Action = "GetListItemDetailPartial", ShowCommand = Convert.ToBoolean(ViewData["ShowCommand"]) };

                            settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "ITInventory", Action = "EditModesDeleteItemDetail" };
                            settings.SettingsBehavior.ConfirmDelete = false;

                            settings.Width = Unit.Percentage(200);

                            settings.CommandColumn.Visible = ViewData["ShowCommand"] == null ? false : Convert.ToBoolean(ViewData["ShowCommand"]);
                            settings.CommandColumn.Width = Unit.Percentage(5);

                            settings.CommandColumn.ShowDeleteButton = true;
                            settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;

                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ItemName";
                                column.Caption = @Resources.Resource.ItemType;
                                column.Width = Unit.Percentage(15);

                            });


                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ItemDetailName";
                                column.Caption = @Resources.Resource.Specs;
                                column.Width = Unit.Percentage(15);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UnitName";
                                column.Caption = @Resources.Resource.Unit;
                                column.Width = Unit.Percentage(5);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Quantity";
                                column.Caption = @Resources.Resource.Quantity;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "Quantity")))
                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "DeliveryDate";
                                column.Caption = Resources.Resource.DeliveryDate;
                                column.Width = Unit.Percentage(10);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.FormatDateString(FEA_ITS_Site.Helper.SessionManager.CurrentLang, DataBinder.Eval(c.DataItem, "DeliveryDate")))
                                    );
                                });

                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Des";
                                column.Caption = Resources.Resource.Description;
                                column.Width = Unit.Percentage(40);
                            });

                            settings.Settings.ShowFooter = false;


                        });
            grid.Bind((List<FEA_ITS_Site.Models.ItemInfo>)Model).GetHtml();

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditError"])
                </div>
            }
            else
            {
                <script type="text/javascript">ClearItemDetail();</script>
            }

            break;

        case "stock_in_list_grid":
            grid = Html.DevExpress().GridView(
             settings =>
             {
                 settings.Name = "gvStockInGrid";
                 settings.KeyFieldName = "ID";
                 settings.CallbackRouteValues = new { Controller = "StockInEquipment", Action = "EditModesPartial" };

                 settings.Width = Unit.Percentage(100);

                 settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "OrderCode";
                     column.Caption = Resources.Resource.OrderCode;
                     column.Width = Unit.Percentage(10);
                     column.CellStyle.CssClass = "tCenter";
                     column.EditFormSettings.Visible = DefaultBoolean.False;
                     column.SetDataItemTemplateContent(c =>
                     {
                         ViewContext.Writer.Write(
                             "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + "/ITInventory/SockIn?ID=" + DataBinder.Eval(c.DataItem, "ID") + "','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode") + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                         );
                     });
                 });
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "User.UserName";
                     column.Caption = Resources.Resource.Creator;
                     column.Width = Unit.Percentage(15);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Description";
                     column.Caption = Resources.Resource.Description;
                     column.Width = Unit.Percentage(20);
                 });
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreateDate";
                     column.Caption = Resources.Resource.CreateDate;
                     column.Width = Unit.Percentage(15);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Temp1";
                     column.Caption = Resources.Resource.CompleteDate;
                     column.Width = Unit.Percentage(15);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Status";
                     column.Caption = Resources.Resource.Status;
                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.ComboBox;

                     var comboBox = column.PropertiesEdit as ComboBoxProperties;
                     comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetStatusList();
                     comboBox.TextField = "Value";
                     comboBox.ValueField = "Key";
                     comboBox.ValueType = typeof(int);
                 });

                 settings.CommandColumn.Visible = true;
                 settings.CommandColumn.Width = Unit.Percentage(5);

                 settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "StockInEquipment", Action = "EditModesDeletePartial" };
                 settings.CommandColumn.ShowDeleteButton = true;
                 settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;
                 settings.SettingsBehavior.ConfirmDelete = true;


                 // settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                 settings.Settings.ShowFilterRowMenu = true;
                 settings.Settings.ShowFilterRow = true;

                 settings.Settings.ShowGroupPanel = true;
                 settings.Settings.ShowFooter = true;

             });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;

        case "stock_out_list_grid":
            grid = Html.DevExpress().GridView(
             settings =>
             {
                 settings.Name = "gvStockOutGrid";
                 settings.KeyFieldName = "ID";
                 settings.CallbackRouteValues = new { Controller = "StockOutEquipment", Action = "EditModesPartial" };

                 settings.Width = Unit.Percentage(100);

                 settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "OrderCode";
                     column.Caption = Resources.Resource.OrderCode;
                     column.Width = Unit.Percentage(10);
                     column.CellStyle.CssClass = "tCenter";
                     column.EditFormSettings.Visible = DefaultBoolean.False;
                     column.SetDataItemTemplateContent(c =>
                     {
                         ViewContext.Writer.Write(
                             "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + "/StockOutEquipment/StockOut?ID=" + DataBinder.Eval(c.DataItem, "ID") + "','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode") + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                         );
                     });
                 });
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "User.UserName";
                     column.Caption = Resources.Resource.Creator;
                     column.Width = Unit.Percentage(15);
                     column.SetDataItemTemplateContent(c =>
                     {
                         ViewContext.Writer.Write(
                             string.Format("{0}({1})", DataBinder.Eval(c.DataItem, "User.UserName"), DataBinder.Eval(c.DataItem, "User.UserCodeID"))
                         );
                     });

                 });
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Description";
                     column.Caption = Resources.Resource.Description;
                     column.Width = Unit.Percentage(20);
                 });
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "User1.UserName";
                     column.Caption = Resources.Resource.DeloveryFor;
                     column.Width = Unit.Percentage(15);
                     column.SetDataItemTemplateContent(c =>
                     {
                         ViewContext.Writer.Write(
                             string.Format("{0}({1})", DataBinder.Eval(c.DataItem, "User1.UserName"), DataBinder.Eval(c.DataItem, "User1.UserCodeID"))
                         );
                     });
                 });


                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreateDate";
                     column.Caption = Resources.Resource.CreateDate;
                     column.Width = Unit.Percentage(15);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CofirmDate";
                     column.Caption = Resources.Resource.CompleteDate;
                     column.Width = Unit.Percentage(15);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Status";
                     column.Caption = Resources.Resource.Status;
                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.ComboBox;

                     var comboBox = column.PropertiesEdit as ComboBoxProperties;
                     comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetStatusList();
                     comboBox.TextField = "Value";
                     comboBox.ValueField = "Key";
                     comboBox.ValueType = typeof(int);
                 });

                 settings.CommandColumn.Visible = true;
                 settings.CommandColumn.Width = Unit.Percentage(5);

                 settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "StockOutEquipment", Action = "EditModesDeletePartial" };
                 settings.CommandColumn.ShowDeleteButton = true;
                 settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;
                 settings.SettingsBehavior.ConfirmDelete = true;


                 // settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                 settings.Settings.ShowFilterRowMenu = true;
                 settings.Settings.ShowFilterRow = true;

                 settings.Settings.ShowGroupPanel = true;
                 settings.Settings.ShowFooter = true;

             });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;

        case "inventoy_query":
            grid = Html.DevExpress().GridView(
                    settings =>
                    {
                        settings.Name = "gvInventory_query";
                        settings.KeyFieldName = "ID";
                        settings.CallbackRouteValues = new { Controller = "ITInventory", Action = "InventoryEditModesPartial" };

                        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
                        settings.SettingsBehavior.ConfirmDelete = true;
                        settings.Width = Unit.Percentage(50);

                        //settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                        settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                        //settings.Columns.Add("CostCenter.Remark", "Department").Width = Unit.Percentage(30);

                        settings.Columns.Add(column =>
                        {
                            column.FieldName = "ID";
                            column.Caption = Resources.Resource.ItemNameDetail;
                            column.Width = Unit.Percentage(50);
                            column.ColumnType = MVCxGridViewColumnType.ComboBox;
                            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
                            comboBoxProperties.DataSource = new FEA_BusinessLogic.ITInventoryManager().GetItems();
                            comboBoxProperties.TextField = "ItemDetail.ItemDetailName";
                            comboBoxProperties.ValueField = "ID";
                            comboBoxProperties.ValueType = typeof(string);

                            comboBoxProperties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                            comboBoxProperties.DropDownStyle = DropDownStyle.DropDown;
                        });




                        settings.Columns.Add(column =>
                        {
                            column.FieldName = "Unit.NAME";
                            column.Caption = Resources.Resource.Unit;
                            column.Width = Unit.Percentage(40);
                        });

                        settings.Columns.Add(column =>
                        {
                            column.FieldName = "Quantity";
                            column.Caption = Resources.Resource.Quantity;
                            column.Width = Unit.Percentage(10);
                        });

                        settings.Settings.ShowFooter = true;
                        settings.Settings.ShowFilterRowMenu = true;
                        settings.Settings.ShowFilterRow = true;

                        settings.SettingsBehavior.AllowFocusedRow = true;
                    });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;

        #endregion

        #region "Item and Item detail Manage"
        case "item_manage_list_grid":
            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "ItemGrid";
                settings.KeyFieldName = "ID";
                settings.CallbackRouteValues = new { Controller = "Item", Action = "EditModesPartial" };
                settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Item", Action = "EditModesAddNewPartial" };
                settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Item", Action = "EditModesUpdatePartial" };
                // settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Node", Action = "EditModesDeletePartial", DoctypeID = Request.QueryString["sDocTypeID"] };
                settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
                settings.SettingsBehavior.ConfirmDelete = true;
                settings.Width = Unit.Percentage(60);
                settings.CommandColumn.Visible = true;
                settings.CommandColumn.Width = Unit.Percentage(10);

                settings.SettingsCommandButton.NewButton.Text = Resources.Resource.AddNew;
                settings.CommandColumn.ShowNewButtonInHeader = true;

                settings.CommandColumn.ShowEditButton = true;
                settings.SettingsCommandButton.EditButton.Text = Resources.Resource.Update;

                settings.SettingsDetail.ShowDetailRow = false;
                settings.Settings.ShowFooter = true;
                settings.SettingsBehavior.AllowFocusedRow = true;

                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                settings.Columns.Add(column =>
                {
                    column.FieldName = "ItemType";
                    column.Caption = Resources.Resource.ItemType;
                    column.Width = Unit.Percentage(20);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.WFDocumentTypeManager().GetItems(1);
                    comboBox.TextField = "Description";
                    comboBox.ValueField = "DocumentTypeName";
                    comboBox.ValueType = typeof(string);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "ItemName";
                    column.Caption = Resources.Resource.ItemName;
                    // column.CellStyle.CssClass = "tCenter";
                    column.Width = Unit.Percentage(50);
                });

                settings.Columns.Add(
                    column =>
                    {
                        column.FieldName = "Status";
                        column.Caption = Resources.Resource.Enabled;
                        column.Width = Unit.Percentage(10);
                        column.ColumnType = MVCxGridViewColumnType.CheckBox;
                    }
                );

                settings.Columns.Add("DocumentTypeID").Visible = false;

                settings.Columns.Add(column =>
                {
                    column.Caption = "#";
                    column.SetDataItemTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(
                            "<a href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"SetModalStyle('50%','100','" + FEA_ITS_Site.Helper.Ultilities.Root + "/ItemDetail/ItemDetailManage?ItemID=" + DataBinder.Eval(c.DataItem, "ID") + "','" + @Resources.Resource.Detail + ": " + DataBinder.Eval(c.DataItem, "ItemName") + "')\">" + @Resources.Resource.Detail + "</a>"
                        );
                    });

                    column.CellStyle.CssClass = "tCenter";
                    column.Width = Unit.Percentage(20);
                    column.SetColVisible(true);
                    column.UnboundType = DevExpress.Data.UnboundColumnType.String;
                    column.EditFormSettings.Visible = DefaultBoolean.False;
                });

                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFilterRow = true;

            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }


            grid.Bind(Model).GetHtml();
            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;
        case "item_detail_manage_list_grid":
            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "ItemDetailManageGrid";
                settings.KeyFieldName = "ID";
                settings.CallbackRouteValues = new { Controller = "ItemDetail", Action = "EditModesPartial", ItemID = Request.QueryString["ItemID"] };
                settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "ItemDetail", Action = "EditModesAddNewPartial", ItemID = Request.QueryString["ItemID"] };
                settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "ItemDetail", Action = "EditModesUpdatePartial", ItemID = Request.QueryString["ItemID"] };


                settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
                settings.SettingsBehavior.ConfirmDelete = true;
                settings.Width = Unit.Percentage(60);
                settings.CommandColumn.Width = Unit.Percentage(10);

                settings.CommandColumn.Visible = Convert.ToBoolean(ViewData["ShowAddColumn"]); ;
                settings.SettingsCommandButton.NewButton.Text = Resources.Resource.AddNew;
                settings.CommandColumn.ShowNewButtonInHeader = Convert.ToBoolean(ViewData["ShowAddColumn"]);

                settings.CommandColumn.ShowEditButton = true;
                settings.SettingsCommandButton.EditButton.Text = Resources.Resource.Update;

                settings.SettingsDetail.ShowDetailRow = false;
                settings.Settings.ShowFooter = true;
                settings.SettingsBehavior.AllowFocusedRow = true;

                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                settings.Columns.Add(column =>
                {
                    column.FieldName = "ItemDetailName";
                    column.Caption = Resources.Resource.ItemName;
                    column.Width = Unit.Percentage(50);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Temp2";
                    column.Caption = Resources.Resource.Unit;
                    column.Width = Unit.Percentage(10);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;
                    column.Visible = Convert.ToBoolean(ViewData["ShowUnitColumn"]);

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.UnitManager().GetItems(1);
                    comboBox.TextField = "Name";
                    comboBox.ValueField = "ID";
                    comboBox.ValueType = typeof(string);
                });

                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFilterRow = true;

            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }


            grid.Bind(Model).GetHtml();
            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;
        #endregion
        #region Warehouse Area
        case "warehouse_detail_data":
            grid = Html.DevExpress().GridView(
                settings =>
                {
                    settings.Name = "gvwarehouse_data_grid";
                    settings.KeyFieldName = "ID";
                    settings.CallbackRouteValues = new { Controller = "WarehouseArea", Action = "LoadWarehouseDetail", ShowCommand = Convert.ToBoolean(ViewData["ShowCommand"]) , CustomerCodeType= ViewData["CustomerCodeType"]};


                    settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "HardwareRequirement", Action = "EditModesDeleteItemDetail" };
                    settings.SettingsBehavior.ConfirmDelete = false;

                    settings.Width = Unit.Percentage(100);
                    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;

                    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
                    settings.Settings.VerticalScrollableHeight = 300;

                    settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;


                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.Range;
                        column.Caption = "Range";
                        column.Width = 100;
                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.SerialFrom;
                        column.Caption = "Serial From";
                        column.Width = 100;
                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.SerialTo;
                        column.Caption = "Serial To";
                        column.Width = 100;
                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.PackCode;
                        column.Caption = "Pack Code";
                        column.Width = 100;
                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.LineNumber;
                        column.Caption = "Line #";
                        column.Width = 100;
                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.BuyerItemNumber;
                        column.Caption = "Buyer Item #";
                        column.Width = 100;
                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.SKUNumber;
                        column.Caption = "SKU #";
                        column.Width = 100;
                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.PONumber;
                        column.Caption = "PO #";
                        column.Width = 100;
                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.MainLine;
                        column.Caption = "MAIN LINE";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.ColorName;
                        column.Caption = "Color Name";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.Size;
                        column.Caption = "Size";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.ShortDescription;
                        column.Caption = "Short Description";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.ShipmentMethod;
                        column.Caption = "Shipment Method";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.ItemQty;
                        column.Caption = "Item Qty";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.ItemQtyPerCtn_Pack;
                        column.Caption = "Item Qty Per Ctn / Pack";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.InnerPkgCount;
                        column.Caption = "Inner Pkg Count";
                        column.Width = 100;

                    });


                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.CtnCount;
                        column.Caption = "Ctn Count";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.R;
                        column.Caption = "R";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.CtnCode;
                        column.Caption = "Ctn Code";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.NetNet;
                        column.Caption = "Net Net";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.Net;
                        column.Caption = "Net";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.Gross;
                        column.Caption = "Gross";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.Unit;
                        column.Caption = "Unit";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.L;
                        column.Caption = "L";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.W;
                        column.Caption = "W";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.H;
                        column.Caption = "H";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.Unit2;
                        column.Caption = "Unit";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.MaterialStyle;
                        column.Caption = "MaterialStyle";
                        column.Width = 100;


                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.CustomerCrossReferenceNumber;
                        column.Caption = "CustomerCrossReferenceNumber";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = WarehouseArea.ExcelReader.ColumnIdentifier.UPC_EAN;
                        column.Caption = "UPC_EAN";
                        column.Width = 100;

                    });

                    settings.ClientSideEvents.Init = "OnSetTotalRow"; //"function(s, e) { alert(s.cpVisibleRowCount); }";
                    settings.CustomJSProperties = (s, e) => // Custom field returned
                    {
                        //Return Row count
                        MVCxGridView Current = (MVCxGridView)s;
                        e.Properties["cpVisibleRowCount"] = Current.VisibleRowCount;
                    };


                    settings.Settings.ShowFooter = false;


                });
            try
            {
                if (Model != null)
                { grid.Bind(Model).GetHtml(); }
                else
                { grid.GetHtml(); }
            }
            catch (Exception ex)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw(((System.Data.DataSet)Model).Tables.Count + ex.Message + " - " + ex.StackTrace)
                </div>
                    }


            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditError"])
                </div>
            }

            break;

        case "warehouse_packingManifest_detail_data":
            grid = Html.DevExpress().GridView(
                settings =>
                {
                    settings.Name = "gvwarehouse_packingManifest_data_grid" + ViewData["CustomerPO"]; //+ (new Random()).Next(1,999999).ToString();
                    settings.KeyFieldName = "ID";

                    settings.Width = Unit.Percentage(100);
                    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;


                    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
                    settings.Settings.VerticalScrollableHeight = 500;


                    settings.CommandColumn.Visible = true;
                    settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;

                    settings.CommandColumn.ShowSelectCheckbox = true;
                    settings.CommandColumn.ShowClearFilterButton = true;
                    settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;


                    settings.SettingsBehavior.AllowFocusedRow = true;

                    settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = false;
                    settings.SettingsDetail.ShowDetailRow = true;

                    // View này sử dụng chung cho form them moi va form truy van nen khi sort va truy van thi callback se khac nhau
                    if (ViewData["IsFromImport"] == "1")
                    {
                        settings.CallbackRouteValues = new { Controller = "WarehouseArea", Action = "LoadPackingManifestDetailDetail", PackingManifestID = ViewData["PackingManifestID"].ToString() };
                        settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
                    }
                    else if (ViewData["IsFromImport"] == "0")
                    {
                        settings.CommandColumn.Visible = false;
                        settings.CallbackRouteValues = new { Controller = "WarehouseArea", Action = "LoadPackingManifestDetailDetailOnQuery", PoNumber = ViewData["PoNumber"], CustomerPO = ViewData["CustomerPO"], dtFrom = ViewData["dtFrom"], dtTo = ViewData["dtTo"], TypeQuery = ViewData["TypeQuery"] };
                    }
                    else if (ViewData["IsFromImport"] == "-1")
                    {
                        settings.CallbackRouteValues = new { Controller = "WarehouseArea", Action = "LoadPackingManifestDetailDetailOnRemoveBarcode", CustomerPO = ViewData["CustomerPO"] };
                        settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
                    }


                    settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                    //settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;


                    settings.Columns.Add(
                        column =>
                        {
                            column.FieldName = "isCOnfirm";
                            column.Caption = "Đã xác nhận";
                            column.Width = 100;
                            column.ColumnType = MVCxGridViewColumnType.CheckBox;
                            column.FixedStyle = GridViewColumnFixedStyle.Left;
                        }
                    );


                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "isStockin";
                        column.Caption = "Đã nhập kho";
                        column.Width = 100;
                        column.ColumnType = MVCxGridViewColumnType.CheckBox;
                        column.FixedStyle = GridViewColumnFixedStyle.Left;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "isReturns";
                        column.Caption = "Đang cho mượn";
                        column.Width = 100;
                        column.ColumnType = MVCxGridViewColumnType.CheckBox;
                        column.FixedStyle = GridViewColumnFixedStyle.Left;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "PackingManifest.OrderCode";
                        column.Caption = "Order Code";
                        column.Width = 120;
                        column.FixedStyle = GridViewColumnFixedStyle.Left;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "PackingManifest.CustomerPO";
                        column.Caption = "Customer PO";
                        column.Width = 120;
                        column.FixedStyle = GridViewColumnFixedStyle.Left;
                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "PO_";
                        column.Caption = "PO #";
                        column.Width = 100;
                        column.FixedStyle = GridViewColumnFixedStyle.Left;
                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "SerialNo";
                        column.Caption = "SerialNo";
                        column.Width = 100;
                        column.FixedStyle = GridViewColumnFixedStyle.Left;
                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "RANGE";
                        column.Caption = "RANGE";
                        column.Width = 100;
                    });


                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "PackCode";
                        column.Caption = "Pack Code";
                        column.Width = 100;
                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "Line_";
                        column.Caption = "Line #";
                        column.Width = 100;
                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "BuyerItem_";
                        column.Caption = "Buyer Item #";
                        column.Width = 100;
                    });

                    //settings.Columns.Add(column =>
                    //{
                    //    column.FieldName = "SKU_";
                    //    column.Caption = "SKU #";
                    //    column.Width = 100;
                    //});


                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "MainLine_";
                        column.Caption = "MAIN LINE";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "ColorName";
                        column.Caption = "Color Name";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.Caption = "Size";
                        column.Width = 100;
                        column.FieldName = "Size";
                        column.SetDataItemTemplateContent(c =>
                        {
                            int IsCoordination = int.Parse(DataBinder.Eval(c.DataItem, "PackingManifest.isCoordinate") == null ? "0" : DataBinder.Eval(c.DataItem, "PackingManifest.isCoordinate").ToString());
                            string sSize = DataBinder.Eval(c.DataItem, "Size").ToString();

                            if (IsCoordination == 1)
                            {
                                string sID = DataBinder.Eval(c.DataItem, "ID").ToString();
                                FEA_BusinessLogic.Base.Connection conn = new FEA_BusinessLogic.Base.Connection();
                                sSize = string.Join(", ", conn.db.PackingManifestDetailCoordinations.Where(i => i.PackingManifestDetailID == sID).OrderBy(i => i.Size).Select(i => i.Size).ToList());

                            }
                            ViewContext.Writer.Write(
                                sSize
                            );
                        });

                    });

                    settings.CustomUnboundColumnData = (s, e) =>
                    {
                        if (e.Column.FieldName == "Size")
                        {
                            int IsCoordination = int.Parse(DataBinder.Eval(e.Value, "PackingManifest.isCoordinate") == null ? "0" : DataBinder.Eval(e.Value, "PackingManifest.isCoordinate").ToString());
                            string sSize = DataBinder.Eval(e.Value, "Size").ToString();

                            if (IsCoordination == 1)
                            {
                                string sID = DataBinder.Eval(e.Value, "ID").ToString();
                                FEA_BusinessLogic.Base.Connection conn = new FEA_BusinessLogic.Base.Connection();
                                sSize = string.Join(", ", conn.db.PackingManifestDetailCoordinations.Where(i => i.PackingManifestDetailID == sID).OrderBy(i => i.Size).Select(i => i.Size).ToList());

                            }

                            e.Value = sSize;
                        };
                    };


                    settings.Columns.Add(column =>
                    {
                        // column.FieldName = "ItemQuantity";
                        column.Caption = "Item Qty";
                        column.Width = 100;

                        column.SetDataItemTemplateContent(c =>
                        {
                            int IsCoordination = int.Parse(DataBinder.Eval(c.DataItem, "PackingManifest.isCoordinate") == null ? "0" : DataBinder.Eval(c.DataItem, "PackingManifest.isCoordinate").ToString());
                            string sQuan = DataBinder.Eval(c.DataItem, "ItemQuantity").ToString();

                            if (IsCoordination == 1)
                            {
                                string sID = DataBinder.Eval(c.DataItem, "ID").ToString();
                                FEA_BusinessLogic.Base.Connection conn = new FEA_BusinessLogic.Base.Connection();
                                sQuan = string.Join(", ", conn.db.PackingManifestDetailCoordinations.Where(i => i.PackingManifestDetailID == sID).OrderBy(i => i.Size).Select(i => i.ItemQuantity).ToList());

                            }
                            ViewContext.Writer.Write(
                                sQuan
                            );
                        });


                    });

                    settings.Columns.Add(column =>
                    {
                        // column.FieldName = "ItemQtyPerCtnPack";
                        column.Caption = "Item Qty Per Ctn / Pack";
                        column.Width = 100;


                        column.SetDataItemTemplateContent(c =>
                        {
                            int IsCoordination = int.Parse(DataBinder.Eval(c.DataItem, "PackingManifest.isCoordinate") == null ? "0" : DataBinder.Eval(c.DataItem, "PackingManifest.isCoordinate").ToString());
                            string sQuan = DataBinder.Eval(c.DataItem, "ItemQtyPerCtnPack").ToString();

                            if (IsCoordination == 1)
                            {
                                string sID = DataBinder.Eval(c.DataItem, "ID").ToString();
                                FEA_BusinessLogic.Base.Connection conn = new FEA_BusinessLogic.Base.Connection();
                                sQuan = string.Join(", ", conn.db.PackingManifestDetailCoordinations.Where(i => i.PackingManifestDetailID == sID).OrderBy(i => i.Size).Select(i => i.ItemQtyPerCtnPack).ToList());

                            }
                            ViewContext.Writer.Write(
                                sQuan
                            );
                        });

                    });



                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "ShortDescription";
                        column.Caption = "Short Description";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "ShipmentMethod";
                        column.Caption = "Shipment Method";
                        column.Width = 100;

                    });



                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "InnetPkgCount";
                        column.Caption = "Inner Pkg Count";
                        column.Width = 100;

                    });


                    //settings.Columns.Add(column =>
                    //{
                    //    column.FieldName = "R";
                    //    column.Caption = "R";
                    //    column.Width = 100;

                    //});

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "CtnCode";
                        column.Caption = "Ctn Code";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "NETNET";
                        column.Caption = "Net Net";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "NET";
                        column.Caption = "Net";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "GROSS";
                        column.Caption = "Gross";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "UNIT";
                        column.Caption = "Unit";
                        column.Width = 100;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "MaterialStyle";
                        column.Caption = "Material Style";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "CustomerCrossReferenceNumber";
                        column.Caption = "Customer Cross Reference Number";
                        column.Width = 100;

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "UPC_EAN";
                        column.Caption = "UPC/EAN (GTIN)";
                        column.Width = 100;

                    });
                    //settings.Columns.Add(column =>
                    //{
                    //    column.FieldName = "UNIT2";
                    //    column.Caption = "Unit";
                    //    column.Width = 100;

                    //});


                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "STATUS";
                        column.Caption = Resources.Resource.Status;
                        column.Width = 100;
                        column.ColumnType = MVCxGridViewColumnType.ComboBox;
                        settings.Settings.ShowFooter = false;

                        var comboBox = column.PropertiesEdit as ComboBoxProperties;
                        comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetWHStatusList();
                        comboBox.TextField = "Value";
                        comboBox.ValueField = "Key";

                        comboBox.ValueType = typeof(int);

                        comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                        comboBox.DropDownStyle = DropDownStyle.DropDown;
                    });

                    settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Count, "SerialNo");
                    settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "ItemQuantity");

                    settings.Settings.ShowFooter = true;

                    settings.Settings.ShowFilterRowMenu = true;
                    settings.Settings.ShowFilterRow = true;
                    //settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
                    settings.SettingsBehavior.AllowSort = true;

                    settings.HtmlRowPrepared = (s, e) =>
                    {
                        if (e.RowType != GridViewRowType.Data) return;


                        if (int.Parse(e.GetValue("STATUS").ToString()) == (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.OrderStatus.DELETED)
                        {
                            e.Row.BackColor = System.Drawing.Color.SlateGray;
                            e.Row.ForeColor = System.Drawing.Color.White;


                        }

                        if (int.Parse(e.GetValue("STATUS").ToString()) != (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.OrderStatus.DELETED && e.GetValue("isCOnfirm").ToString() == "1")
                        {

                            e.Row.BackColor = System.Drawing.Color.FromArgb(0x81, 0xF2, 0xFF, 0x5F);// System.Drawing.Color.CornflowerBlue;
                            if (int.Parse(e.GetValue("STATUS").ToString()) != (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.OrderStatus.DELETED && e.GetValue("isStockin").ToString() == "1")
                            {
                                e.Row.BackColor = System.Drawing.Color.FromArgb(0x81, 0x5F, 0xFF, 0x7D);
                            }

                            e.Row.ForeColor = System.Drawing.Color.Black;
                        }

                        if (int.Parse(e.GetValue("isReturns") == null ? "0" : e.GetValue("isReturns").ToString()) == 1)
                        {
                            e.Row.BackColor = System.Drawing.Color.FromArgb(0xFF, 0x9F, 0xCC);
                        }

                    };

                    settings.CommandButtonInitialize = (s, e) =>
                    {
                        MVCxGridView Grid = s as MVCxGridView;
                        if (e.ButtonType == ColumnCommandButtonType.SelectCheckbox)
                        {

                            var isConfirm = Grid.GetRowValues(e.VisibleIndex, "isCOnfirm").ToString();
                            int Status = int.Parse(Grid.GetRowValues(e.VisibleIndex, "STATUS").ToString());
                            var isStockin = Grid.GetRowValues(e.VisibleIndex, "isStockin").ToString();

                            if (isConfirm == "1"
                                || isStockin == "1"
                                || Status == (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.OrderStatus.DELETED)
                            {
                                e.Visible = false;
                                e.Enabled = false;
                            }
                        }
                    };

                    settings.SetDetailRowTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(
                                        "Lịch sử Barcode: <b>" +
                                            DataBinder.Eval(c.DataItem, "SerialNo") +
                                        "<br />"
                        );
                        Html.RenderAction("BarcodeHistoryPartial", new { PackingManifestDetailID = DataBinder.Eval(c.DataItem, "ID") });
                    });

                });
            try
            {
                if (Model != null)
                { grid.Bind(Model).GetHtml(); }
                else
                { grid.GetHtml(); }
            }
            catch (Exception ex)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw(ex.Message)
                </div>
                    }


            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditError"])
                </div>
            }

            break;
        #endregion

        case "delegate_manage_list_grid":
            grid = Html.DevExpress().GridView(
        settings =>
        {
            settings.Name = "delegate_manage_list_grid";
            settings.KeyFieldName = "DelegateID";
            settings.CallbackRouteValues = new { Controller = "WFDelegate", Action = "EditModesPartial" };
            settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "WFDelegate", Action = "EditModesAddNewPartial" };
            settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "WFDelegate", Action = "EditModesUpdatePartial" };
            settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "WFDelegate", Action = "EditModesDeletePartial" };
            settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
            settings.SettingsBehavior.ConfirmDelete = true;
            settings.Width = Unit.Percentage(70);
            settings.CommandColumn.Visible = true;
            settings.CommandColumn.Width = Unit.Percentage(10);

            settings.SettingsCommandButton.NewButton.Text = Resources.Resource.AddNew;
            settings.CommandColumn.ShowNewButtonInHeader = true;

            settings.CommandColumn.ShowEditButton = true;
            settings.SettingsCommandButton.EditButton.Text = Resources.Resource.Update;

            settings.CommandColumn.ShowDeleteButton = true;
            settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;
            settings.SettingsDetail.ShowDetailRow = false;
            settings.Settings.ShowFooter = true;
            settings.SettingsBehavior.AllowFocusedRow = true;

            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
            settings.Columns.Add(column =>
            {
                column.FieldName = "DelegateUserID";
                column.Caption = Resources.Resource.DelegateFor;
                column.Width = Unit.Percentage(20);
                column.ColumnType = MVCxGridViewColumnType.ComboBox;

                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                comboBox.DataSource = new FEA_BusinessLogic.UserManager().GetAdminUser();
                comboBox.TextField = "UserNameEN";
                comboBox.ValueField = "UserID";
                comboBox.ValueType = typeof(string);
                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
            });


            settings.Columns.Add(column =>
            {
                column.FieldName = "Temp2";
                column.Caption = Resources.Resource.SignDepartment;
                column.Width = Unit.Percentage(20);
                column.ColumnType = MVCxGridViewColumnType.ComboBox;

                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                comboBox.ValidationSettings.RequiredField.IsRequired = false;
                comboBox.DataSource = new FEA_BusinessLogic.CodeCenterManager().GetItems(1);
                comboBox.TextField = "Remark";
                comboBox.ValueField = "CostCenterCode";
                comboBox.ValueType = typeof(Nullable<int>);
                comboBox.AllowNull = true;
                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

            });

            settings.Columns.Add(column =>
            {
                column.FieldName = "Temp1";
                column.Caption = Resources.Resource.DocumentTypeName;
                column.Width = Unit.Percentage(20);
                column.ColumnType = MVCxGridViewColumnType.ComboBox;

                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                comboBox.ValidationSettings.RequiredField.IsRequired = false;
                comboBox.DataSource = new FEA_BusinessLogic.WFDocumentTypeManager().GetItems(1);
                comboBox.TextField = "Description";
                comboBox.ValueField = "DocumentTypeID";
                comboBox.ValueType = typeof(string);
                comboBox.AllowNull = true;
                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "From";
                column.Caption = Resources.Resource.FromDate;
                column.Width = Unit.Percentage(35);
                column.ColumnType = MVCxGridViewColumnType.DateEdit;
                DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                dateEdit.DisplayFormatInEditMode = true;
                dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "To";
                column.Caption = Resources.Resource.ToDate;
                column.Width = Unit.Percentage(35);
                column.ColumnType = MVCxGridViewColumnType.DateEdit;

                DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                dateEdit.DisplayFormatInEditMode = true;
                dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
            });


            settings.Settings.ShowFilterRowMenu = false;
            settings.Settings.ShowFilterRow = false;

        });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }

            grid.Bind(Model).GetHtml();
            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;

        case "request_order_grid":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvOrderRequest";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "DeviceRegistration", Action = "DocumentRequestedPartial", OrderCode = ViewBag.OrderCode, BeginDate = ViewBag.BeginDate, EndDate = ViewBag.EndDate };

                            settings.Width = Unit.Percentage(100);

                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "OrderCode";
                                column.Caption = Resources.Resource.OrderCode;
                                column.Width = Unit.Percentage(10);
                                column.CellStyle.CssClass = "tCenter";
                                column.EditFormSettings.Visible = DefaultBoolean.False;
                                column.SetDataItemTemplateContent(c =>
                                {
                                    string doctype = DataBinder.Eval(c.DataItem, "OrderType").ToString();
                                    string url = "";
                                    if (doctype == FEA_ITS_Site.Models.Helper.TagPrefixParameter.DEVICE_REGISTRATION)
                                        url = FEA_ITS_Site.Helper.Ultilities.Root + "/DeviceRegistration/Index?DeviceRegID=" + DataBinder.Eval(c.DataItem, "ID") + "&TypeUser=user','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode");
                                    else if (doctype == FEA_ITS_Site.Models.Helper.TagPrefixParameter.HARD_REGISTRATION)
                                        url = FEA_ITS_Site.Helper.Ultilities.Root + "/HardwareRequirement/Index?ID=" + DataBinder.Eval(c.DataItem, "ID") + "&TypeUser=user','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode");

                                    ViewContext.Writer.Write(

                                        "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"SetModalStyle('','','" + url + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"

                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "OrderType";
                                column.Caption = Resources.Resource.DocType;
                                column.Width = Unit.Percentage(15);
                                column.GroupIndex = 0;


                                column.ColumnType = MVCxGridViewColumnType.ComboBox;
                                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                                comboBox.DataSource = new FEA_BusinessLogic.WFDocumentTypeManager().GetItems(1);
                                comboBox.TextField = "Description";
                                comboBox.ValueField = "DocumentTypeName";
                                comboBox.ValueType = typeof(string);

                                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                                comboBox.DropDownStyle = DropDownStyle.DropDown;
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Creator";
                                column.Caption = Resources.Resource.Creator;
                                column.Width = Unit.Percentage(15);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Department";
                                column.Caption = Resources.Resource.Department;
                                column.Width = Unit.Percentage(15);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Reason";
                                column.Caption = Resources.Resource.Reason;
                                column.Width = Unit.Percentage(25);
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CreateDate";
                                column.Caption = Resources.Resource.CreateDate;
                                column.Width = Unit.Percentage(15);
                                column.ColumnType = MVCxGridViewColumnType.DateEdit;

                                DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                                dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                                dateEdit.DisplayFormatInEditMode = true;
                                dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Status";
                                column.Caption = Resources.Resource.Status;
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.ComboBox;

                                var comboBox = column.PropertiesEdit as ComboBoxProperties;
                                comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetStatusList();
                                comboBox.TextField = "Value";
                                comboBox.ValueField = "Key";

                                comboBox.ValueType = typeof(int);

                                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                                comboBox.DropDownStyle = DropDownStyle.DropDown;

                            });

                            settings.Settings.ShowFilterRowMenu = true;
                            settings.Settings.ShowFilterRow = true;
                            settings.Settings.ShowFooter = true;
                            settings.Settings.ShowGroupPanel = true;


                            settings.PreRender = (sender, e) =>
                            {
                                ((MVCxGridView)sender).ExpandAll();
                            };
                        });


            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["EditSuccess"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-success" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditSuccess"])
                </div>
            }
            break;

        case "warehousr_import_list_grid":
            grid = Html.DevExpress().GridView(
             settings =>
             {
                 settings.Name = "gvWhImportManagement";
                 settings.KeyFieldName = "ID";
                 settings.CallbackRouteValues = new { Controller = "WarehouseArea", Action = "EditImportModesPartial", CustomerCodeType = @ViewBag.CustomerCodeType};

                 settings.Width = Unit.Percentage(100);

                 settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "OrderCode";
                     column.Caption = Resources.Resource.OrderCode;
                     column.Width = Unit.Percentage(10);
                     column.CellStyle.CssClass = "tCenter";
                     column.EditFormSettings.Visible = DefaultBoolean.False;
                     column.SetDataItemTemplateContent(c =>
                     {
                         ViewContext.Writer.Write(
                             "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + "/WarehouseArea/ImportDataFromExcel?ID=" + DataBinder.Eval(c.DataItem, "ID") + "','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode") + "','false')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                         );
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CustomerPO";
                     column.Caption = Resources.Resource.CustomerPO;
                     column.Width = Unit.Percentage(10);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CustomerCode";
                     column.Caption = "Customer";
                     column.Width = Unit.Percentage(5);
                     column.ColumnType = MVCxGridViewColumnType.ComboBox;

                     var comboBox = column.PropertiesEdit as ComboBoxProperties;
                     comboBox.DataSource = WarehouseArea.ExcelReader.CustomerTypeCode.CustomerTypeCodeList();
                     comboBox.TextField = "Value";
                     comboBox.ValueField = "Key";

                     comboBox.ValueType = typeof(string);

                     comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                     comboBox.DropDownStyle = DropDownStyle.DropDown;
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "PONo";
                     column.Caption = "PO Number #";
                     column.Width = Unit.Percentage(10);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "InvoiceNo";
                     column.Caption = "Invoice No.";
                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreateDate";
                     column.Caption = Resources.Resource.CreateDate;


                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "User.UserName";
                     column.Caption = Resources.Resource.Creator;
                     column.Width = Unit.Percentage(10);

                 });



                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "isConfirm";
                     column.Caption = "Đã x.nhận";
                     column.ColumnType = MVCxGridViewColumnType.CheckBox;
                     column.Width = Unit.Percentage(5);

                 });
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "STATUS";
                     column.Caption = Resources.Resource.Status;
                     column.Width = Unit.Percentage(5);
                     column.ColumnType = MVCxGridViewColumnType.ComboBox;

                     var comboBox = column.PropertiesEdit as ComboBoxProperties;
                     comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetWHStatusList();
                     comboBox.TextField = "Value";
                     comboBox.ValueField = "Key";

                     comboBox.ValueType = typeof(int);

                     comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                     comboBox.DropDownStyle = DropDownStyle.DropDown;

                 });

                 settings.CommandColumn.Visible = true;
                 settings.CommandColumn.Width = Unit.Percentage(5);

                 settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "WarehouseArea", Action = "EditImportModesDeletePartial" };
                 settings.CommandColumn.ShowDeleteButton = true;
                 settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;
                 settings.SettingsBehavior.ConfirmDelete = true;


                 // settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                 settings.Settings.ShowFilterRowMenu = true;
                 settings.Settings.ShowFilterRow = true;

                 settings.Settings.ShowGroupPanel = true;
                 settings.Settings.ShowFooter = true;

             });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;

        case "warehouse_history_list_grid":
            grid = Html.DevExpress().GridView(
             settings =>
             {
                 settings.Name = "gvWhHistoryGrid" + ViewData["PackingManifestDetailID"];
                 settings.KeyFieldName = "ID";
                 settings.CallbackRouteValues = new { Controller = "WarehouseArea", Action = "BarcodeHistoryPartial", PackingManifestDetailID = ViewData["PackingManifestDetailID"] };

                 settings.Width = Unit.Percentage(100);

                 settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                 settings.Settings.UseFixedTableLayout = true;
                 settings.SettingsBehavior.AllowFocusedRow = true;
                 settings.Settings.ShowFilterRow = true;
                 settings.Settings.ShowFilterRowMenu = true;
                 settings.Settings.ShowFilterRowMenuLikeItem = true;
                 settings.Settings.ShowGroupPanel = true;
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "ObjectScan";
                     column.Caption = Resources.Resource.Department;
                     column.Width = Unit.Percentage(20);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "OperationType";
                     column.Caption = Resources.Resource.OperationType;
                     column.Width = Unit.Percentage(25);
                     column.SetDataItemTemplateContent(c =>
                     {
                         string operation = DataBinder.Eval(c.DataItem, "OperationType").ToString();
                         string objectscan = DataBinder.Eval(c.DataItem, "ObjectScan").ToString();
                         string message = "N/A";
                         if (objectscan.ToLower().Equals("packing"))
                         {
                             if (operation.ToLower().Equals("in"))
                                 message = string.Format(Resources.Resource.CONFIRM_IN, objectscan);
                             else if (operation.ToLower().Equals("out"))
                                 message = string.Format(Resources.Resource.CONFIRM_OUT, objectscan);
                         }
                         else if (objectscan.ToLower().Equals("warehouse"))
                         {
                             if (operation.ToLower().Equals("in"))
                                 message = string.Format(Resources.Resource.STOCKIN_IN, objectscan);
                             else if (operation.ToLower().Equals("out"))
                                 message = string.Format(Resources.Resource.STOCKIN_OUT, objectscan);

                         }
                         else if (objectscan.ToLower().Equals("warehouseexport"))
                         {
                             if (operation.ToLower().Equals("export"))
                                 message = string.Format(Resources.Resource.ExportFromStock, objectscan);
                             else if (operation.ToLower().Equals("return"))
                                 message = string.Format(Resources.Resource.ImportToStock, objectscan);
                         }

                         ViewContext.Writer.Write(message);
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "TEMP3";
                     column.Caption = Resources.Resource.Note;
                     column.Width = Unit.Percentage(20);
                     column.SetDataItemTemplateContent(c =>
                     {
                         string sID = DataBinder.Eval(c.DataItem, "TEMP3").ToString();
                         string sReasonName = "";
                         sReasonName = (sID.Length == 0 ? "" : new FEA_BusinessLogic.WarehouseArea.PackingManifestReturnedItemManager().GetItemNameByID(sID));

                         ViewContext.Writer.Write(sReasonName);
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreatorID";
                     column.Caption = Resources.Resource.Creator;
                     column.Width = Unit.Percentage(15);
                     column.CellStyle.CssClass = "tLeft";
                     column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
                     column.SetDataItemTemplateContent(c =>
                     {
                         int uID = int.Parse(DataBinder.Eval(c.DataItem, "CreatorID").ToString());
                         FEA_BusinessLogic.User u = new FEA_BusinessLogic.UserManager().GetItem(uID);
                         string uName = (u == null ? "N/A" : string.Format("{0}({1})", u.UserName, u.UserCodeID));

                         ViewContext.Writer.Write(uName);
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreateDate";
                     column.Caption = Resources.Resource.CreateDate;


                     column.Width = Unit.Percentage(15);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                 });


                 settings.Settings.ShowFilterRowMenu = false;
                 settings.Settings.ShowFilterRow = false;

                 settings.Settings.ShowGroupPanel = false;
                 settings.Settings.ShowFooter = false;

             });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;

        case "ItAssetItem_list_grid":
            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "ItAssetItem";
                settings.KeyFieldName = "ID";
                settings.CallbackRouteValues = new { Controller = "ITAssetDetail", Action = "EditModesPartial" };
                settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "ITAssetDetail", Action = "EditModesAddNewPartial" };
                settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "ITAssetDetail", Action = "EditModesUpdatePartial" };
                settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "ITAssetDetail", Action = "EditModesDeletePartial" };
                settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
                settings.SettingsBehavior.ConfirmDelete = true;
                // settings.Width = 3500;//Unit.Percentage(500);
                settings.CommandColumn.Visible = true;
                settings.CommandColumn.Width = 100;


                settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;

                settings.SettingsCommandButton.NewButton.Text = Resources.Resource.AddNew;
                settings.CommandColumn.ShowNewButtonInHeader = true;

                settings.CommandColumn.ShowEditButton = true;
                settings.SettingsCommandButton.EditButton.Text = Resources.Resource.Update;

                settings.CommandColumn.ShowDeleteButton = true;
                settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;

                settings.SettingsDetail.ShowDetailRow = false;
                settings.Settings.ShowFooter = true;
                settings.SettingsBehavior.AllowFocusedRow = true;


                settings.Width = Unit.Percentage(100);
                settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;


                settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
                settings.Settings.VerticalScrollableHeight = 500;


                settings.CommandColumn.Visible = true;
                settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;


                /*
                 *
                 *
                 */

                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;


                settings.Columns.Add(column =>
                {
                    column.FieldName = "Division";
                    column.Caption = "Khu vực";


                    column.Width = 150;//Unit.Percentage(10);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.ITSAsset.ITSAssetFTYManager().GetItems((int)FEA_BusinessLogic.ITSAsset.ITSAssetFTYManager.AssetType.Division, 1, "");
                    comboBox.TextField = "Name";
                    comboBox.ValueField = "ID";
                    comboBox.ValueType = typeof(string);
                    comboBox.IncrementalFilteringMode = IncrementalFilteringMode.None;
                    comboBox.DropDownStyle = DropDownStyle.DropDown;

                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Department";
                    column.Caption = "Bộ phận";

                    column.Width = Unit.Percentage(10);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.ITSAsset.ITSAssetFTYManager().GetItems((int)FEA_BusinessLogic.ITSAsset.ITSAssetFTYManager.AssetType.Department, 1, "");
                    comboBox.TextField = "Name";
                    comboBox.ValueField = "ID";
                    comboBox.ValueType = typeof(string);
                    comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    comboBox.DropDownStyle = DropDownStyle.DropDown;
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Section";
                    column.Caption = "Section";

                    column.Width = 100;
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.ITSAsset.ITSAssetFTYManager().GetItems((int)FEA_BusinessLogic.ITSAsset.ITSAssetFTYManager.AssetType.Section, 1, "");
                    comboBox.TextField = "Name";
                    comboBox.ValueField = "ID";
                    comboBox.ValueType = typeof(string);
                    comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    comboBox.DropDownStyle = DropDownStyle.DropDown;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "RecCode";
                    column.Caption = "Mã nhân viên";
                    // column.CellStyle.CssClass = "tCenter";
                    column.Width = 100;


                    column.Settings.HeaderFilterMode = HeaderFilterMode.CheckedList;
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.ITSAsset.ITSAssetRecDataManager().GetItems("", 1);
                    comboBox.TextField = "Code";
                    comboBox.ValueField = "ID";
                    comboBox.ValueType = typeof(string);
                    comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    comboBox.DropDownStyle = DropDownStyle.DropDown;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "RecName";
                    column.Caption = "Tên nhân viên";
                    // column.CellStyle.CssClass = "tCenter";
                    column.Width = 100;


                    column.Settings.HeaderFilterMode = HeaderFilterMode.CheckedList;
                    //column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    //var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    //comboBox.DataSource = new FEA_BusinessLogic.ITSAsset.ITSAssetRecDataManager().GetItems("", 1);
                    //comboBox.TextField = "Name";
                    //comboBox.ValueField = "ID";
                    //comboBox.ValueType = typeof(string);
                    //comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    //comboBox.DropDownStyle = DropDownStyle.DropDown;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "AssetType";
                    column.Caption = "Loại tài sản";
                    // column.CellStyle.CssClass = "tCenter";
                    column.Width = 100;
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.ITSAsset.ITSAssetFTYManager().GetItems((int)FEA_BusinessLogic.ITSAsset.ITSAssetFTYManager.AssetType.Asset, 1, "");
                    comboBox.TextField = "Name";
                    comboBox.ValueField = "ID";
                    comboBox.ValueType = typeof(string);
                    comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    comboBox.DropDownStyle = DropDownStyle.DropDown;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "AssetID";
                    column.Caption = "Mã tài sản";
                    // column.CellStyle.CssClass = "tCenter";
                    column.Width = 100;


                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "AssetName";
                    column.Caption = "Tên tài sản";

                    // column.CellStyle.CssClass = "tCenter";
                    column.Width = 100;
                    column.SetColVisible(true);
                    column.UnboundType = DevExpress.Data.UnboundColumnType.String;
                    //  column.EditFormSettings.Visible = DefaultBoolean.False;
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Brand";
                    column.Caption = "Nhãn hiệu";
                    // column.CellStyle.CssClass = "tCenter";
                    column.Width = 100;


                });




                settings.Columns.Add(column =>
                {
                    column.FieldName = "EquipDate";
                    column.Caption = "Ngày cấp";
                    column.Width = 150;
                    column.ColumnType = MVCxGridViewColumnType.DateEdit;

                    DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                    dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                    dateEdit.DisplayFormatInEditMode = true;
                    dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "FactoryCode";
                    column.Caption = "Mã công ty";
                    // column.CellStyle.CssClass = "tCenter";
                    column.Width = 100;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "DivisionCode";
                    column.Caption = "Mã đơn vị";
                    // column.CellStyle.CssClass = "tCenter";
                    column.Width = 100;

                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "DepartmentCode";
                    column.Caption = "Mã bộ phận";
                    column.Width = 100;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "JobPosition";
                    column.Caption = "Chức vụ";
                    column.Width = 100;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Group";
                    column.Caption = "Nhóm";
                    column.Width = 100;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Model";
                    column.Caption = "Model";
                    column.Width = 100;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Configuration";
                    column.Caption = "Cấu hình";
                    column.Width = 100;
                });


                settings.Columns.Add(column =>
                {
                    column.FieldName = "EmailCoding";
                    column.Caption = "Email Coding";
                    column.Width = 150;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "EmailAddress";
                    column.Caption = "Địa chỉ Email";
                    column.Width = 150;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "FJ_B_W";
                    column.Caption = "FJ - B/W";
                    column.Width = 100;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "FJ_Color";
                    column.Caption = "FJ-Color";
                    column.Width = 100;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "ExtNo";
                    column.Caption = "Ext. No";
                    column.Width = 100;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Code";
                    column.Caption = "Code";
                    column.Width = 100;
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "PassCode";
                    column.Caption = "Pass Code";
                    column.Width = 100;
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "DirectLine";
                    column.Caption = "Direct Line";
                    column.Width = 100;
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "JobTitle";
                    column.Caption = "Job Title";
                    column.Width = 400;

                });


                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFilterRow = true;

                settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Count, "RecName");

                //var headerFilterMode = enableCheckedListMode ? HeaderFilterMode.CheckedList : HeaderFilterMode.List;
                settings.Settings.ShowHeaderFilterButton = true;
                foreach (GridViewDataColumn column in settings.Columns)
                    column.Settings.HeaderFilterMode = HeaderFilterMode.CheckedList;

            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }


            grid.Bind(Model).GetHtml();
            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;


        #endregion


        #region "SA Reagion"
        case "item_detail_Sa_list_grid":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvSaItemDetails";
                            settings.KeyFieldName = "ID";

                            settings.CallbackRouteValues = new { Controller = "SA", Action = "GetListItemDetailPartial", type = int.Parse(ViewData["OrderType"].ToString()), ShowCommand = Convert.ToBoolean(ViewData["ShowCommand"]) };

                            settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "SA", Action = "EditModesDeleteItemDetail" , type = int.Parse(ViewData["OrderType"].ToString()) };
                            settings.SettingsBehavior.ConfirmDelete = false;

                            settings.Width = Unit.Percentage(200);

                            settings.CommandColumn.Visible = ViewData["ShowCommand"] == null ? false : Convert.ToBoolean(ViewData["ShowCommand"]);
                            settings.CommandColumn.Width = Unit.Percentage(5);

                            settings.CommandColumn.ShowDeleteButton = true;
                            settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;

                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                            settings.SettingsText.EmptyDataRow = @Resources.Resource.Nodata;


                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CostCenterName";
                                column.Caption = @Resources.Resource.Deliverydept;
                                column.Width = Unit.Percentage(15);

                            });


                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ItemName";
                                column.Caption = @Resources.Resource.ItemGroup;
                                column.Width = Unit.Percentage(15);

                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ItemDetailName";
                                column.Caption = @Resources.Resource.MaterialName;
                                column.Width = Unit.Percentage(15);

                            });


                            // if Order Type is Donate, we will ad column named: Sex
                            if (ViewData["OrderType"] != null && int.Parse(ViewData["OrderType"].ToString()) == (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Donative)
                            {
                                settings.Columns.Add(column =>
                                {
                                    column.FieldName = "Gender";
                                    column.Caption = @Resources.Resource.Gender;
                                    column.Width = Unit.Percentage(5);
                                    column.SetDataItemTemplateContent(c =>
                                    {
                                        string GenderName = (DataBinder.Eval(c.DataItem, "Gender").ToString() == "M" ? Resources.Resource.Male : Resources.Resource.Female);
                                        ViewContext.Writer.Write(
                                            string.Format(GenderName)
                                        );
                                    });
                                });
                            }

                            if (ViewData["OrderType"] != null && int.Parse(ViewData["OrderType"].ToString()) != (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Adjust)
                            {
                                settings.Columns.Add(column =>
                                {
                                    column.FieldName = "Spec";
                                    column.Caption = @Resources.Resource.Specs;
                                    column.Width = Unit.Percentage(15);
                                });
                            }


                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UnitName";
                                column.Caption = @Resources.Resource.Unit;
                                column.Width = Unit.Percentage(5);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Quantity";
                                column.Caption = @Resources.Resource.Quantity;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "Quantity")))
                                    );
                                });
                            });

                            if(ViewData["OrderType"] != null && int.Parse(ViewData["OrderType"].ToString()) != (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Adjust && int.Parse(ViewData["OrderType"].ToString()) != (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Normal)
                            {
                                settings.Columns.Add(column =>
                                {
                                    column.FieldName = "DeliveryDate";
                                    column.Caption = @Resources.Resource.ReturnedDate;
                                    column.Width = Unit.Percentage(10);
                                    column.SetDataItemTemplateContent(c =>
                                    {
                                        ViewContext.Writer.Write(
                                            string.Format(FEA_Ultil.FEAStringClass.FormatDateString(FEA_ITS_Site.Helper.SessionManager.CurrentLang, DataBinder.Eval(c.DataItem, "DeliveryDate")))
                                        );
                                    });

                                });

                            }
                            else if (ViewData["OrderType"] != null && int.Parse(ViewData["OrderType"].ToString()) == (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Normal)
                            {
                                settings.Columns.Add(column =>
                                 {
                                     column.FieldName = "DeliveryDate";
                                     column.Caption = @Resources.Resource.ShipmentDate;
                                     column.Width = Unit.Percentage(10);
                                     column.SetDataItemTemplateContent(c =>
                                     {
                                         ViewContext.Writer.Write(
                                             string.Format(FEA_Ultil.FEAStringClass.FormatDateString(FEA_ITS_Site.Helper.SessionManager.CurrentLang, DataBinder.Eval(c.DataItem, "DeliveryDate")))
                                         );
                                     });

                                 });
                            }

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Des";
                                column.Caption = Resources.Resource.Description;
                                column.Width = Unit.Percentage(35);
                            });


                            settings.SetDetailRowTemplateContent(c =>
                            {
                                ViewContext.Writer.Write(
                                                "Lịch sử Xuất/Nhập: <b>" +
                                                    DataBinder.Eval(c.DataItem, "ItemDetailName") +
                                                "<br />"
                                );
                                Html.RenderAction("ExportItemCheckingListPartial", new { ExportItemDetailID = DataBinder.Eval(c.DataItem, "ID") });
                            });
                            settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = false;
                            settings.SettingsDetail.ShowDetailRow = true;


                            settings.Settings.ShowFooter = false;

                            settings.ClientSideEvents.Init = "OnSetTotalRow"; //"function(s, e) { alert(s.cpVisibleRowCount); }";
                            settings.CustomJSProperties = (s, e) => // Custom field returned
                            {
                                //Return Row count
                                MVCxGridView Current = (MVCxGridView)s;
                                e.Properties["cpVisibleRowCount"] = Current.VisibleRowCount;
                            };
                        });
            grid.Bind((List<FEA_ITS_Site.Models.ItemInfo>)Model).GetHtml();

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditError"])
                </div>
            }
            else
            {
                <script type="text/javascript">ClearItemDetail();</script>
            }

            break;
        case "sa_approve_order_grid":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvSAApprovedOrder";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "SA", Action = "ApprovePartial" };

                            settings.Width = Unit.Percentage(100);

                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                            settings.SettingsText.EmptyDataRow = @Resources.Resource.Nodata;
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "OrderCode";
                                column.Caption = Resources.Resource.OrderCode;
                                column.Width = Unit.Percentage(10);
                                column.CellStyle.CssClass = "tCenter";
                                column.EditFormSettings.Visible = DefaultBoolean.False;
                                column.SetDataItemTemplateContent(c =>
                                {
                                    string url = "";
                                    url = FEA_ITS_Site.Helper.Ultilities.Root + "/SA/Application?Type=" + DataBinder.Eval(c.DataItem, "OrderType") + "&ID=" + DataBinder.Eval(c.DataItem, "ID") + "&TypeUser=admin','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode");

                                    ViewContext.Writer.Write(

                                        "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + url + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"

                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "DocumentTypeName";
                                column.Caption = Resources.Resource.DocType;
                                column.Width = Unit.Percentage(15);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    int Type = int.Parse(DataBinder.Eval(c.DataItem, "OrderType").ToString());
                                    ViewContext.Writer.Write(
                                       FEA_ITS_Site.Controllers.SAController.GetDocumentTypeName(Type)
                                    );
                                });

                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Creator";
                                column.Caption = Resources.Resource.Sender;
                                column.Width = Unit.Percentage(15);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CostCenter";
                                column.Caption = Resources.Resource.Department;
                                column.Width = Unit.Percentage(15);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Reason";
                                column.Caption = Resources.Resource.Reason;
                                column.Width = Unit.Percentage(30);
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Create_Date";
                                column.Caption = Resources.Resource.CreateDate;
                                column.Width = Unit.Percentage(15);
                                column.ColumnType = MVCxGridViewColumnType.DateEdit;

                                DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                                dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                                dateEdit.DisplayFormatInEditMode = true;
                                dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                            });



                            settings.CommandColumn.Visible = true;
                            settings.CommandColumn.Width = Unit.Percentage(5);

                            settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Account", Action = "EditModesUpdatePartial" };
                            settings.CommandColumn.ShowEditButton = false;

                            settings.CommandColumn.ShowSelectCheckbox = true;
                            settings.SettingsBehavior.AllowSelectSingleRowOnly = false;

                            settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                            settings.Settings.ShowFilterRowMenu = true;
                            settings.Settings.ShowFilterRow = true;


                            settings.Settings.ShowFooter = true;

                        });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["EditSuccess"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-success" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditSuccess"])
                </div>
            }
            break;
        case "FinishedForSA":
            grid = Html.DevExpress().GridView(
               settings =>
               {
                   settings.Name = "gvSAFinishedDocument";
                   settings.KeyFieldName = "ID";
                   settings.CallbackRouteValues = new { Controller = "SA", Action = "FinishedManagementForSA" };
                   settings.Width = Unit.Percentage(100);
                   settings.CommandColumn.Visible = false;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
                   settings.Settings.VerticalScrollableHeight = 450;
                   settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
                   settings.Settings.ShowGroupPanel = true;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;
                   settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;
                   //settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;
                   settings.Settings.ShowFilterRow = true;
                   settings.Settings.ShowFilterRowMenu = true;
                   settings.SettingsDetail.ShowDetailRow = false;
                   settings.Settings.ShowFooter = true;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.SettingsBehavior.AutoExpandAllGroups = false;
                   settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                   settings.SettingsText.EmptyDataRow = @Resources.Resource.Nodata;
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ID";
                       c.Caption = "ID";
                       c.Visible = false;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "OrderCode";
                       c.Caption = @Resources.Resource.OrderCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(column =>
                   {
                       column.FieldName = "DocumentTypeName";
                       column.Caption = Resources.Resource.DocType;
                       column.Width = Unit.Percentage(15);
                       column.SetDataItemTemplateContent(c =>
                       {
                           int Type = int.Parse(DataBinder.Eval(c.DataItem, "OrderType").ToString());
                           ViewContext.Writer.Write(
                              FEA_ITS_Site.Controllers.SAController.GetDocumentTypeName(Type)
                           );
                       });

                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Reason";
                       c.Caption = @Resources.Resource.Reason;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Description";
                       c.Caption = @Resources.Resource.Description;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Creator";
                       c.Caption = @Resources.Resource.Creator;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "CostCenter";
                       c.Caption = @Resources.Resource.CostCenterCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Create_Date";
                       c.Caption = @Resources.Resource.CreateDate;
                       c.Visible = true;

                       c.SetDataItemTemplateContent(x =>
                       {
                           ViewContext.Writer.Write(
                               string.Format(FEA_Ultil.FEAStringClass.FormatDateString(FEA_ITS_Site.Helper.SessionManager.CurrentLang, DataBinder.Eval(x.DataItem, "Create_Date")))
                           );
                       });
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ConfirmDate";
                       c.Caption = @Resources.Resource.CompleteDate;
                       c.Visible = true;

                       c.SetDataItemTemplateContent(x =>
                       {
                           ViewContext.Writer.Write(
                               string.Format(FEA_Ultil.FEAStringClass.FormatDateString(FEA_ITS_Site.Helper.SessionManager.CurrentLang, DataBinder.Eval(x.DataItem, "ConfirmDate")))
                           );
                       });
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Technician";
                       c.Caption = Resources.Resource.CompleteBy;
                   });
                   settings.SetDetailRowTemplateContent(c =>
                   {
                       // Html.RenderAction("CallbackDetail", new { ID = DataBinder.Eval(c.DataItem, "ID"), DocumentTypeName = DataBinder.Eval(c.DataItem, "DocumentTypeName") });
                   });
                   settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
               });

            grid.Bind(Model).GetHtml();
            break;
        case "sa_item_list_grid":
            grid = Html.DevExpress().GridView(
             settings =>
             {
                 settings.Name = "gvExportItem";
                 settings.KeyFieldName = "ID";
                 settings.CallbackRouteValues = new { Controller = "SA", Action = "EditModesPartial", OrderType = int.Parse(ViewData["Type"].ToString()) };

                 settings.Width = Unit.Percentage(100);

                 settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "OrderCode";
                     column.Caption = Resources.Resource.OrderCode;
                     column.Width = Unit.Percentage(10);
                     column.CellStyle.CssClass = "tCenter";
                     column.EditFormSettings.Visible = DefaultBoolean.False;
                     column.SetDataItemTemplateContent(c =>
                     {
                         string url = "";
                         url = FEA_ITS_Site.Helper.Ultilities.Root + "/SA/Application?Type=" + DataBinder.Eval(c.DataItem, "OrderType") + "&ID=" + DataBinder.Eval(c.DataItem, "ID") + "&TypeUser=User','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode");

                         ViewContext.Writer.Write(
                             "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + url + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                         );
                     });
                 });
                 settings.Columns.Add(column =>
                 {
                     column.Caption = Resources.Resource.DocType;
                     column.Width = Unit.Percentage(12);
                     column.SetDataItemTemplateContent(c =>
                     {
                         string TypeName = FEA_ITS_Site.Controllers.SAController.GetDocumentTypeName(int.Parse(DataBinder.Eval(c.DataItem, "OrderType").ToString()));


                         ViewContext.Writer.Write(
                             TypeName
                         );
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "ReasonName";
                     column.Caption = Resources.Resource.Reason;
                     column.Width = Unit.Percentage(20);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Description";
                     column.Caption = Resources.Resource.Description;
                     column.Width = Unit.Percentage(20);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreateDate";
                     column.Caption = Resources.Resource.CreateDate;
                     column.Width = Unit.Percentage(15);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Status";
                     column.Caption = Resources.Resource.Status;
                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.ComboBox;

                     var comboBox = column.PropertiesEdit as ComboBoxProperties;
                     comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetStatusList();
                     comboBox.TextField = "Value";
                     comboBox.ValueField = "Key";

                     comboBox.ValueType = typeof(int);

                     comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                     comboBox.DropDownStyle = DropDownStyle.DropDown;

                 });

                 settings.CommandColumn.Visible = true;
                 settings.CommandColumn.Width = Unit.Percentage(5);

                 settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "SA", Action = "EditModesDeletePartial", OrderType = int.Parse(ViewData["Type"].ToString()) };
                 settings.CommandColumn.ShowDeleteButton = true;
                 settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;
                 settings.SettingsBehavior.ConfirmDelete = true;


                 // settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                 settings.Settings.ShowFilterRowMenu = true;
                 settings.Settings.ShowFilterRow = true;

                 settings.Settings.ShowGroupPanel = true;
                 settings.Settings.ShowFooter = true;

             });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;

        case "item_detail_Sa_process_list_grid":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvSaItemProcessListDetails";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "SA", Action = "GetListItemProcessDetailPartial", type = int.Parse(ViewData["OrderType"].ToString())};

                            settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "SA", Action = "EditModesDeleteItemProcessDetail", type = int.Parse(ViewData["OrderType"].ToString()) };
                            settings.SettingsBehavior.ConfirmDelete = false;

                            settings.Width = Unit.Percentage(200);

                            settings.CommandColumn.Visible = true;
                            settings.CommandColumn.Width = Unit.Percentage(5);

                            settings.CommandColumn.ShowDeleteButton = true;
                            settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;

                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ItemName";
                                column.Caption = @Resources.Resource.MaterialName;
                                column.Width = Unit.Percentage(15);

                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Operate";
                                column.Caption = @Resources.Resource.OperationType;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    string oType = DataBinder.Eval(c.DataItem, "Operate").ToString();
                                    string sTypeName = "";
                                    int OrderType = int.Parse(ViewData["OrderType"].ToString());
                                    switch (oType)
                                    {
                                        case "OUT":
                                            sTypeName = ((OrderType == (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Lend)||(OrderType == (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Normal)) ? Resources.Resource.SAExport : Resources.Resource.SAImport;
                                            break;
                                        case "IN":
                                            sTypeName = ((OrderType == (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Lend)||(OrderType == (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Normal)) ? Resources.Resource.SAImport : Resources.Resource.SAExport;
                                            break;
                                        default:
                                            sTypeName = "UNKNOW";
                                            break;
                                    }
                                    ViewContext.Writer.Write(
                                        sTypeName
                                    );
                                });
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UnitName";
                                column.Caption = @Resources.Resource.Unit;
                                column.Width = Unit.Percentage(5);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Quantity";
                                column.Caption = @Resources.Resource.Quantity;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "Quantity")))
                                    );
                                });
                            });


                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Des";
                                column.Caption = Resources.Resource.Description;
                                column.Width = Unit.Percentage(35);
                            });

                            settings.Settings.ShowFooter = false;

                            settings.ClientSideEvents.Init = "OnSetTotalRowChecking"; //"function(s, e) { alert(s.cpVisibleRowCount); }";
                            settings.CustomJSProperties = (s, e) => // Custom field returned
                            {
                                //Return Row count
                                MVCxGridView Current = (MVCxGridView)s;
                                e.Properties["cpVisibleRowCount"] = Current.VisibleRowCount;
                            };
                        });
            grid.Bind((List<FEA_ITS_Site.Models.ItemInfo>)Model).GetHtml();

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditError"])
                </div>
            }
            else
            {
                <script type="text/javascript">ClearItemDetail();</script>
            }

            break;

        case "sa_item_pending_list_grid":
            grid = Html.DevExpress().GridView(
             settings =>
             {
                 settings.Name = "gvExportPendingListItem";
                 settings.KeyFieldName = "ID";
                 settings.CallbackRouteValues = new { Controller = "SA", Action = "GetSAPendingListPartial"};

                 settings.Width = Unit.Percentage(100);

                 settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "OrderCode";
                     column.Caption = Resources.Resource.OrderCode;
                     column.Width = Unit.Percentage(10);
                     column.CellStyle.CssClass = "tCenter";
                     column.EditFormSettings.Visible = DefaultBoolean.False;
                     column.SetDataItemTemplateContent(c =>
                     {
                         string url = "";
                         url = FEA_ITS_Site.Helper.Ultilities.Root + "/SA/ProcessApplication?OrderID=" + DataBinder.Eval(c.DataItem, "ID")+ "','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode");

                         ViewContext.Writer.Write(
                             "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + url + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                         );
                     });
                 });
                 settings.Columns.Add(column =>
                 {
                     column.Caption = Resources.Resource.DocType;
                     column.Width = Unit.Percentage(12);
                     column.SetDataItemTemplateContent(c =>
                     {
                         string TypeName = FEA_ITS_Site.Controllers.SAController.GetDocumentTypeName(int.Parse(DataBinder.Eval(c.DataItem, "OrderType").ToString()));


                         ViewContext.Writer.Write(
                             TypeName
                         );
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "ReasonName";
                     column.Caption = Resources.Resource.Reason;
                     column.Width = Unit.Percentage(20);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Description";
                     column.Caption = Resources.Resource.Description;
                     column.Width = Unit.Percentage(20);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreateDate";
                     column.Caption = Resources.Resource.CreateDate;
                     column.Width = Unit.Percentage(15);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Status";
                     column.Caption = Resources.Resource.Status;
                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.ComboBox;

                     var comboBox = column.PropertiesEdit as ComboBoxProperties;
                     comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetStatusList();
                     comboBox.TextField = "Value";
                     comboBox.ValueField = "Key";

                     comboBox.ValueType = typeof(int);

                     comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                     comboBox.DropDownStyle = DropDownStyle.DropDown;

                 });

                 // settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                 settings.Settings.ShowFilterRowMenu = true;
                 settings.Settings.ShowFilterRow = true;

                 settings.Settings.ShowGroupPanel = true;
                 settings.Settings.ShowFooter = true;

             });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;

        case "ExportItemChecking_List_Grid":
            grid = Html.DevExpress().GridView(
             settings =>
             {
                 settings.Name = "gvExportItemChecking_List_Grid_" + ViewData["ExportItemDetailID"];
                 settings.KeyFieldName = "ID";

                 settings.Width = Unit.Percentage(100);

                 settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;


                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "OperationType";
                     column.Caption = Resources.Resource.OperationType;
                     column.Width = Unit.Percentage(20);
                     column.SetDataItemTemplateContent(c =>
                     {
                         string OperationType = DataBinder.Eval(c.DataItem, "OperationType").ToString();
                         int OrderType = (DataBinder.Eval(c.DataItem, "Temp1") == null) ? -1 : int.Parse(DataBinder.Eval(c.DataItem, "Temp1").ToString());
                         string OperationText = "Unknow";


                         switch (OperationType)
                         {
                             case "OUT":
                                 OperationText = ((OrderType == (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Lend) || (OrderType == (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Normal)) ? Resources.Resource.SAExport : Resources.Resource.SAImport;
                                 break;
                             case "IN":
                                 OperationText = ((OrderType == (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Lend) || (OrderType == (int)FEA_SABusinessLogic.ExportItemManager.OrderType.Normal)) ? Resources.Resource.SAImport : Resources.Resource.SAExport;
                                 break;
                             default:
                                 break;
                         }

                         ViewContext.Writer.Write(
                             OperationText
                         );
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Quantity";
                     column.Caption = Resources.Resource.Quantity;
                     column.Width = Unit.Percentage(10);

                 });
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Note";
                     column.Caption = Resources.Resource.Description;
                     column.Width = Unit.Percentage(20);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "User.UserName";
                     column.Caption = Resources.Resource.Creator;
                     column.Width = Unit.Percentage(20);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreateDate";
                     column.Caption = Resources.Resource.CreateDate;
                     column.Width = Unit.Percentage(15);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });

             });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;
        #endregion

        #region "Export Region"

        case "WareHouseExportOrderDetailGrid":
            grid = Html.DevExpress().GridView(
                settings =>
                {
                    settings.Name = "gvWareHouseExportOrderDetailGrid"; //+ (new Random()).Next(1,999999).ToString();
                    settings.KeyFieldName = "ID";

                    settings.Width = Unit.Percentage(100);
                    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Hidden;


                    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Hidden;


                    settings.CommandColumn.Visible = true;
                    settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;
                    //settings.SettingsBehavior.AllowSelectByRowClick = true;
                    settings.SettingsBehavior.SelectionStoringMode = GridViewSelectionStoringMode.DataIntegrityOptimized;
                    settings.CommandColumn.ShowSelectCheckbox = true;
                    settings.CommandColumn.ShowClearFilterButton = true;
                    settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
                    settings.CommandColumn.Width = Unit.Percentage(3);
                    settings.SettingsBehavior.AllowFocusedRow = true;
                    settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = false;
                    settings.SettingsDetail.ShowDetailRow = true;
                    settings.CallbackRouteValues = new { Controller = "WarehouseAreaExport", Action = "GetListPartial" };
                    settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
                    //settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                    settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;

                    settings.Columns.Add(
                        column =>
                        {
                            column.FieldName = "IsExported";
                            column.Caption = "Đã xuất";
                            column.Width = Unit.Percentage(3);
                            column.ColumnType = MVCxGridViewColumnType.CheckBox;
                            column.FixedStyle = GridViewColumnFixedStyle.Left;
                        }
                    );

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "SerialNo";
                        column.Caption = Resources.Resource.SerialNo;
                        column.Width = Unit.Percentage(10);
                        column.FixedStyle = GridViewColumnFixedStyle.Left;
                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "RANGE";
                        column.Caption = "RANGE";
                        column.Width = Unit.Percentage(10);

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "CustomerPO";
                        column.Caption = Resources.Resource.CustomerPO;
                        column.Width = Unit.Percentage(15);
                    });


                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "InvoiceCode";
                        column.Caption = Resources.Resource.InvoiceNum;
                        column.Width = Unit.Percentage(15);
                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "Item";
                        column.Caption = Resources.Resource.ItemName;
                        column.Width = Unit.Percentage(15);
                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "ColorName";
                        column.Caption = Resources.Resource.ColorName;
                        column.Width = Unit.Percentage(10);

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "Size";
                        column.Caption = Resources.Resource.Size;
                        column.Width = Unit.Percentage(10);

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "Style";
                        column.Caption = Resources.Resource.Style;
                        column.Width = Unit.Percentage(10);

                    });

                    //settings.Columns.Add(column =>
                    //{
                    //    column.FieldName = "Size";
                    //    column.Caption = Resources.Resource.Size;
                    //    column.Width = Unit.Percentage(10);

                    //});

                    //settings.Columns.Add(column =>
                    //{
                    //    column.FieldName = "Quantity";
                    //    column.Caption = Resources.Resource.Quantity;
                    //    column.Width = Unit.Percentage(10);

                    //});

                    settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Count, "SerialNo");

                    settings.Settings.ShowFooter = true;

                    settings.Settings.ShowFilterRowMenu = true;
                    settings.Settings.ShowFilterRow = true;
                    //settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
                    settings.SettingsBehavior.AllowSort = true;

                    settings.PreRender = (sender, e) =>
                    {
                        MVCxGridView gridView = sender as MVCxGridView;
                        for (int i = 0; i < gridView.VisibleRowCount; i++)
                        {
                            gridView.Selection.SetSelection(i, (bool)gridView.GetRowValues(i, "IsChecked"));
                        }
                    };

                    settings.SetDetailRowTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(
                                       Resources.Resource.BarcodeHistory + ": <b>"
                        );
                        Html.RenderAction("BarcodeHistoryPartial", "WarehouseArea", new { PackingManifestDetailID = DataBinder.Eval(c.DataItem, "PackingManifestDetailID") });
                    });

                    settings.HtmlRowPrepared = (s, e) =>
                    {
                        if (e.RowType != GridViewRowType.Data) return;

                        // e.Row.BackColor = System.Drawing.Color.FromArgb(0x81, 0x5F, 0xFF, 0x7D);

                        //if (int.Parse(e.GetValue("STATUS").ToString()) == (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.OrderStatus.DELETED)
                        //{
                        //    e.Row.BackColor = System.Drawing.Color.SlateGray;
                        //    e.Row.ForeColor = System.Drawing.Color.White;
                        //}

                        //if (int.Parse(e.GetValue("STATUS").ToString()) != (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.OrderStatus.DELETED && e.GetValue("isCOnfirm").ToString() == "1")
                        //{

                        //    e.Row.BackColor = System.Drawing.Color.FromArgb(0x81, 0xF2, 0xFF, 0x5F);// System.Drawing.Color.CornflowerBlue;
                        //    if (int.Parse(e.GetValue("STATUS").ToString()) != (int)FEA_BusinessLogic.WarehouseArea.PackingManifestManager.OrderStatus.DELETED && e.GetValue("isStockin").ToString() == "1")
                        //    {
                        //        e.Row.BackColor = System.Drawing.Color.FromArgb(0x81, 0x5F, 0xFF, 0x7D);
                        //    }

                        //    e.Row.ForeColor = System.Drawing.Color.Black;
                        //}

                        if (int.Parse(e.GetValue("IsExported") == null ? "0" : e.GetValue("IsExported").ToString()) == 1)
                        {
                            e.Row.ForeColor = System.Drawing.Color.Black;
                            e.Row.BackColor = System.Drawing.Color.FromArgb(0x81, 0x5F, 0xFF, 0x7D);
                        }

                        if (int.Parse(e.GetValue("IsReturned") == null ? "0" : e.GetValue("IsReturned").ToString()) == 1)
                        {
                            e.Row.BackColor = e.Row.BackColor = System.Drawing.Color.FromArgb(0xFF, 0x9F, 0xCC);
                            e.Row.ForeColor = System.Drawing.Color.White;
                        }
                    };

                    settings.ClientSideEvents.EndCallback = "OnEndGridCallback";  // this function throw when we use the delete,update,insert data to Grid
                    settings.ClientSideEvents.Init = "OnSetTotalRow"; //"function(s, e) { alert(s.cpVisibleRowCount); }";
                    settings.CustomJSProperties = (s, e) => // Custom field returned
                    {
                        //Return Row count
                        MVCxGridView Current = (MVCxGridView)s;
                        e.Properties["cpVisibleRowCount"] = Current.VisibleRowCount;
                    };
                });
            try
            {
                grid.Bind(Model).GetHtml();
                //if (Model != null)
                //{ grid.Bind(Model).GetHtml(); }
                //else
                //{ grid.GetHtml(); }
            }
            catch (Exception ex)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw(ex.Message)
                </div>
                    }


            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditError"])
                </div>
            }

            break;
        case "WHExport_list_grid":
            grid = Html.DevExpress().GridView(
             settings =>
             {
                 settings.Name = "gvWhExportListGirdManagement";
                 settings.KeyFieldName = "ID";
                 settings.CallbackRouteValues = new { Controller = "WarehouseAreaExport", Action = "CallbackGrid"};

                 settings.Width = Unit.Percentage(100);

                 settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "OrderCode";
                     column.Caption = Resources.Resource.OrderCode;
                     column.Width = Unit.Percentage(10);
                     column.CellStyle.CssClass = "tCenter";
                     column.EditFormSettings.Visible = DefaultBoolean.False;
                     column.SetDataItemTemplateContent(c =>
                     {
                         ViewContext.Writer.Write(
                             "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + "/WarehouseAreaExport/StockOutOrder?ID=" + DataBinder.Eval(c.DataItem, "ID") + "','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode") + "','false')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                         );
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CustomerPO";
                     column.Caption = Resources.Resource.CustomerPO;
                     column.Width = Unit.Percentage(10);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "InvoiceNumber";
                     column.Caption = Resources.Resource.InvoiceNum;
                     column.Width = Unit.Percentage(10);

                 });
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "MainLine_";
                     column.Caption = "PO Item";
                     column.Width = Unit.Percentage(10);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "ShipmentDate";
                     column.Caption = Resources.Resource.ShipmentDate;


                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreateDate";
                     column.Caption = Resources.Resource.CreateDate;


                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "UserName";
                     column.Caption = Resources.Resource.Creator;
                     column.Width = Unit.Percentage(10);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName ="TotalContainer";
                     column.UnboundType = DevExpress.Data.UnboundColumnType.Integer;
                     column.Caption = Resources.Resource.ContainerCount;
                     column.Width = Unit.Percentage(5);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "TotalImportContainer";
                     column.UnboundType = DevExpress.Data.UnboundColumnType.Integer;
                     column.Caption = Resources.Resource.TotalContainerImported;
                     column.Width = Unit.Percentage(5);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "TotalReturnContainer";
                     column.UnboundType = DevExpress.Data.UnboundColumnType.Integer;
                     column.Caption = Resources.Resource.TotalReturnContainer;
                     column.Width = Unit.Percentage(5);
                 });
                 //gan du lieu cho Column
                 settings.CustomUnboundColumnData = (s, e) =>
                 {
                     //if (e.Column.FieldName == "TotalContainer")
                     //{
                     //    string sExportID = (e.GetListSourceFieldValue("ID")).ToString();
                     //    int count = new FEA_BusinessLogic.Base.Connection().db.WHExportOrderDetails.Where(i => i.ExportOrderID == sExportID).Count();
                     //    e.Value = count;
                     //};
                     //if (e.Column.FieldName == "TotalImportContainer")
                     //{
                     //    string sExportID = (e.GetListSourceFieldValue("ID")).ToString();
                     //    int count = new FEA_BusinessLogic.Base.Connection().db.WHExportOrderDetails.Where(i => i.ExportOrderID == sExportID && i.PackingManifestDetail.STATUS == 1 && i.PackingManifestDetail.isCOnfirm == 1 && i.PackingManifestDetail.isStockin == 1).Count();
                     //    e.Value = count;
                     //};

                     //if (e.Column.FieldName == "TotalReturnContainer")
                     //{
                     //    string sExportID = (e.GetListSourceFieldValue("ID")).ToString();
                     //    int count = new FEA_BusinessLogic.Base.Connection().db.WHExportOrderDetails.Where(i => i.ExportOrderID == sExportID && i.PackingManifestDetail.STATUS == 1 && i.PackingManifestDetail.isReturns == 1).Count();
                     //    e.Value = count;
                     //};
                 };


                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "isConfirm";
                     column.Caption = Resources.Resource.Confirm;
                     column.ColumnType = MVCxGridViewColumnType.CheckBox;
                     column.Width = Unit.Percentage(5);

                 });
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Status";
                     column.Caption = Resources.Resource.Status;
                     column.Width = Unit.Percentage(5);
                     column.ColumnType = MVCxGridViewColumnType.ComboBox;

                     var comboBox = column.PropertiesEdit as ComboBoxProperties;
                     comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetWHStatusList();
                     comboBox.TextField = "Value";
                     comboBox.ValueField = "Key";

                     comboBox.ValueType = typeof(int);

                     comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                     comboBox.DropDownStyle = DropDownStyle.DropDown;

                 });

                 settings.CommandColumn.Visible = true;
                 settings.CommandColumn.Width = Unit.Percentage(5);

                 settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "WarehouseAreaExport", Action = "EditImportModesDeletePartial", DateTo = ViewBag.DateTo == null ? "" : ViewBag.DateTo, DateFrom = ViewBag.DateFrom == null ? "" : ViewBag.DateFrom };
                 settings.CommandColumn.ShowDeleteButton = true;
                 settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;
                 settings.SettingsBehavior.ConfirmDelete = true;

                 settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalContainer");

                 settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalImportContainer");
                 settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalReturnContainer");
                 // settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                 settings.Settings.ShowFilterRowMenu = true;
                 settings.Settings.ShowFilterRow = true;

                 settings.Settings.ShowGroupPanel = true;
                 settings.Settings.ShowFooter = true;

             });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;
        #endregion

        #region "References form"

        case "HistoryCommentBySession":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvHistoryCommentBySession";
                            settings.KeyFieldName = "ID";
                           
                            settings.CallbackRouteValues = new { Controller = "References", Action = "GetListCommentBySesionPartial", OrderCode = ViewData["OrderCode"].ToString() };


                            settings.Width = Unit.Percentage(200);

                            //settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "SenderName";
                                column.Caption = @Resources.Resource.Sender;
                                column.Width = Unit.Percentage(15);

                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "User.UserNameEN";
                                column.Caption = Resources.Resource.UserName_EN;
                                column.Width = Unit.Percentage(20);

                            });
                            //
                            settings.Columns.Add(column =>
                            {
                                column.Caption = Resources.Resource.References;
                                column.Width = Unit.Percentage(10);
                                column.EditFormSettings.Visible = DefaultBoolean.False;
                                column.SetDataItemTemplateContent(c =>
                                {
                                    string RefList = new FEA_BusinessLogic.WFRefferenceManager().GetReferencePersonList(ViewData["OrderCode"].ToString());
                                    ViewContext.Writer.Write(
                                           RefList
                                    );
                                });
                            });


                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CreateDate";
                                column.Caption = Resources.Resource.CreateDate;
                                column.Width = Unit.Percentage(10);
                                column.ColumnType = MVCxGridViewColumnType.DateEdit;

                                DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                                dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                                dateEdit.DisplayFormatInEditMode = true;
                                dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                            });

                            settings.SetDetailRowTemplateContent(c =>
                            {
                                Html.RenderAction("GetListCommentPartial", new { WFRefferenceID = DataBinder.Eval(c.DataItem, "ID") });
                            });
                            settings.PreRender = (sender, e) =>
                            {
                                ((MVCxGridView)sender).DetailRows.ExpandRow(0);
                            };

                            settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = false;
                            settings.SettingsBehavior.AutoExpandAllGroups = true;
                            settings.SettingsDetail.ShowDetailRow = true;

                            settings.Settings.ShowFooter = false;
                        });
            grid.Bind(Model).GetHtml();

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditError"])
                </div>
            }
            else
            {
                <script type="text/javascript">ClearItemDetail();</script>
            }

            break;


        case "ReferencesCommentListGrid":

            grid = Html.DevExpress().GridView(
             settings =>
             {
                 settings.Name = "ReferencesCommentListGrid" + ViewData["WFRefferenceID"];
                 settings.KeyFieldName = "ID";

                 settings.Width = Unit.Percentage(100);

                 settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                 settings.CallbackRouteValues = new { Controller = "References", Action = "GetListCommentPartial", WFRefferenceID = ViewData["WFRefferenceID"].ToString() };

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "RefUserName";
                     column.Caption = Resources.Resource.Sender;
                     column.Width = Unit.Percentage(20);

                 });
                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "User.UserNameEN";
                     column.Caption = Resources.Resource.UserName_EN;
                     column.Width = Unit.Percentage(20);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Comment";
                     column.Caption = Resources.Resource.Comment;
                     column.Width = Unit.Percentage(60);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreateDate";
                     column.Caption = Resources.Resource.CreateDate;
                     column.Width = Unit.Percentage(20);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });

             });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;
        #endregion

        #region
        case "WHImportOrderList":
            grid = Html.DevExpress().GridView(
                settings =>
                {
                    settings.Name = "gvWHImportOrderList"; //+ (new Random()).Next(1,999999).ToString();
                    settings.KeyFieldName = "ID";

                    settings.Width = Unit.Percentage(100);
                    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Hidden;


                    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Hidden;


                    settings.CommandColumn.Visible = true;
                    settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;

                    settings.CommandColumn.ShowSelectCheckbox = true;
                    settings.CommandColumn.ShowClearFilterButton = true;
                    settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
                    settings.CommandColumn.Width = Unit.Percentage(3);

                    settings.SettingsBehavior.AllowFocusedRow = true;

                    settings.CallbackRouteValues = new { Controller = "WHImporter", Action = "GetListPartial" };
                    settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";



                    //settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                    settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;

                    settings.Columns.Add(
                        column =>
                        {
                            column.FieldName = "IsSetShelf";
                            column.Caption = Resources.Resource.IsShelf;
                            column.Width = Unit.Percentage(3);
                            column.ColumnType = MVCxGridViewColumnType.CheckBox;
                            column.FixedStyle = GridViewColumnFixedStyle.Left;
                        }
                    );


                    settings.Columns.Add(
                        column =>
                        {
                            column.FieldName = "IsExported";
                            column.Caption = Resources.Resource.Export;
                            column.Width = Unit.Percentage(3);
                            column.ColumnType = MVCxGridViewColumnType.CheckBox;
                            column.FixedStyle = GridViewColumnFixedStyle.Left;
                        }
                    );
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "SerialNo";
                        column.Caption = Resources.Resource.SerialNo;
                        column.Width = Unit.Percentage(10);
                        column.FixedStyle = GridViewColumnFixedStyle.Left;
                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "ShelfName";
                        column.Caption = Resources.Resource.ShelfName;
                        column.Width = Unit.Percentage(10);
                        column.FixedStyle = GridViewColumnFixedStyle.Left;

                    });
                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "CustomerPO";
                        column.Caption = Resources.Resource.CustomerPO;
                        column.Width = Unit.Percentage(15);
                    });


                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "Item";
                        column.Caption = Resources.Resource.ItemName;
                        column.Width = Unit.Percentage(15);
                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "ColorName";
                        column.Caption = Resources.Resource.ColorName;
                        column.Width = Unit.Percentage(10);

                    });

                    settings.Columns.Add(column =>
                    {
                        column.FieldName = "Style";
                        column.Caption = Resources.Resource.Style;
                        column.Width = Unit.Percentage(10);

                    });

                    settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Count, "SerialNo");

                    settings.Settings.ShowFooter = true;

                    settings.Settings.ShowFilterRowMenu = true;
                    settings.Settings.ShowFilterRow = true;
                    //settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
                    settings.SettingsBehavior.AllowSort = true;

                    settings.PreRender = (sender, e) =>
                    {
                        MVCxGridView gridView = sender as MVCxGridView;
                        for (int i = 0; i < gridView.VisibleRowCount; i++)
                        {
                            gridView.Selection.SetSelection(i, (bool)gridView.GetRowValues(i, "IsChecked"));
                        }
                    };

                    settings.HtmlRowPrepared = (s, e) =>
                    {
                        if (e.RowType != GridViewRowType.Data) return;

                        //if (int.Parse(e.GetValue("IsExported") == null ? "0" : e.GetValue("IsExported").ToString()) == 1)
                        //{
                        //    e.Row.ForeColor = System.Drawing.Color.Black;
                        //    e.Row.BackColor = System.Drawing.Color.FromArgb(0x81, 0x5F, 0xFF, 0x7D);
                        //}

                        if (int.Parse(e.GetValue("ShelfID") == null ? "0" : "1") == 1)
                        {
                            e.Row.BackColor = e.Row.BackColor = System.Drawing.Color.FromArgb(245, 245, 220);
                            e.Row.ForeColor = System.Drawing.Color.Black;
                        }
                    };

                    settings.ClientSideEvents.EndCallback = "OnEndGridCallback";  // this function throw when we use the delete,update,insert data to Grid
                    settings.ClientSideEvents.Init = "OnSetTotalRow"; //"function(s, e) { alert(s.cpVisibleRowCount); }";
                    settings.CustomJSProperties = (s, e) => // Custom field returned
                    {
                        //Return Row count
                        MVCxGridView Current = (MVCxGridView)s;
                        e.Properties["cpVisibleRowCount"] = Current.VisibleRowCount;
                    };
                });
            try
            {
                grid.Bind(Model).GetHtml();
                //if (Model != null)
                //{ grid.Bind(Model).GetHtml(); }
                //else
                //{ grid.GetHtml(); }
            }
            catch (Exception ex)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw(ex.Message)
                </div>
                    }


            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditError"])
                </div>
            }

            break;

        case "WHImporterApproveList":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvWHImporterApproveList";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "WHImporter", Action = "ApprovePartial" };

                            settings.Width = Unit.Percentage(100);

                            settings.SettingsPager.PageSize =  FEA_ITS_Site.Helper.Ultilities.PageSize;

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "OrderCode";
                                column.Caption = Resources.Resource.OrderCode;
                                column.Width = Unit.Percentage(10);
                                column.CellStyle.CssClass = "tCenter";
                                column.EditFormSettings.Visible = DefaultBoolean.False;
                                column.SetDataItemTemplateContent(c =>
                                {
                                    string url = "";
                                    url = FEA_ITS_Site.Helper.Ultilities.Root + "/WHImporter/index?ID="+ DataBinder.Eval(c.DataItem, "ID");

                                    ViewContext.Writer.Write(

                                        "<a style='color:black' title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"SetModalStyle('','','" + url + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"

                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CustomerPO";
                                column.Caption = Resources.Resource.CustomerPO;
                                column.Width = Unit.Percentage(15);

                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CustomerCode";
                                column.Caption = Resources.Resource.CustomerCode;
                                column.Width = Unit.Percentage(10);

                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "User.UserName";
                                column.Caption = Resources.Resource.Creator;
                                column.Width = Unit.Percentage(20);
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Description";
                                column.Caption = Resources.Resource.Reason;
                                column.Width = Unit.Percentage(30);
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "CreateDate";
                                column.Caption = Resources.Resource.CreateDate;
                                column.Width = Unit.Percentage(15);
                                column.ColumnType = MVCxGridViewColumnType.DateEdit;

                                DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                                dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                                dateEdit.DisplayFormatInEditMode = true;
                                dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                            });

                            settings.HtmlRowPrepared = (s, e) =>
                            {
                                if (e.RowType != GridViewRowType.Data) return;


                                if (int.Parse(e.GetValue("Status").ToString()) == (int)FEA_BusinessLogic.WarehouseArea.WHImportOrderManager.OrderStatus.SHELFED)
                                {
                                    e.Row.BackColor = e.Row.BackColor = System.Drawing.Color.FromArgb(100, 149, 237);
                                    e.Row.ForeColor = System.Drawing.Color.White;
                                }
                            };

                            settings.CommandColumn.Visible = false;
                            settings.CommandColumn.Width = Unit.Percentage(5);

                            settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "WHImporter", Action = "ApprovePartial" };
                            settings.CommandColumn.ShowEditButton = false;

                            //  settings.CommandColumn.ShowSelectCheckbox = false;
                            settings.SettingsBehavior.AllowSelectSingleRowOnly = false;

                            // settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                            settings.Settings.ShowFilterRowMenu = true;
                            settings.Settings.ShowFilterRow = true;

                            settings.Settings.ShowFooter = true;

                        });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["EditSuccess"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-success" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditSuccess"])
                </div>
            }
            break;
        #endregion

        case "ExportItemApproverItemList":
            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "ExportItemApproverItemList";
                settings.KeyFieldName = "ID";
                settings.CallbackRouteValues = new { Controller = "ExportItemApproverItem", Action = "EditModesPartial" };
                settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "ExportItemApproverItem", Action = "EditModesAddNewPartial" };
                settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "ExportItemApproverItem", Action = "EditModesUpdatePartial" };
                settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "ExportItemApproverItem", Action = "EditModesDeletePartial"};
                settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
                settings.SettingsBehavior.ConfirmDelete = true;
                settings.Width = Unit.Percentage(60);
                settings.CommandColumn.Visible = true;
                settings.CommandColumn.Width = Unit.Percentage(10);

                settings.SettingsCommandButton.NewButton.Text = Resources.Resource.AddNew;
                settings.CommandColumn.ShowNewButtonInHeader = true;

                settings.CommandColumn.ShowEditButton = true;
                settings.SettingsCommandButton.EditButton.Text = Resources.Resource.Update;

                settings.CommandColumn.ShowDeleteButton = true;
                settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;

                settings.SettingsDetail.ShowDetailRow = false;
                settings.Settings.ShowFooter = true;
                settings.SettingsBehavior.AllowFocusedRow = true;

                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                settings.Columns.Add(column =>
                {
                    column.FieldName = "CostCenterCode";
                    column.Caption = Resources.Resource.Department;
                    column.Width = Unit.Percentage(20);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.CodeCenterManager().GetItems(-1);
                    comboBox.TextField = "Remark";
                    comboBox.ValueField = "CostCenterCode";
                    comboBox.ValueType = typeof(string);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "ApproverID";
                    column.Caption = Resources.Resource.Approver;
                    column.Width = Unit.Percentage(20);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.UserManager().GetAdminUser();
                    comboBox.TextField = "UserName";
                    comboBox.ValueField = "UserID";
                    comboBox.ValueType = typeof(string);
                });


                settings.Columns.Add(column =>
                {
                    column.FieldName = "ItemID";
                    column.Caption = @Resources.Resource.ItemGroup;
                    column.Width = Unit.Percentage(20);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.ItemManager().GetItems(FEA_ITS_Site.Models.Helper.TagPrefixParameter.SECURITYAREA,"",1);
                    comboBox.TextField = "ItemName";
                    comboBox.ValueField = "ID";
                    comboBox.ValueType = typeof(string);


                    //column.SetFilterTemplateContent(c =>
                    //{
                    //    Html.RenderPartial("_ItemGridPartial", new FEA_BusinessLogic.ItemManager().GetItems(FEA_ITS_Site.Models.Helper.TagPrefixParameter.SECURITYAREA, "", 1));
                    //    string aaaa = "";
                    //});

                    //column.SetEditItemTemplateContent(c =>
                    //{
                    //    Session["ExportItem"] = c.Grid.GetRowValues(c.Grid.EditingRowVisibleIndex, c.Column.FieldName);
                    //    Html.RenderPartial("_ItemGridPartial", new FEA_BusinessLogic.ItemManager().GetItems(FEA_ITS_Site.Models.Helper.TagPrefixParameter.SECURITYAREA, "", 1));
                    //});

                    //comboBox.EnableCallbackMode = true;
                    //settings.CallbackRouteValues = new { Controller = "ExportItemApproverItem", Action = "EditModesPartial" };
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "ItemDetailID";
                    column.Caption = @Resources.Resource.MaterialName;
                    column.Width = Unit.Percentage(20);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.ItemDetailManager().GetItemsByItemType(FEA_ITS_Site.Models.Helper.TagPrefixParameter.SECURITYAREA);
                    comboBox.TextField = "ItemDetailName";
                    comboBox.ValueField = "ID";
                    comboBox.ValueType = typeof(string);


                    //column.SetFilterTemplateContent(c =>
                    //{
                    //    //Html.RenderPartial("FilterComboBox", new FEA_BusinessLogic.ItemDetailManager().GetItems());
                    //    string aaaa = "";
                    //});

                    //column.SetEditItemTemplateContent(c =>
                    //{
                    //    string itemID = Session["ExportItem"].ToString();
                    //    Html.RenderPartial("ItemDetailGridPartial", new FEA_BusinessLogic.ItemDetailManager().GetItems(itemID));
                    //});

                });
                settings.CellEditorInitialize = (sender, e) =>
                {
                    if (e.Column.FieldName == "ItemID")
                    {
                        ASPxComboBox cmb = (ASPxComboBox)e.Editor;
                        cmb.SelectedIndexChanged += (a,b) =>{

                            Response.Write("<script>alert('hallo')</script>");

                        };

                        // cmb.ClientSideEvents.SelectedIndexChanged = "function(a,b){alert('" + e.Editor.GetType().ToString() + "');}";
                        // cmb.ClientSideEvents.Init = "function(a,b){alert('" + e.Editor.GetType().ToString() + "');}";
                    }
                    if(e.Column.FieldName == "ItemDetailID"){
                        ASPxComboBox cmb = (ASPxComboBox)e.Editor;
                        cmb.Init += (a, b) => {
                            string vvvv = "";
                            Response.Write("<script>alert('hallo')</script>");
                        };
                    }
                };


                settings.Columns.Add(
                    column =>
                    {
                        column.FieldName = "Status";
                        column.Caption = Resources.Resource.Enabled;
                        column.Width = Unit.Percentage(10);
                        column.ColumnType = MVCxGridViewColumnType.CheckBox;
                    }
                );


                //settings.Columns.Add(column =>
                //{
                //    column.Caption = "#";
                //    column.SetDataItemTemplateContent(c =>
                //    {
                //        ViewContext.Writer.Write(
                //            "<a href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"SetModalStyle('50%','100','" + FEA_ITS_Site.Helper.Ultilities.Root + "/ItemDetail/ItemDetailManage?ItemID=" + DataBinder.Eval(c.DataItem, "ID") + "','" + @Resources.Resource.Detail + ": " + DataBinder.Eval(c.DataItem, "ItemName") + "')\">" + @Resources.Resource.Detail + "</a>"
                //        );
                //    });

                //    column.CellStyle.CssClass = "tCenter";
                //    column.Width = Unit.Percentage(20);
                //    column.SetColVisible(true);
                //    column.UnboundType = DevExpress.Data.UnboundColumnType.String;
                //    column.EditFormSettings.Visible = DefaultBoolean.False;
                //});

                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFilterRow = true;

            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }


            grid.Bind(Model).GetHtml();
            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;


        //GAAdjustment Layout
        case "GAAdjustmentList":
            grid = Html.DevExpress().GridView(
            settings =>
            {
                settings.Name = "GAAdjustmentList";
                settings.KeyFieldName = "ID";
                settings.CallbackRouteValues = new { Controller = "GA", Action = "EditModesPartial", EndDate = ViewBag.EndDate };
                settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "GA", Action = "EditModesAddNewPartial",  EndDate = ViewBag.EndDate };
                settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "GA", Action = "EditModesUpdatePartial",EndDate = ViewBag.EndDate };
                settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "GA", Action = "EditModesDeletePartial", EndDate = ViewBag.EndDate };
                settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
                settings.SettingsBehavior.ConfirmDelete = true;
                settings.Width = Unit.Percentage(100);
                settings.CommandColumn.Visible = true;
                settings.CommandColumn.Width = Unit.Percentage(10);

                settings.SettingsCommandButton.NewButton.Text = Resources.Resource.AddNew;
                settings.CommandColumn.ShowNewButtonInHeader = true;

                settings.CommandColumn.ShowEditButton = true;
                settings.SettingsCommandButton.EditButton.Text = Resources.Resource.Update;

                settings.CommandColumn.ShowDeleteButton = true;
                settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;

                settings.SettingsDetail.ShowDetailRow = false;
                settings.Settings.ShowFooter = true;
                settings.SettingsBehavior.AllowFocusedRow = true;

                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                settings.Columns.Add(column =>
                {
                    column.FieldName = "CostCenterCode";
                    column.Caption = Resources.Resource.Department;
                    column.Width = Unit.Percentage(20);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.CodeCenterManager().GetItems(-1);
                    comboBox.TextField = "Remark";
                    comboBox.ValueField = "CostCenterCode";
                    comboBox.ValueType = typeof(string);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "ItemDetail";
                    column.Caption = @Resources.Resource.MaterialName;
                    column.Width = Unit.Percentage(20);
                    column.ColumnType = MVCxGridViewColumnType.ComboBox;

                    var comboBox = column.PropertiesEdit as ComboBoxProperties;
                    comboBox.DataSource = new FEA_BusinessLogic.ItemDetailManager().GetItemsByItemType(FEA_ITS_Site.Models.Helper.TagPrefixParameter.GENERALAFFAIR);
                    comboBox.TextField = "ItemDetailName";
                    comboBox.ValueField = "ID";
                    comboBox.ValueType = typeof(string);


                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Month";
                    column.Caption = Resources.Resource.LastUpdateDateMonth;
                    column.Width = Unit.Percentage(15);
                    column.ColumnType = MVCxGridViewColumnType.DateEdit;
                    DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                    // dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                    dateEdit.DisplayFormatString = "MM/yyyy";
                    dateEdit.DisplayFormatInEditMode = true;
                    //dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                    dateEdit.EditFormatString = "MM/yyyy";
                });

                settings.Columns.Add(c =>
                {
                    c.FieldName = "AdjustQuantity"; //AdjustQuantity
                    c.Caption = @Resources.Resource.AdjustQuantity;
                    c.Visible = true;
                });
                settings.Columns.Add(c =>
                {
                    c.FieldName = "AdjustAmount"; //AdjustQuantity
                    c.Caption = @Resources.Resource.AdjustAmount;
                    c.Visible = true;
                });

                settings.Columns.Add(c =>
                {
                    c.FieldName = "Damged"; //Hư đổi
                    c.Caption = Resources.Resource.IsBroken;
                    c.Width = Unit.Percentage(10);
                    c.ColumnType = MVCxGridViewColumnType.CheckBox;
                });

                settings.Columns.Add(c =>
                {
                    c.FieldName = "Reason"; //Hư đổi
                    c.Caption = @Resources.Resource.Reason;
                    c.Visible = true;
                });



                settings.CellEditorInitialize = (sender, e) =>
                {
                    if(e.Column.FieldName == "ItemDetail"){
                        ASPxComboBox cmb = (ASPxComboBox)e.Editor;
                        cmb.Init += (a, b) => {
                            string vvvv = "";
                            Response.Write("<script>alert('hallo')</script>");
                        };
                    }
                };


                settings.Columns.Add(
                    column =>
                    {
                        column.FieldName = "Status";
                        column.Caption = Resources.Resource.Enabled;
                        column.Width = Unit.Percentage(10);
                        column.ColumnType = MVCxGridViewColumnType.CheckBox;
                    }
                );


                settings.Settings.ShowFilterRowMenu = true;
                settings.Settings.ShowFilterRow = true;

            });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }


            grid.Bind(Model).GetHtml();
            if (ViewData["DeleteError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["DeleteError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }

            if (ViewData["Success"] != null)
            {
                grid.SetEditErrorText((string)ViewData["Success"]);

                <div id="paginator-content-1" class="alert-small alert-success" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["Success"])
                </div>
            }
            break;


        case "GetCostComparingSpan":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvGetCostComparingSpan";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "ERP", Action = "DocumentPartial", FEPOCode = (ViewBag.FEPOCode == null) ? "" : ViewBag.FEPOCode, CustomerCode = (ViewBag.CustomerCode == null) ? "" : ViewBag.CustomerCode, BeginDate = ViewBag.BeginDate, EndDate = ViewBag.EndDate };

                            settings.Width = Unit.Percentage(100);

                            //settings.SettingsPager.PageSize = 5;// FEA_ITS_Site.Helper.Ultilities.PageSize;
                            settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ID";
                                column.SetColVisible(false);
                            });


                            settings.Columns.Add("FEPOCode", @Resources.Resource._010394);
                            settings.Columns.Add("OrderQuantity", @Resources.Resource._011687).PropertiesEdit.DisplayFormatString = "N";
                            settings.Columns.Add("AccountType", @Resources.Resource.AccountType);
                            settings.Columns.Add("FactoryName", @Resources.Resource._013611);
                            //Modify by Tony (24-08-2016)
                            settings.Columns.Add("EnglishName", @Resources.Resource._013616);
                            //
                            settings.Columns.Add("SalesQty", @Resources.Resource._011071);

                            settings.Columns.AddBand(stockinBand =>
                            {
                                stockinBand.Caption = @Resources.Resource._011072;
                                stockinBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;


                                stockinBand.Columns.Add("SalesPrice", @Resources.Resource._010294).PropertiesEdit.DisplayFormatString = "N";
                                stockinBand.Columns.Add("SalesAmt", @Resources.Resource._010207).PropertiesEdit.DisplayFormatString = "N";

                            });

                            settings.Columns.AddBand(stockinBand =>
                            {
                                stockinBand.Caption = @Resources.Resource.StockinAmount;
                                stockinBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;

                                stockinBand.Columns.Add("StockInQty", @Resources.Resource.Quantity).PropertiesEdit.DisplayFormatString = "N";
                                stockinBand.Columns.Add("StockInAmt", @Resources.Resource._010207).PropertiesEdit.DisplayFormatString = "N";

                            });

                            settings.Columns.AddBand(stockinBand =>
                            {
                                stockinBand.Caption = @Resources.Resource._011427;
                                stockinBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;


                                stockinBand.Columns.Add("FabricPrice", @Resources.Resource._010294).PropertiesEdit.DisplayFormatString = "N";
                                stockinBand.Columns.Add("FabricAmt", @Resources.Resource._010207).PropertiesEdit.DisplayFormatString = "N";

                            });

                            settings.Columns.AddBand(stockinBand =>
                            {
                                stockinBand.Caption = @Resources.Resource._011822;
                                stockinBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;


                                stockinBand.Columns.Add("AccessoryPrice", @Resources.Resource._010294).PropertiesEdit.DisplayFormatString = "N";
                                stockinBand.Columns.Add("AccessoryAmt", @Resources.Resource._010207).PropertiesEdit.DisplayFormatString = "N";
                            });

                            settings.Columns.AddBand(stockinBand =>
                            {
                                stockinBand.Caption = @Resources.Resource._010862;
                                stockinBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;


                                stockinBand.Columns.Add("PayPrice", @Resources.Resource._010294).PropertiesEdit.DisplayFormatString = "N";
                                stockinBand.Columns.Add("PayAmt", @Resources.Resource._010207).PropertiesEdit.DisplayFormatString = "N";
                            });

                            settings.Columns.AddBand(stockinBand =>
                            {
                                stockinBand.Caption = @Resources.Resource._010862;
                                stockinBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;


                                stockinBand.Columns.Add("ProducePrice", @Resources.Resource._010294).PropertiesEdit.DisplayFormatString = "N";
                                stockinBand.Columns.Add("ProduceAmt", @Resources.Resource._010207).PropertiesEdit.DisplayFormatString = "N";

                            });

                            settings.Columns.AddBand(stockinBand =>
                            {
                                stockinBand.Caption = @Resources.Resource._010864;
                                stockinBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;


                                stockinBand.Columns.Add("ProcessPrice", @Resources.Resource._010294).PropertiesEdit.DisplayFormatString = "N";
                                stockinBand.Columns.Add("ProcessAmt", @Resources.Resource._010207).PropertiesEdit.DisplayFormatString = "N";

                            });
                            settings.Columns.AddBand(stockinBand =>
                            {
                                stockinBand.Caption = @Resources.Resource._010865;
                                stockinBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;


                                stockinBand.Columns.Add("OutwardPrice", @Resources.Resource._010294).PropertiesEdit.DisplayFormatString = "N";
                                stockinBand.Columns.Add("OutwardAmt", @Resources.Resource._010207).PropertiesEdit.DisplayFormatString = "N";

                            });
                            settings.Columns.AddBand(stockinBand =>
                            {
                                stockinBand.Caption = @Resources.Resource.DiscountAmount;
                                stockinBand.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;


                                stockinBand.Columns.Add("DiscountPrice", @Resources.Resource._010294).PropertiesEdit.DisplayFormatString = "N";
                                stockinBand.Columns.Add("DiscountAmt", @Resources.Resource._010207).PropertiesEdit.DisplayFormatString = "N";

                            });

                            settings.Settings.ShowFilterRowMenu = true;
                            settings.Settings.ShowFilterRow = true;
                            settings.Settings.ShowFooter = true;
                            settings.Settings.ShowGroupPanel = true;


                            settings.PreRender = (sender, e) =>
                            {
                                ((MVCxGridView)sender).CollapseAll();
                            };
                        });


            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["EditSuccess"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-success" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditSuccess"])
                </div>
            }
            break;

        case "GAItemListGrid":
            grid = Html.DevExpress().GridView(
                        settings =>
                        {
                            settings.Name = "gvGaItemDetails";
                            settings.KeyFieldName = "ID";
                            settings.CallbackRouteValues = new { Controller = "GA", Action = "GetListItemDetailPartial", ShowCommand = Convert.ToBoolean(ViewData["ShowCommand"]) };


                            settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "GA", Action = "EditModesDeleteItemDetail" };
                            settings.SettingsBehavior.ConfirmDelete = false;

                            settings.Width = Unit.Percentage(200);


                            settings.CommandColumn.Visible = ViewData["ShowCommand"] == null ? false : Convert.ToBoolean(ViewData["ShowCommand"]);
                            settings.CommandColumn.Width = Unit.Percentage(5);

                            settings.CommandColumn.ShowDeleteButton = true;
                            settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;

                            settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                            settings.ClientSideEvents.Init = "OnSetTotalRow"; //"function(s, e) { alert(s.cpVisibleRowCount); }";

                            settings.ClientSideEvents.EndCallback = "OnEndGridCallback";  // this function throw when we use the delete,update,insert data to Grid

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ItemName";
                                column.Caption = @Resources.Resource.ItemType;
                                column.Width = Unit.Percentage(10);

                            });


                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "ItemDetailName";
                                column.Caption = @Resources.Resource.Specs;
                                column.Width = Unit.Percentage(15);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "UnitName";
                                column.Caption = @Resources.Resource.Unit;
                                column.Width = Unit.Percentage(5);
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "IsBroken";
                                column.Caption = @Resources.Resource.IsBroken;
                                column.Width = Unit.Percentage(5);
                                column.ColumnType = MVCxGridViewColumnType.CheckBox;
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Quantity";
                                column.Caption = @Resources.Resource.Quantity;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "Quantity")))
                                    );
                                });
                            });
                            //settings.Columns.Add(column =>
                            //{
                            //    column.FieldName = "QuanInStock";
                            //    column.Caption = @Resources.Resource.QuantityInStock;
                            //    column.Width = Unit.Percentage(5);
                            //    column.SetDataItemTemplateContent(c =>
                            //    {
                            //        ViewContext.Writer.Write(
                            //            string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "QuanInStock")))
                            //        );
                            //    });
                            //});
                            //settings.Columns.Add(column =>
                            //{
                            //    column.FieldName = "QuanNeeded";
                            //    column.Caption = @Resources.Resource.QuantityNeeded;
                            //    column.Width = Unit.Percentage(5);
                            //    column.SetDataItemTemplateContent(c =>
                            //    {
                            //        ViewContext.Writer.Write(
                            //            string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "QuanNeeded")))
                            //        );
                            //    });
                            //});

                            //settings.Columns.Add(column =>
                            //{
                            //    column.FieldName = "ToTalReceiverByDept";
                            //    column.Caption = Resources.Resource.ReceivedByDept;
                            //    column.Width = Unit.Percentage(5);
                            //    column.SetDataItemTemplateContent(c =>
                            //    {
                            //        ViewContext.Writer.Write(
                            //            string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "ToTalReceiverByDept")))
                            //        );
                            //    });
                            //});



                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Price";
                                column.Caption = @Resources.Resource.Price;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "Price")))
                                    );
                                });
                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Amount";
                                column.Caption = @Resources.Resource.Amount;
                                column.Width = Unit.Percentage(5);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "Amount")))
                                    );
                                });
                            });
                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "DeliveryDate";
                                column.Caption = Resources.Resource.DeliveryDate;
                                column.Width = Unit.Percentage(10);
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                        string.Format(FEA_Ultil.FEAStringClass.FormatDateString(FEA_ITS_Site.Helper.SessionManager.CurrentLang, DataBinder.Eval(c.DataItem, "DeliveryDate")))
                                    );
                                });

                            });

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "Des";
                                column.Caption = Resources.Resource.Description;
                                column.Width = Unit.Percentage(50);
                            });

                            settings.CustomJSProperties = (s, e) => // Custom field returned
                            {
                                if (ViewData["TotalAmount"] != null)
                                {
                                    e.Properties["cpTotalAmount"] = ViewData["TotalAmount"].ToString();
                                }

                                //Return Row count
                                MVCxGridView Current = (MVCxGridView)s;
                                e.Properties["cpVisibleRowCount"] = Current.VisibleRowCount;
                            };
                            settings.Settings.ShowFooter = false;


                        });
            grid.Bind((List<FEA_ITS_Site.Models.ItemInfo>)Model).GetHtml();

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);

                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["EditError"])
                </div>
            }
            else
            {
                <script type="text/javascript">ClearItemDetail();</script>
            }


            if (ViewData["TotalAmount"] != null)
            {
                <script type="text/javascript">SetTotalAmount(@ViewData["TotalAmount"].ToString())</script>
            }
            break;
        case "GaItemManagerListGrid":
            grid = Html.DevExpress().GridView(
             settings =>
             {
                 settings.Name = "gvGaItemManagerListGrid";
                 settings.KeyFieldName = "ID";
                 settings.CallbackRouteValues = new { Controller = "GA", Action = "GAItemEditModesPartial" };

                 settings.Width = Unit.Percentage(100);

                 settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "OrderCode";
                     column.Caption = Resources.Resource.OrderCode;
                     column.Width = Unit.Percentage(10);
                     column.CellStyle.CssClass = "tCenter";
                     column.EditFormSettings.Visible = DefaultBoolean.False;
                     column.SetDataItemTemplateContent(c =>
                     {
                         ViewContext.Writer.Write(
                             "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + "/GA/Index?ID=" + DataBinder.Eval(c.DataItem, "ID") + "&TypeUser=user','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode") + "')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                         );
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Reason";
                     column.Caption = Resources.Resource.Reason;
                     column.Width = Unit.Percentage(20);
                 });


                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CreateDate";
                     column.Caption = Resources.Resource.CreateDate;
                     column.Width = Unit.Percentage(15);
                     column.ColumnType = MVCxGridViewColumnType.DateEdit;

                     DateEditProperties dateEdit = column.PropertiesEdit as DateEditProperties;
                     dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                     dateEdit.DisplayFormatInEditMode = true;
                     dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);

                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "CurrencyID";
                     column.Caption = Resources.Resource.CurrencyType;
                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.ComboBox;

                     var comboBox = column.PropertiesEdit as ComboBoxProperties;
                     comboBox.DataSource = new FEA_BusinessLogic.CurrencyManager().GetItems(1);
                     comboBox.TextField = "NAME";
                     comboBox.ValueField = "ID";
                     comboBox.ValueType = typeof(string);
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "EstimateAmount";
                     column.Caption = Resources.Resource.EstiamtedAmount;
                     column.Width = Unit.Percentage(10);
                     column.SetDataItemTemplateContent(c =>
                     {
                         ViewContext.Writer.Write(
                             string.Format(FEA_Ultil.FEAStringClass.formatNumber(DataBinder.Eval(c.DataItem, "EstimateAmount")))
                         );
                     });
                 });

                 settings.Columns.Add(column =>
                 {
                     column.FieldName = "Status";
                     column.Caption = Resources.Resource.Status;
                     column.Width = Unit.Percentage(10);
                     column.ColumnType = MVCxGridViewColumnType.ComboBox;

                     var comboBox = column.PropertiesEdit as ComboBoxProperties;
                     comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetStatusList();
                     comboBox.TextField = "Value";
                     comboBox.ValueField = "Key";
                     comboBox.ValueType = typeof(int);
                 });

                 settings.CommandColumn.Visible = true;
                 settings.CommandColumn.Width = Unit.Percentage(5);

                 settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "GA", Action = "GAItemEditModesDeletePartial" };
                 settings.CommandColumn.ShowDeleteButton = true;
                 settings.SettingsCommandButton.DeleteButton.Text = Resources.Resource.Delete;
                 settings.SettingsBehavior.ConfirmDelete = true;


                 // settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

                 settings.Settings.ShowFilterRowMenu = true;
                 settings.Settings.ShowFilterRow = true;

                 settings.Settings.ShowGroupPanel = true;
                 settings.Settings.ShowFooter = true;

             });

            if (ViewData["EditError"] != null)
            {
                grid.SetEditErrorText((string)ViewData["EditError"]);
            }
            grid.Bind(Model).GetHtml();

            if (ViewData["DeleteError"] != null)
            {
                <div id="paginator-content-1" class="alert-small alert-danger" style="margin-top:10px;">
                    @Html.Raw((string)ViewData["DeleteError"])
                </div>
            }
            break;
        // Add by tony(2016-09-17)

        #region
        case "GAPushDataList":

            grid = Html.DevExpress().GridView(
               settings =>
               {
                   settings.Name = "gvPushDataList";

                   settings.KeyFieldName = "ID";
                   settings.CallbackRouteValues = new { Controller = "GA", Action = "DocumentGAPushDataPartial", OrderCode = ViewBag.OrderCode, BeginDate = ViewBag.BeginDate, EndDate = ViewBag.EndDate, Status = ViewBag.Status };
                   settings.Width = Unit.Percentage(100);
                   settings.CommandColumn.Visible = false;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
                   settings.Settings.VerticalScrollableHeight = 450;
                   settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                   settings.Settings.ShowGroupPanel = true;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;
                   settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;
                   settings.Settings.ShowFilterRow = true;
                   settings.Settings.ShowFilterRowMenu = true;
                   settings.SettingsDetail.ShowDetailRow = true;
                   settings.Settings.ShowFooter = true;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.SettingsBehavior.AutoExpandAllGroups = false;
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ID";
                       c.Caption = "ID";
                       c.Visible = false;
                   });
                   settings.Columns.Add(column =>
                   {
                       column.FieldName = "OrderCode";
                       column.Caption = Resources.Resource.OrderCode;
                       column.Width = Unit.Percentage(9);
                       column.CellStyle.CssClass = "tCenter";
                       column.EditFormSettings.Visible = DefaultBoolean.False;
                       column.SetDataItemTemplateContent(c =>
                       {
                           ViewContext.Writer.Write(
                               "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + "/GA/Index?ID=" + DataBinder.Eval(c.DataItem, "ID") + "','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode") + "','false')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                           );
                       });
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "OrderType";
                       c.Caption = Resources.Resource.DocType;
                       c.Width = Unit.Percentage(10);
                       c.GroupIndex = 0;


                       c.ColumnType = MVCxGridViewColumnType.ComboBox;
                       var comboBox = c.PropertiesEdit as ComboBoxProperties;
                       comboBox.DataSource = new FEA_BusinessLogic.WFDocumentTypeManager().GetItems(1);
                       comboBox.TextField = "Description";
                       comboBox.ValueField = "DocumentTypeName";
                       comboBox.ValueType = typeof(string);

                       comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                       comboBox.DropDownStyle = DropDownStyle.DropDown;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "PRCode";
                       c.Caption = @Resources.Resource.PRCode;
                       c.Width = Unit.Percentage(9);
                       c.Visible = ViewBag.showPRCode;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Creator";
                       c.Caption = @Resources.Resource.Creator;
                       c.Width = Unit.Percentage(10);
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Department";
                       c.Caption = @Resources.Resource.Department;
                       c.Width = Unit.Percentage(10);
                       c.Visible = true;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Reason";
                       c.Caption = @Resources.Resource.Reason;
                       c.Width = Unit.Percentage(10);
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "CreateDate";
                       c.Caption = @Resources.Resource.CreateDate;
                       c.Width = Unit.Percentage(8);
                       c.Visible = true;
                       c.ColumnType = MVCxGridViewColumnType.DateEdit;

                       DateEditProperties dateEdit = c.PropertiesEdit as DateEditProperties;
                       dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                       dateEdit.DisplayFormatInEditMode = true;
                       dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);


                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ProcessPerson";
                       c.Caption = @Resources.Resource.ProcessPerson;
                       c.Width = Unit.Percentage(8);
                       c.Visible = true;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ConfirmDate";
                       c.Caption = @Resources.Resource.CompleteDate;
                       c.Width = Unit.Percentage(9);
                       c.Visible = true;
                       c.ColumnType = MVCxGridViewColumnType.DateEdit;

                       DateEditProperties dateEdit = c.PropertiesEdit as DateEditProperties;
                       dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                       dateEdit.DisplayFormatInEditMode = true;
                       dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);


                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "EstimateAmount";
                       c.Caption = @Resources.Resource.EstiamtedAmount;
                       c.Width = Unit.Percentage(9);
                       c.Visible = true;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Status";
                       c.Caption = Resources.Resource.Status;
                       c.Width = Unit.Percentage(8);
                       c.ColumnType = MVCxGridViewColumnType.ComboBox;

                       var comboBox = c.PropertiesEdit as ComboBoxProperties;
                       comboBox.DataSource = FEA_ITS_Site.Controllers.HelperController.GetStatusList();
                       comboBox.TextField = "Value";
                       comboBox.ValueField = "Key";

                       comboBox.ValueType = typeof(int);

                       comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                       comboBox.DropDownStyle = DropDownStyle.DropDown;

                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Description";
                       c.Caption = @Resources.Resource.Description;
                       c.Width = Unit.Percentage(8);
                       c.Visible = true;
                   });

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "PersonPush";
                       c.Caption = @Resources.Resource.PushPerson;
                       c.Width = Unit.Percentage(8);
                       c.Visible = ViewBag.showCreatePerson;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Temp2";
                       c.Caption = @Resources.Resource.DatePush;
                       c.Width = Unit.Percentage(8);
                       c.Visible = ViewBag.showDatePush;
                       c.ColumnType = MVCxGridViewColumnType.DateEdit;

                       DateEditProperties dateEdit = c.PropertiesEdit as DateEditProperties;
                       dateEdit.DisplayFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);
                       dateEdit.DisplayFormatInEditMode = true;
                       dateEdit.EditFormatString = FEA_Ultil.FEAStringClass.DataDateFormat(FEA_ITS_Site.Helper.SessionManager.CurrentLang, false, true);


                   });

                   settings.CommandColumn.Visible = ViewBag.Checkbox;
                   settings.CommandColumn.ShowSelectCheckbox = true;
                   settings.CommandColumn.Width = Unit.Percentage(5);
                   settings.CommandColumn.SetHeaderTemplateContent(c =>
                   {
                       Html.DevExpress().CheckBox(settingsCheckBox =>
                       {
                           settingsCheckBox.Name = "cbSelectAll";

                           settingsCheckBox.Properties.ClientSideEvents.CheckedChanged = string.Format("function(s, e) {{ if(s.GetChecked()) {0}.SelectRows(); else {0}.UnselectRows(); }}", settings.Name);
                           settingsCheckBox.Checked = IsAllSelectedGridView(c.Grid);

                       }).Render();

                   });
                   settings.ClientSideEvents.SelectionChanged = "SelectionChanged";
                   settings.SettingsBehavior.AllowSelectByRowClick = true;
                   settings.SetDetailRowTemplateContent(c =>
                   {
                       Html.RenderAction("GAPushDataDetail", "GA", new { ID = DataBinder.Eval(c.DataItem, "ID") });
                   });
                   settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
               });

            grid.Bind(Model).GetHtml();
            @functions{
                bool IsAllSelectedGridView(ASPxGridView gridView)
                {
                    for (var i = 0; i < gridView.VisibleRowCount; i++)
                    {
                        if ((!gridView.IsGroupRow(i)) & (!gridView.Selection.IsRowSelected(i)))
                            return false;
                    }
                    return true;
                }
            }
            break;
        case "GADetailPushData":
            grid = Html.DevExpress().GridView(
               settings =>
               {

                   settings.Name = "GADetailPushData" + ViewData["ID"];
                   settings.KeyFieldName = "OrderCode";
                   settings.CallbackRouteValues = new { Controller = "GA", Action = "GAPushDataDetail", ID = ViewData["ID"] };
                   settings.SettingsBehavior.AllowSort = false;
                   settings.SettingsPager.AlwaysShowPager = false;
                   settings.Width = Unit.Percentage(100);
                   settings.CommandColumn.Visible = false;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "OrderCode";
                       c.Caption = @Resources.Resource.OrderCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemName";
                       c.Caption = @Resources.Resource.ItemName;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ItemDetailName";
                       c.Caption = @Resources.Resource.ItemNameDetail;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Quantity";
                       c.Caption = @Resources.Resource.Quantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Temp1";
                       c.Caption = @Resources.Resource.QuantityNeeded;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "EstimatePrice";
                       c.Caption = @Resources.Resource.EstimatedPrice;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "EstimateAmount";
                       c.Caption = @Resources.Resource.EstiamtedAmount;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Description";
                       c.Caption = @Resources.Resource.Description;
                       c.Visible = true;
                   });
               });
            grid.Bind(Model).GetHtml();

            break;

       
        //Tai 3.1
        case "ERPItemListGrid":
            
            grid = Html.DevExpress().GridView(
               settings =>
               {
                   settings.Name = "ERPDetailPushData";
                   settings.KeyFieldName = "ItemID";
                   settings.CallbackRouteValues = new { Controller = "ERPDocument", Action = "GETERPListItemDetailPartial",id = ViewBag.ID };
                   settings.SettingsBehavior.AllowSort = false;
                   settings.SettingsPager.AlwaysShowPager = false;
                   settings.Width = Unit.Percentage(100);
                   settings.CommandColumn.Visible = false;
                   settings.SettingsBehavior.AllowFocusedRow = true;
                   settings.SettingsBehavior.AllowSelectByRowClick = true;

                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "FEPO";
                       c.Caption = @Resources.Resource.FEPO;
                       c.Visible = true;

                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "MaterialCode";
                       c.Caption = @Resources.Resource.MaterialCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "MaterialName";
                       c.Caption = @Resources.Resource.MaterialName;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Spec";
                       c.Caption = @Resources.Resource.Specifications;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ColorCode";
                       c.Caption = @Resources.Resource.ColorCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "ColorName";
                       c.Caption = @Resources.Resource.ColorName;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "StockPosition";
                       c.Caption = @Resources.Resource.StorePosition;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Quantity";
                       c.Caption = @Resources.Resource.Quantity;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Unit";
                       c.Caption = @Resources.Resource.Unit;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "Remark";
                       c.Caption = @Resources.Resource.Note;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "DeclarationDate";
                       c.Caption = @Resources.Resource.DeclarationDate;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "DeclarationCode";
                       c.Caption = @Resources.Resource.DeclarationCode;
                       c.Visible = true;
                   });
                   settings.Columns.Add(c =>
                   {
                       c.FieldName = "MinimumType";
                       c.Caption = @Resources.Resource.MinimumType;
                       c.Visible = true;
                   });
               });
            grid.Bind(Model).GetHtml();
            break;
        case "ERPHistory":
            grid = Html.DevExpress().GridView(settings =>
            {
                settings.Name = "gvERPSignDocument";
                settings.KeyFieldName = "ID";
                settings.CallbackRouteValues = new { Controller = "ERPDocument", Action = "ERPDocumentQueryPartial",UserID=ViewBag.UserID,OrderCode=ViewBag.OrderCode,FEPOCode=ViewBag.FEPOCode, Status=ViewBag.Status };
                settings.Width = Unit.Percentage(100);
                settings.SettingsBehavior.AllowSort = true;
                settings.SettingsPager.AlwaysShowPager = false;
                settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
                settings.Settings.ShowFilterRow = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.SettingsBehavior.AllowFocusedRow = true;
                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                settings.Columns.Add(column =>
                {
                    column.FieldName = "ID";
                    column.Caption = "ID";
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "OrderCode";
                    column.Caption = @Resources.Resource.OrderCode;
                    column.Width = Unit.Percentage(10);
                    column.SetColVisible(true);
                    column.SetDataItemTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(
                            "<a title='" + @Resources.Resource.Select + "' href='#responsive' data-toggle='modal' data-target='.bs-example-modal-lg' onclick=\"parent.SetModalStyle('','','" + FEA_ITS_Site.Helper.Ultilities.Root + "/ERPDocument/ERPListItemDetailPartial?ID=" + DataBinder.Eval(c.DataItem, "ID") + "','" + Resources.Resource.OrderCode + ": " + DataBinder.Eval(c.DataItem, "OrderCode") + "','false')\">" + DataBinder.Eval(c.DataItem, "OrderCode") + "</a>"
                        );
                    });
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "FEPO";
                    column.Caption = "FEPO";
                    column.SetColVisible(false);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Remark";
                    column.Caption = "Remark";
                    column.Width = Unit.Percentage(25);
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "DocumentType";
                    column.Width = Unit.Percentage(15);
                    column.Caption = @Resources.Resource.DocumentTypeName;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Version";
                    column.Width = Unit.Percentage(5);
                    column.Caption = @Resources.Resource.Version;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Creator";
                    column.Width = Unit.Percentage(10);
                    column.Caption = @Resources.Resource.Creator;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Department";
                    column.Width = Unit.Percentage(10);
                    column.Caption = @Resources.Resource.Department;
                    column.SetColVisible(true);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "Approver";
                    column.Width = Unit.Percentage(10);
                    column.Caption = @Resources.Resource.Approver;
                    column.SetColVisible(false);
                });

                settings.Columns.Add(column =>
                {
                    column.FieldName = "CreateDate";
                    column.Width = Unit.Percentage(10);
                    column.Caption = @Resources.Resource.CreateDate;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
              {
                  column.FieldName = "isFinished";
                  column.Width = Unit.Percentage(10);
                  column.Caption = @Resources.Resource.Status;
                  column.SetColVisible(true);
              });

            });

            grid.Bind(Model).GetHtml();
            break;
        case "QueryOpenOrder":
            grid = Html.DevExpress().GridView(settings =>
            {
                settings.Name = "gvQueryOpenOrder";
                settings.KeyFieldName = "OrderCode";
                settings.CallbackRouteValues = new { Controller = "ERP", Action = "OpenOrderGird", FEPOCode = ViewBag.FEPOCode, FromDate = ViewBag.FromDate, ToDate = ViewBag.ToDate };
                settings.Width = Unit.Percentage(100);
                settings.SettingsBehavior.AllowSort = true;
                settings.SettingsPager.AlwaysShowPager = false;
                settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
                settings.Settings.ShowFilterRow = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.SettingsBehavior.AllowFocusedRow = true;
                settings.SettingsPager.PageSize = FEA_ITS_Site.Helper.Ultilities.PageSize;
                
                settings.Columns.Add(column =>
                {
                    column.FieldName = "OrderCode";
                    column.Caption = @Resources.Resource.OrderCode;
                    column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    column.Width=Unit.Percentage(10);
                    column.SetColVisible(true);
                    
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Remark";
                    column.Caption = @Resources.Resource.Department;
                    column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    column.Width = Unit.Percentage(10);
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "FEPO";
                    column.Caption = "FEPO";
                    column.Width = Unit.Percentage(10);
                    column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Reason";
                    column.Caption = @Resources.Resource.Cause;
                    column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    column.Width = Unit.Percentage(20);
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "ItemDetailName";
                    column.Caption = @Resources.Resource.Reason;
                    column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    column.Width = Unit.Percentage(15);
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Comment";
                    column.Caption = @Resources.Resource.Comment;
                    column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    column.Width = Unit.Percentage(20);
                    column.SetColVisible(true);
                });
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Description";
                    column.Caption = @Resources.Resource.Note;
                    column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    column.Width = Unit.Percentage(15);
                    column.SetColVisible(true);
                });
            });

            grid.Bind(Model).GetHtml();
            break;
        #endregion
        default:
            break;

    }
}
